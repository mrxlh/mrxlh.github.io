<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辉</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.collmall.com/"/>
  <updated>2020-03-08T13:18:14.555Z</updated>
  <id>http://blog.collmall.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020-03-07-基于Java对员工信息进行聚合分析</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-07-%E5%9F%BA%E4%BA%8EJava%E5%AF%B9%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E8%81%9A%E5%90%88%E5%88%86%E6%9E%90/ck918e9tm002togta149e89jn/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-07-%E5%9F%BA%E4%BA%8EJava%E5%AF%B9%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E8%81%9A%E5%90%88%E5%88%86%E6%9E%90/ck918e9tm002togta149e89jn/</id>
    <published>2020-04-15T10:32:04.302Z</published>
    <updated>2020-03-08T13:18:14.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java对员工信息进行聚合分析"><a href="#基于Java对员工信息进行聚合分析" class="headerlink" title="基于Java对员工信息进行聚合分析"></a>基于Java对员工信息进行聚合分析</h4><p>API 语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SearchResponse sr = node.client().prepareSearch()</span><br><span class="line">    .addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"by_country"</span>).field(<span class="string">"country"</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.dateHistogram(<span class="string">"by_year"</span>)</span><br><span class="line">            .field(<span class="string">"dateOfBirth"</span>)</span><br><span class="line">            .dateHistogramInterval(DateHistogramInterval.YEAR)</span><br><span class="line">            .subAggregation(AggregationBuilders.avg(<span class="string">"avg_children"</span>).field(<span class="string">"children"</span>))</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    .execute().actionGet();</span><br></pre></td></tr></table></figure><p>我们先给个需求：</p><p>（1）首先按照country国家来进行分组<br>（2）然后在每个country分组内，再按照入职年限进行分组<br>（3）最后计算每个分组内的平均薪资</p><p>PUT /company<br>{<br>  “mappings”: {<br>​      “employee”: {<br>​        “properties”: {<br>​          “age”: {<br>​            “type”: “long”<br>​          },<br>​          “country”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            },<br>​            “fielddata”: true<br>​          },<br>​          “join_date”: {<br>​            “type”: “date”<br>​          },<br>​          “name”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          },<br>​          “position”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          },<br>​          “salary”: {<br>​            “type”: “long”<br>​          }<br>​        }<br>​      }<br>​    }<br>}</p><p>GET /company/employee/_search<br>{<br>  “size”: 0,<br>  “aggs”: {<br>​    “group_by_country”: {<br>​      “terms”: {<br>​        “field”: “country”<br>​      },<br>​      “aggs”: {<br>​        “group_by_join_date”: {<br>​          “date_histogram”: {<br>​            “field”: “join_date”,<br>​            “interval”: “year”<br>​          },<br>​          “aggs”: {<br>​            “avg_salary”: {<br>​              “avg”: {<br>​                “field”: “salary”<br>​              }<br>​            }<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>​        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Aggregation&gt; aggrMap = searchResponse.getAggregations().asMap();</span><br><span class="line">StringTerms groupByCountry = (StringTerms) aggrMap.get(<span class="string">"group_by_country"</span>);</span><br><span class="line">Iterator&lt;Bucket&gt; groupByCountryBucketIterator = groupByCountry.getBuckets().iterator();</span><br><span class="line"><span class="keyword">while</span>(groupByCountryBucketIterator.hasNext()) &#123;</span><br><span class="line">Bucket groupByCountryBucket = groupByCountryBucketIterator.next();</span><br><span class="line"></span><br><span class="line">System.out.println(groupByCountryBucket.getKey() + <span class="string">"\t"</span> + groupByCountryBucket.getDocCount()); </span><br><span class="line"></span><br><span class="line">Histogram groupByJoinDate = (Histogram) groupByCountryBucket.getAggregations().asMap().get(<span class="string">"group_by_join_date"</span>); </span><br><span class="line">Iterator&lt;org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket&gt; groupByJoinDateBucketIterator = groupByJoinDate.getBuckets().iterator();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(groupByJoinDateBucketIterator.hasNext()) &#123;</span><br><span class="line">org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket groupByJoinDateBucket = groupByJoinDateBucketIterator.next();</span><br><span class="line"></span><br><span class="line">System.out.println(groupByJoinDateBucket.getKey() + <span class="string">"\t"</span> + groupByJoinDateBucket.getDocCount()); </span><br><span class="line"></span><br><span class="line">Avg avgSalary = (Avg) groupByJoinDateBucket.getAggregations().asMap().get(<span class="string">"avg_salary"</span>);</span><br><span class="line">System.out.println(avgSalary.getValue()); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregation;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.Histogram;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.StringTerms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.avg.Avg;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工聚合分析应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeAggrApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Settings settings = Settings.builder()</span><br><span class="line">.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>)); </span><br><span class="line"></span><br><span class="line">SearchResponse searchResponse = client.prepareSearch(<span class="string">"company"</span>) </span><br><span class="line">.addAggregation(AggregationBuilders.terms(<span class="string">"group_by_country"</span>).field(<span class="string">"country"</span>)</span><br><span class="line">.subAggregation(AggregationBuilders</span><br><span class="line">.dateHistogram(<span class="string">"group_by_join_date"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>)</span><br><span class="line">.dateHistogramInterval(DateHistogramInterval.YEAR)</span><br><span class="line">.subAggregation(AggregationBuilders.avg(<span class="string">"avg_salary"</span>).field(<span class="string">"salary"</span>)))</span><br><span class="line">)</span><br><span class="line">.execute().actionGet();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Aggregation&gt; aggrMap = searchResponse.getAggregations().asMap();</span><br><span class="line"></span><br><span class="line">StringTerms groupByCountry = (StringTerms) aggrMap.get(<span class="string">"group_by_country"</span>);</span><br><span class="line">Iterator&lt;Bucket&gt; groupByCountryBucketIterator = groupByCountry.getBuckets().iterator();</span><br><span class="line"><span class="keyword">while</span>(groupByCountryBucketIterator.hasNext()) &#123;</span><br><span class="line">Bucket groupByCountryBucket = groupByCountryBucketIterator.next();</span><br><span class="line">System.out.println(groupByCountryBucket.getKey() + <span class="string">":"</span> + groupByCountryBucket.getDocCount()); </span><br><span class="line"></span><br><span class="line">Histogram groupByJoinDate = (Histogram) groupByCountryBucket.getAggregations().asMap().get(<span class="string">"group_by_join_date"</span>);</span><br><span class="line">Iterator&lt;org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket&gt; groupByJoinDateBucketIterator = groupByJoinDate.getBuckets().iterator();</span><br><span class="line"><span class="keyword">while</span>(groupByJoinDateBucketIterator.hasNext()) &#123;</span><br><span class="line">org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket groupByJoinDateBucket = groupByJoinDateBucketIterator.next();</span><br><span class="line">System.out.println(groupByJoinDateBucket.getKey() + <span class="string">":"</span> +groupByJoinDateBucket.getDocCount()); </span><br><span class="line"></span><br><span class="line">Avg avg = (Avg) groupByJoinDateBucket.getAggregations().asMap().get(<span class="string">"avg_salary"</span>); </span><br><span class="line">System.out.println(avg.getValue()); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-06-基于Java对员工信息进行复杂的搜索操作</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-06-%E5%9F%BA%E4%BA%8EJava%E5%AF%B9%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E6%90%9C%E7%B4%A2%E6%93%8D%E4%BD%9C/ck918e9tk002qogta8byo9lf0/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-06-%E5%9F%BA%E4%BA%8EJava%E5%AF%B9%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E6%90%9C%E7%B4%A2%E6%93%8D%E4%BD%9C/ck918e9tk002qogta8byo9lf0/</id>
    <published>2020-04-15T10:32:04.298Z</published>
    <updated>2020-03-08T13:12:56.670Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java对员工信息进行复杂的搜索操作"><a href="#基于Java对员工信息进行复杂的搜索操作" class="headerlink" title="基于Java对员工信息进行复杂的搜索操作"></a>基于Java对员工信息进行复杂的搜索操作</h4><p>API:</p><p>SearchResponse response = client.prepareSearch(“index1”, “index2”)<br>​        .setTypes(“type1”, “type2”)<br>​        .setQuery(QueryBuilders.termQuery(“multi”, “test”))                 // Query<br>​        .setPostFilter(QueryBuilders.rangeQuery(“age”).from(12).to(18))     // Filter<br>​        .setFrom(0).setSize(60)<br>​        .get();</p><p>需求：</p><p>（1）搜索职位中包含technique的员工<br>（2）同时要求age在30到40岁之间<br>（3）分页查询，查找第一页</p><p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “bool”: {<br>​      “must”: [<br>​        {<br>​          “match”: {<br>​            “position”: “technique”<br>​          }<br>​        }<br>​      ],<br>​      “filter”: {<br>​        “range”: {<br>​          “age”: {<br>​            “gte”: 30,<br>​            “lte”: 40<br>​          }<br>​        }<br>​      }<br>​    }<br>  },<br>  “from”: 0,<br>  “size”: 1<br>}</p><p>刚才一边运行创建document，一边搜索什么都没搜索到？？？？</p><p>近实时！！！</p><p>默认是1秒以后，写入es的数据，才能被搜索到。很明显刚才，写入数据不到一秒，所以就搜索不到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工搜索应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSearchApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Settings settings = Settings.builder()</span><br><span class="line">.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">//prepareData(client);</span></span><br><span class="line">executeSearch(client);</span><br><span class="line"></span><br><span class="line">client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行搜索操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeSearch</span><span class="params">(TransportClient client)</span> </span>&#123;</span><br><span class="line">SearchResponse response = client.prepareSearch(<span class="string">"company"</span>)</span><br><span class="line">.setTypes(<span class="string">"employee"</span>)</span><br><span class="line">.setQuery(QueryBuilders.matchQuery(<span class="string">"position"</span>, <span class="string">"technique"</span>))</span><br><span class="line">.setPostFilter(QueryBuilders.rangeQuery(<span class="string">"age"</span>).from(<span class="number">30</span>).to(<span class="number">40</span>))</span><br><span class="line">.setFrom(<span class="number">0</span>).setSize(<span class="number">1</span>)</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">SearchHit[] searchHits = response.getHits().getHits();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; searchHits.length; i++) &#123;</span><br><span class="line">System.out.println(searchHits[i].getSourceAsString()); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>) </span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"jack"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">27</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"technique software"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">10000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"2"</span>) </span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"marry"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">35</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"technique manager"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">12000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"3"</span>) </span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"tom"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">32</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"senior technique software"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2016-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">11000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"4"</span>) </span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"jen"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">25</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"junior finance"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"usa"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2016-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">7000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"5"</span>) </span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"mike"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">37</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"finance manager"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"usa"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2015-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">15000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-05-基于Java实现员工信息的增删改查</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-05-%E5%9F%BA%E4%BA%8EJava%E5%AE%9E%E7%8E%B0%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/ck918e9tl002rogta2wzu1so3/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-05-%E5%9F%BA%E4%BA%8EJava%E5%AE%9E%E7%8E%B0%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/ck918e9tl002rogta2wzu1so3/</id>
    <published>2020-04-15T10:32:04.295Z</published>
    <updated>2020-03-08T09:56:23.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java实现员工信息的增删改查"><a href="#基于Java实现员工信息的增删改查" class="headerlink" title="基于Java实现员工信息的增删改查"></a>基于Java实现员工信息的增删改查</h4><h5 id="1、maven依赖"><a href="#1、maven依赖" class="headerlink" title="1、maven依赖"></a>1、maven依赖</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>创建log4j2的配置文件</p><p>log4j2.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appender.console.type = Console</span><br><span class="line">appender.console.name = console</span><br><span class="line">appender.console.layout.type = PatternLayout</span><br><span class="line"></span><br><span class="line">rootLogger.level = info</span><br><span class="line">rootLogger.appenderRef.console.ref = console</span><br></pre></td></tr></table></figure><h5 id="2、构建client"><a href="#2、构建client" class="headerlink" title="2、构建client"></a>2、构建client</h5><p>Settings settings = Settings.builder()<br>​        .put(“cluster.name”, “myClusterName”).build();<br>TransportClient client = new PreBuiltTransportClient(settings);</p><p>TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)<br>​        .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(“host1”), 9300))<br>​        .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(“host2”), 9300));</p><p>client.close();</p><h5 id="3、创建document"><a href="#3、创建document" class="headerlink" title="3、创建document"></a>3、创建document</h5><p>IndexResponse response = client.prepareIndex(“index”, “type”, “1”)<br>​        .setSource(jsonBuilder()<br>​                    .startObject()<br>​                        .field(“user”, “kimchy”)<br>​                        .field(“postDate”, new Date())<br>​                        .field(“message”, “trying out Elasticsearch”)<br>​                    .endObject()<br>​                  )<br>​        .get();</p><h5 id="4、查询document"><a href="#4、查询document" class="headerlink" title="4、查询document"></a>4、查询document</h5><p>GetResponse response = client.prepareGet(“index”, “type”, “1”).get();</p><h5 id="5、修改document"><a href="#5、修改document" class="headerlink" title="5、修改document"></a>5、修改document</h5><p>client.prepareUpdate(“index”, “type”, “1”)<br>​        .setDoc(jsonBuilder()<br>​            .startObject()<br>​                .field(“gender”, “male”)<br>​            .endObject())<br>​        .get();</p><h5 id="6、删除document"><a href="#6、删除document" class="headerlink" title="6、删除document"></a>6、删除document</h5><p>DeleteResponse response = client.prepareDelete(“index”, “type”, “1”).get();</p><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工增删改查的应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeCRUDApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 先构建client</span></span><br><span class="line">Settings settings = Settings.builder()</span><br><span class="line">.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//createEmployee(client); </span></span><br><span class="line"><span class="comment">//getEmployee(client);</span></span><br><span class="line"><span class="comment">//updateEmployee(client); </span></span><br><span class="line"><span class="comment">//deleteEmployee(client); </span></span><br><span class="line"></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建员工信息（创建一个document）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">IndexResponse response = client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>)</span><br><span class="line">.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"name"</span>, <span class="string">"jack"</span>)</span><br><span class="line">.field(<span class="string">"age"</span>, <span class="number">27</span>)</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"technique"</span>)</span><br><span class="line">.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">.field(<span class="string">"salary"</span>, <span class="number">10000</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line">System.out.println(response.getResult()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">GetResponse response = client.prepareGet(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">System.out.println(response.getSourceAsString()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">UpdateResponse response = client.prepareUpdate(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>) </span><br><span class="line">.setDoc(XContentFactory.jsonBuilder()</span><br><span class="line">.startObject()</span><br><span class="line">.field(<span class="string">"position"</span>, <span class="string">"technique manager"</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line">System.out.println(response.getResult());  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除 员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DeleteResponse response = client.prepareDelete(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">System.out.println(response.getResult());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-04-写入流程实现海量磁盘文件合并（segment merge，optimize）</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-04-%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%B5%B7%E9%87%8F%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%EF%BC%88segment%20merge%EF%BC%8Coptimize%EF%BC%89/ck918e9tm002sogtaeqfg7sjo/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-04-%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%B5%B7%E9%87%8F%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%EF%BC%88segment%20merge%EF%BC%8Coptimize%EF%BC%89/ck918e9tm002sogtaeqfg7sjo/</id>
    <published>2020-04-15T10:32:04.292Z</published>
    <updated>2020-03-08T09:38:04.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写入流程实现海量磁盘文件合并（segment-merge，optimize）"><a href="#写入流程实现海量磁盘文件合并（segment-merge，optimize）" class="headerlink" title="写入流程实现海量磁盘文件合并（segment merge，optimize）"></a>写入流程实现海量磁盘文件合并（segment merge，optimize）</h4><p>每秒一个segment file，文件过多，而且每次search都要搜索所有的segment，很耗时</p><p>默认会在后台执行segment merge操作，在merge的时候，被标记为deleted的document也会被彻底物理删除</p><p>每次merge操作的执行流程</p><p>（1）选择一些有相似大小的segment，merge成一个大的segment<br>（2）将新的segment flush到磁盘上去<br>（3）写一个新的commit point，包括了新的segment，并且排除旧的那些segment<br>（4）将新的segment打开供搜索<br>（5）将旧的segment删除</p><p>POST /my_index/_optimize?max_num_segments=1，尽量不要手动执行，让它自动默认执行就可以了</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/ynUf-eiQ8O8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-03-实现durability可靠存储（translog，flush）</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-03-%E5%AE%9E%E7%8E%B0durability%E5%8F%AF%E9%9D%A0%E5%AD%98%E5%82%A8%EF%BC%88translog%EF%BC%8Cflush%EF%BC%89/ck918e9ti002nogta8j6meqbd/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-03-%E5%AE%9E%E7%8E%B0durability%E5%8F%AF%E9%9D%A0%E5%AD%98%E5%82%A8%EF%BC%88translog%EF%BC%8Cflush%EF%BC%89/ck918e9ti002nogta8j6meqbd/</id>
    <published>2020-04-15T10:32:04.289Z</published>
    <updated>2020-03-08T09:31:22.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="实现durability可靠存储（translog，flush）"><a href="#实现durability可靠存储（translog，flush）" class="headerlink" title="实现durability可靠存储（translog，flush）"></a>实现durability可靠存储（translog，flush）</h4><p>再次优化的写入流程</p><p>（1）数据写入buffer缓冲和translog日志文件<br>（2）每隔一秒钟，buffer中的数据被写入新的segment file，并进入os cache，此时segment被打开并供search使用<br>（3）buffer被清空<br>（4）重复1~3，新的segment不断添加，buffer不断被清空，而translog中的数据不断累加<br>（5）当translog长度达到一定程度的时候，commit操作发生<br>  （5-1）buffer中的所有数据写入一个新的segment，并写入os cache，打开供使用<br>  （5-2）buffer被清空<br>  （5-3）一个commit ponit被写入磁盘，标明了所有的index segment<br>  （5-4）filesystem cache中的所有index segment file缓存数据，被fsync强行刷到磁盘上<br>  （5-5）现有的translog被清空，创建一个新的translog</p><p>基于translog和commit point，如何进行数据恢复</p><p>fsync+清空translog，就是flush，默认每隔30分钟flush一次，或者当translog过大的时候，也会触发flush操作</p><p>POST /my_index/_flush，一般来说别手动flush，让ES自动执行就可以了</p><p>translog，每隔5秒被fsync一次到磁盘上。在一次增删改操作之后，当fsync在primary shard和replica shard都成功之后，那次增删改操作才会成功</p><p>但是这种在一次增删改时强行fsync translog可能会导致部分操作比较耗时，也可以允许部分数据丢失，设置异步fsync translog</p><p>PUT /my_index/_settings<br>{<br>​    “index.translog.durability”: “async”,<br>​    “index.translog.sync_interval”: “5s”<br>}</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/fdnQ4UZNY3M.png" alt=""></p><p>终极版本:</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/ITIUgWavU08.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-02-优化写入流程实现NRT近实时（filesystem cache，refresh）</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-02-%E4%BC%98%E5%8C%96%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%AE%9E%E7%8E%B0NRT%E8%BF%91%E5%AE%9E%E6%97%B6%EF%BC%88filesystem%20cache%EF%BC%8Crefresh%EF%BC%89/ck918e9tk002pogta22ab5b4a/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-02-%E4%BC%98%E5%8C%96%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%AE%9E%E7%8E%B0NRT%E8%BF%91%E5%AE%9E%E6%97%B6%EF%BC%88filesystem%20cache%EF%BC%8Crefresh%EF%BC%89/ck918e9tk002pogta22ab5b4a/</id>
    <published>2020-04-15T10:32:04.285Z</published>
    <updated>2020-03-08T09:23:47.666Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="优化写入流程实现NRT近实时（filesystem-cache，refresh）"><a href="#优化写入流程实现NRT近实时（filesystem-cache，refresh）" class="headerlink" title="优化写入流程实现NRT近实时（filesystem cache，refresh）"></a>优化写入流程实现NRT近实时（filesystem cache，refresh）</h4><p>现有流程的问题，每次都必须等待fsync将segment刷入磁盘，才能将segment打开供search使用，这样的话，从一个document写入，到它可以被搜索，可能会超过1分钟！！！这就不是近实时的搜索了！！！主要瓶颈在于fsync实际发生磁盘IO写数据进磁盘，是很耗时的。</p><p>写入流程别改进如下：</p><p>（1）数据写入buffer<br>（2）每隔一定时间，buffer中的数据被写入segment文件，但是先写入os cache<br>（3）只要segment写入os cache，那就直接打开供search使用，不立即执行commit</p><p>数据写入os cache，并被打开供搜索的过程，叫做refresh，默认是每隔1秒refresh一次。也就是说，每隔一秒就会将buffer中的数据写入一个新的index segment file，先写入os cache中。所以，es是近实时的，数据写入到可以被搜索，默认是1秒。</p><p>POST /my_index/_refresh，可以手动refresh，一般不需要手动执行，让es自己搞就可以了</p><p>比如说，我们现在的时效性要求，比较低，只要求一条数据写入es，一分钟以后才让我们搜索到就可以了，那么就可以调整refresh interval</p><p>PUT /my_index<br>{<br>  “settings”: {<br>​    “refresh_interval”: “30s”<br>  }<br>}</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/9DvuSHDWyeA.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-03-01-剖析document写入原理（buffer，segment，commit）</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-03-01-%E5%89%96%E6%9E%90document%E5%86%99%E5%85%A5%E5%8E%9F%E7%90%86%EF%BC%88buffer%EF%BC%8Csegment%EF%BC%8Ccommit%EF%BC%89/ck918e9tj002oogtabixh77h1/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-03-01-%E5%89%96%E6%9E%90document%E5%86%99%E5%85%A5%E5%8E%9F%E7%90%86%EF%BC%88buffer%EF%BC%8Csegment%EF%BC%8Ccommit%EF%BC%89/ck918e9tj002oogtabixh77h1/</id>
    <published>2020-04-15T10:32:04.281Z</published>
    <updated>2020-03-08T09:10:07.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="剖析document写入原理（buffer，segment，commit）"><a href="#剖析document写入原理（buffer，segment，commit）" class="headerlink" title="剖析document写入原理（buffer，segment，commit）"></a>剖析document写入原理（buffer，segment，commit）</h4><p>（1）数据写入buffer<br>（2）commit point<br>（3）buffer中的数据写入新的index segment<br>（4）等待在os cache中的index segment被fsync强制刷到磁盘上<br>（5）新的index sgement被打开，供search使用<br>（6）buffer被清空</p><p>每次commit point时，会有一个.del文件，标记了哪些segment中的哪些document被标记为deleted了<br>搜索的时候，会依次查询所有的segment，从旧的到新的，比如被修改过的document，在旧的segment中，会标记为deleted，在新的segment中会有其新的数据</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/FMr1GIRdH14.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-29-倒排索引组成结构以及其索引不可变原因</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-29-%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E5%85%B6%E7%B4%A2%E5%BC%95%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%8E%9F%E5%9B%A0/ck918e9th002logta5ml257ai/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-29-%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E5%85%B6%E7%B4%A2%E5%BC%95%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%8E%9F%E5%9B%A0/ck918e9th002logta5ml257ai/</id>
    <published>2020-04-15T10:32:04.279Z</published>
    <updated>2020-03-08T08:57:39.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="倒排索引组成结构以及其索引不可变原因"><a href="#倒排索引组成结构以及其索引不可变原因" class="headerlink" title="倒排索引组成结构以及其索引不可变原因"></a>倒排索引组成结构以及其索引不可变原因</h4><p>倒排索引，是适合用于进行搜索的</p><p>倒排索引的结构</p><p>（1）包含这个关键词的document list<br>（2）包含这个关键词的所有document的数量：IDF（inverse document frequency）<br>（3）这个关键词在每个document中出现的次数：TF（term frequency）<br>（4）这个关键词在这个document中的次序<br>（5）每个document的长度：length norm<br>（6）包含这个关键词的所有document的平均长度</p><p>倒排索引不可变的好处</p><p>（1）不需要锁，提升并发能力，避免锁的问题<br>（2）数据不变，一直保存在os cache中，只要cache内存足够<br>（3）filter cache一直驻留在内存，因为数据不变<br>（4）可以压缩，节省cpu和io开销</p><p>倒排索引不可变的坏处：每次都要重新构建整个索引</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-28-基于scoll+bulk+索引别名实现零停机重建索引</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-28-%E5%9F%BA%E4%BA%8Escoll+bulk+%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8D%E5%AE%9E%E7%8E%B0%E9%9B%B6%E5%81%9C%E6%9C%BA%E9%87%8D%E5%BB%BA%E7%B4%A2%E5%BC%95/ck918e9tf002iogta0szngpnw/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-28-%E5%9F%BA%E4%BA%8Escoll+bulk+%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8D%E5%AE%9E%E7%8E%B0%E9%9B%B6%E5%81%9C%E6%9C%BA%E9%87%8D%E5%BB%BA%E7%B4%A2%E5%BC%95/ck918e9tf002iogta0szngpnw/</id>
    <published>2020-04-15T10:32:04.276Z</published>
    <updated>2020-03-08T08:41:08.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于scoll-bulk-索引别名实现零停机重建索引"><a href="#基于scoll-bulk-索引别名实现零停机重建索引" class="headerlink" title="基于scoll+bulk+索引别名实现零停机重建索引"></a>基于scoll+bulk+索引别名实现零停机重建索引</h4><h6 id="1、重建索引"><a href="#1、重建索引" class="headerlink" title="1、重建索引"></a>1、重建索引</h6><p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中</p><p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可</p><p>（1）一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2017-01-01这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的</p><p>PUT /my_index/my_type/3<br>{<br>  “title”: “2017-01-03”<br>}</p><p>此时该index的类型映射为 date</p><p>{<br>  “my_index”: {<br>​    “mappings”: {<br>​      “my_type”: {<br>​        “properties”: {<br>​          “title”: {<br>​            “type”: “date”<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>（2）当后期向索引中加入string类型的title值的时候，就会报错</p><p>PUT /my_index/my_type/4<br>{<br>  “title”: “my first article”<br>}</p><p>此时会报错</p><p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “mapper_parsing_exception”,<br>​        “reason”: “failed to parse [title]”<br>​      }<br>​    ],<br>​    “type”: “mapper_parsing_exception”,<br>​    “reason”: “failed to parse [title]”,<br>​    “caused_by”: {<br>​      “type”: “illegal_argument_exception”,<br>​      “reason”: “Invalid format: &quot;my first article&quot;“<br>​    }<br>  },<br>  “status”: 400<br>}</p><p>（3）如果此时想修改title的类型，是不可能的</p><p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “title”: {<br>​      “type”: “text”<br>​    }<br>  }<br>}</p><p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “illegal_argument_exception”,<br>​        “reason”: “mapper [title] of different type, current_type [date], merged_type [text]”<br>​      }<br>​    ],<br>​    “type”: “illegal_argument_exception”,<br>​    “reason”: “mapper [title] of different type, current_type [date], merged_type [text]”<br>  },<br>  “status”: 400<br>}</p><p>（4）此时，唯一的办法，就是进行reindex，也就是说，重新建立一个索引，将旧索引的数据查询出来，再导入新索引</p><p>（5）如果说旧索引的名字，是old_index，新索引的名字是new_index，终端java应用，已经在使用old_index在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低</p><p>（6）所以说，给java应用一个别名，这个别名是指向旧索引的，java应用先用着，java应用先用goods_index alias来操作，此时实际指向的是旧的my_index</p><p>PUT /my_index/_alias/goods_index</p><p>（7）新建一个index，调整其title的类型为string</p><p>PUT /my_index_new<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {<br>​        “title”: {<br>​          “type”: “text”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>（8）使用scroll api将数据批量查询出来</p><p>GET /my_index/_search?scroll=1m<br>{<br>​    “query”: {<br>​        “match_all”: {}<br>​    },<br>​    “sort”: [“_doc”],<br>​    “size”:  1<br>}</p><p>{<br>  “_scroll_id”: “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAADpAFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6QRY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAAOkIWNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAADpDFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6RBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”,<br>  “took”: 1,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 3,<br>​    “max_score”: null,<br>​    “hits”: [<br>​      {<br>​        “_index”: “my_index”,<br>​        “_type”: “my_type”,<br>​        “_id”: “2”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “title”: “2017-01-02”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      }<br>​    ]<br>  }<br>}</p><p>（9）采用bulk api将scoll查出来的一批数据，批量写入新索引</p><p>POST /_bulk<br>{ “index”:  { “_index”: “my_index_new”, “_type”: “my_type”, “_id”: “2” }}<br>{ “title”:    “2017-01-02” }</p><p>（10）反复循环多次，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引</p><p>（11）将goods_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零提交，高可用</p><p>POST /_aliases<br>{<br>​    “actions”: [<br>​        { “remove”: { “index”: “my_index”, “alias”: “goods_index” }},<br>​        { “add”:    { “index”: “my_index_new”, “alias”: “goods_index” }}<br>​    ]<br>}</p><p>（12）直接通过goods_index别名来查询，是否ok</p><p>GET /goods_index/my_type/_search</p><h6 id="2、基于alias对client透明切换index"><a href="#2、基于alias对client透明切换index" class="headerlink" title="2、基于alias对client透明切换index"></a>2、基于alias对client透明切换index</h6><p>PUT /my_index_v1/_alias/my_index</p><p>client对my_index进行操作</p><p>reindex操作，完成之后，切换v1到v2</p><p>POST /_aliases<br>{<br>​    “actions”: [<br>​        { “remove”: { “index”: “my_index_v1”, “alias”: “my_index” }},<br>​        { “add”:    { “index”: “my_index_v2”, “alias”: “my_index” }}<br>​    ]<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-27-自定义dynamic mapping策略</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-27-%E8%87%AA%E5%AE%9A%E4%B9%89dynamic%20mapping%E7%AD%96%E7%95%A5/ck918e9th002kogta2zkf8ne1/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-27-%E8%87%AA%E5%AE%9A%E4%B9%89dynamic%20mapping%E7%AD%96%E7%95%A5/ck918e9th002kogta2zkf8ne1/</id>
    <published>2020-04-15T10:32:04.274Z</published>
    <updated>2020-03-08T07:58:38.165Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="自定义dynamic-mapping策略"><a href="#自定义dynamic-mapping策略" class="headerlink" title="自定义dynamic mapping策略"></a>自定义dynamic mapping策略</h4><h6 id="1、定制dynamic策略"><a href="#1、定制dynamic策略" class="headerlink" title="1、定制dynamic策略"></a>1、定制dynamic策略</h6><p> true：遇到陌生字段，就进行dynamic mapping<br>false：遇到陌生字段，就忽略<br>strict：遇到陌生字段，就报错</p><p>PUT /my_index<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “dynamic”: “strict”,  // 设置属性<br>​      “properties”: {<br>​        “title”: {<br>​          “type”: “text”<br>​        },<br>​        “address”: {<br>​          “type”: “object”,<br>​          “dynamic”: “true”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>设置和类型不同的field 时</p><p>PUT /my_index/my_type/1<br>{<br>  “title”: “my article”,<br>  “content”: “this is my article”,<br>  “address”: {<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  }<br>}</p><p>会报以下错误:</p><p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “strict_dynamic_mapping_exception”,<br>​        “reason”: “mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed”<br>​      }<br>​    ],<br>​    “type”: “strict_dynamic_mapping_exception”,<br>​    “reason”: “mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed”<br>  },<br>  “status”: 400<br>}</p><p>增减一条数据:</p><p>PUT /my_index/my_type/1<br>{<br>  “title”: “my article”,<br>  “address”: {<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  }<br>}</p><p>查看这个</p><p>GET /my_index/_mapping/my_type</p><p>{<br>  “my_index”: {<br>​    “mappings”: {<br>​      “my_type”: {<br>​        “dynamic”: “strict”,<br>​        “properties”: {<br>​          “address”: {<br>​            “dynamic”: “true”,<br>​            “properties”: {<br>​              “city”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “province”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              }<br>​            }<br>​          },<br>​          “title”: {<br>​            “type”: “text”<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><h6 id="2、定制dynamic-mapping策略"><a href="#2、定制dynamic-mapping策略" class="headerlink" title="2、定制dynamic mapping策略"></a>2、定制dynamic mapping策略</h6><p>（1）date_detection</p><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p><p>PUT /my_index/_mapping/my_type<br>{<br>​    “date_detection”: false<br>}</p><p>（2）定制自己的dynamic mapping template（type level）</p><p>PUT /my_index<br>{<br>​    “mappings”: {<br>​        “my_type”: {<br>​            “dynamic_templates”: [<br>​                { “en”: {<br>​                      “match”:              “*_en”,<br>​                      “match_mapping_type”: “string”,<br>​                      “mapping”: {<br>​                          “type”:           “string”,<br>​                          “analyzer”:       “english”<br>​                      }<br>​                }}<br>​            ]<br>}}}</p><p>PUT /my_index/my_type/1<br>{<br>  “title”: “this is my first article”<br>}</p><p>PUT /my_index/my_type/2<br>{<br>  “title_en”: “this is my first article”<br>}</p><p>title没有匹配到任何的dynamic模板，默认就是standard分词器，不会过滤停用词，is会进入倒排索引，用is来搜索是可以搜索到的<br>title_en匹配到了dynamic模板，就是english分词器，会过滤停用词，is这种停用词就会被过滤掉，用is来搜索就搜索不到了</p><p>（3）定制自己的default mapping template（index level）</p><p>PUT /my_index<br>{<br>​    “mappings”: {<br>​        “<em>default</em>“: {<br>​            “_all”: { “enabled”:  false }<br>​        },<br>​        “blog”: {<br>​            “_all”: { “enabled”:  true  }<br>​        }<br>​    }<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-26-mapping root object深入剖析</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-26-mapping%20root%20object%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/ck918e9tg002jogta0gsjcatt/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-26-mapping%20root%20object%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/ck918e9tg002jogta0gsjcatt/</id>
    <published>2020-04-15T10:32:04.271Z</published>
    <updated>2020-03-08T07:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mapping-root-object深入剖析"><a href="#mapping-root-object深入剖析" class="headerlink" title="mapping root object深入剖析"></a>mapping root object深入剖析</h4><h6 id="1、root-object"><a href="#1、root-object" class="headerlink" title="1、root object"></a>1、root object</h6><p>就是某个type对应的mapping json，包括了properties，metadata（_id，_source，_type），settings（analyzer），其他settings（比如include_in_all）</p><p>PUT /my_index<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {}<br>​    }<br>  }<br>}</p><h6 id="2、properties"><a href="#2、properties" class="headerlink" title="2、properties"></a>2、properties</h6><p>type，index，analyzer</p><p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “title”: {<br>​      “type”: “text”<br>​    }<br>  }<br>}</p><h6 id="3、-source"><a href="#3、-source" class="headerlink" title="3、_source"></a>3、_source</h6><p>好处</p><p>（1）查询的时候，直接可以拿到完整的document，不需要先拿document id，再发送一次请求拿document<br>（2）partial update基于_source实现<br>（3）reindex时，直接基于_source实现，不需要从数据库（或者其他外部存储）查询数据再修改<br>（4）可以基于_source定制返回field<br>（5）debug query更容易，因为可以直接看到_source</p><p>如果不需要上述功能，可以禁用_source</p><p>禁用语法:</p><p>PUT /my_index/_mapping/my_type2<br>{<br>  “_source”: {“enabled”: false}<br>}</p><h6 id="4、-all"><a href="#4、-all" class="headerlink" title="4、_all"></a>4、_all</h6><p>将所有field打包在一起，作为一个_all field，建立索引。没指定任何 field 进行搜索时，就是使用_all field在搜索。</p><p>PUT /my_index/_mapping/my_type3<br>{<br>  “_all”: {“enabled”: false}<br>}</p><p>也可以在field级别设置include_in_all field，设置是否要将field的值包含在_all field中</p><p>PUT /my_index/_mapping/my_type4<br>{<br>  “properties”: {<br>​    “my_field”: {<br>​      “type”: “text”,<br>​      “include_in_all”: false<br>​    }<br>  }<br>}</p><h6 id="5、标识性metadata"><a href="#5、标识性metadata" class="headerlink" title="5、标识性metadata"></a>5、标识性metadata</h6><p>_index，_type，_id</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-25-type的底层数据结构</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-25-type%E7%9A%84%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ck918e9ti002mogtafmmsfpae/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-25-type%E7%9A%84%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ck918e9ti002mogtafmmsfpae/</id>
    <published>2020-04-15T10:32:04.267Z</published>
    <updated>2020-03-07T15:38:22.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="type的底层数据结构"><a href="#type的底层数据结构" class="headerlink" title="type的底层数据结构"></a>type的底层数据结构</h5><p>type，是一个index中用来区分类似的数据的，但是可能有不同的fields，而且有不同的属性来控制索引建立、分词器<br>field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，不区分类型的<br>也就是说lucene是没有type的概念的，在document中，实际上将type作为一个document的field来存储，即_type，es通过_type来进行type的过滤和筛选<br>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的</p><p>eg: type的数据结构</p><p>{<br>   “ecommerce”: {<br>​      “mappings”: {<br>​         “elactronic_goods”: {<br>​            “properties”: {<br>​               “name”: {<br>​                  “type”: “string”,<br>​               },<br>​               “price”: {<br>​                  “type”: “double”<br>​               },<br>​           “service_period”: {<br>​          “type”: “string”<br>​           }<br>​            }<br>​         },<br>​         “fresh_goods”: {<br>​            “properties”: {<br>​               “name”: {<br>​                  “type”: “string”,<br>​               },<br>​               “price”: {<br>​                  “type”: “double”<br>​               },<br>​           “eat_period”: {<br>​          “type”: “string”<br>​           }<br>​            }<br>​         }<br>​      }<br>   }<br>}</p><p>以下两个type 在底层存储的时候</p><p>{<br>  “name”: “geli kongtiao”,<br>  “price”: 1999.0,<br>  “service_period”: “one year”<br>}</p><p>{<br>  “name”: “aozhou dalongxia”,<br>  “price”: 199.0,<br>  “eat_period”: “one week”<br>}</p><p>同一type在底层的存储是这样子的,会把共有的东西糅合在一起</p><p>{<br>   “ecommerce”: {<br>​      “mappings”: {<br>​        “_type”: {<br>​          “type”: “string”,<br>​          “index”: “not_analyzed”<br>​        },<br>​        “name”: {<br>​          “type”: “string”<br>​        }<br>​        “price”: {<br>​          “type”: “double”<br>​        }<br>​        “service_period”: {<br>​          “type”: “string”<br>​        }<br>​        “eat_period”: {<br>​          “type”: “string”<br>​        }<br>​      }<br>   }<br>}</p><p>{<br>  “_type”: “elactronic_goods”,<br>  “name”: “geli kongtiao”,<br>  “price”: 1999.0,<br>  “service_period”: “one year”,<br>  “eat_period”: “”<br>}</p><p>{<br>  “_type”: “fresh_goods”,<br>  “name”: “aozhou dalongxia”,<br>  “price”: 199.0,<br>  “service_period”: “”,<br>  “eat_period”: “one week”<br>}</p><p>最佳实践，将类似结构的type放在一个index下，这些type应该有多个field是相同的<br>假如说，你将两个type的field完全不同，放在一个index下，那么就每条数据都至少有一半的field在底层的lucene中是空值，会有严重的性能问题, 和占用空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-24-修改分词器以及自定义分词器</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-24-%E4%BF%AE%E6%94%B9%E5%88%86%E8%AF%8D%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/ck918e9tf002hogta33nwg0z0/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-24-%E4%BF%AE%E6%94%B9%E5%88%86%E8%AF%8D%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/ck918e9tf002hogta33nwg0z0/</id>
    <published>2020-04-15T10:32:04.264Z</published>
    <updated>2020-03-07T15:30:28.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="修改分词器以及自定义分词器"><a href="#修改分词器以及自定义分词器" class="headerlink" title="修改分词器以及自定义分词器"></a>修改分词器以及自定义分词器</h4><h6 id="1、默认的分词器简介"><a href="#1、默认的分词器简介" class="headerlink" title="1、默认的分词器简介"></a>1、默认的分词器简介</h6><p>standard</p><p>standard tokenizer：以单词边界进行切分<br>standard token filter：什么都不做<br>lowercase token filter：将所有字母转换为小写<br>stop token filer（默认被禁用）：移除停用词，比如a the it等等</p><h6 id="2、修改分词器的设置"><a href="#2、修改分词器的设置" class="headerlink" title="2、修改分词器的设置"></a>2、修改分词器的设置</h6><p>启用english停用词token filter</p><p>PUT /my_index<br>{<br>  “settings”: {<br>​    “analysis”: {<br>​      “analyzer”: {<br>​        “es_std”: { // 自己起的名字<br>​          “type”: “standard”,<br>​          “stopwords”: “<em>english</em>“<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>GET /my_index/_analyze<br>{<br>  “analyzer”: “standard”,<br>  “text”: “a dog is in the house”<br>}</p><p>GET /my_index/_analyze<br>{<br>  “analyzer”: “es_std”,<br>  “text”:”a dog is in the house”<br>}</p><h6 id="3、定制化自己的分词器"><a href="#3、定制化自己的分词器" class="headerlink" title="3、定制化自己的分词器"></a>3、定制化自己的分词器</h6><p>PUT /my_index<br>{<br>  “settings”: {<br>​    “analysis”: {<br>​      “char_filter”: {<br>​        “&amp;_to_and”: {<br>​          “type”: “mapping”,<br>​          “mappings”: [“&amp;=&gt; and”]<br>​        }<br>​      },<br>​      “filter”: {<br>​        “my_stopwords”: {<br>​          “type”: “stop”,<br>​          “stopwords”: [“the”, “a”]<br>​        }<br>​      },<br>​      “analyzer”: {<br>​        “my_analyzer”: {<br>​          “type”: “custom”,<br>​          “char_filter”: [“html_strip”, “&amp;_to_and”],<br>​          “tokenizer”: “standard”,<br>​          “filter”: [“lowercase”, “my_stopwords”]<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><p>GET /my_index/_analyze<br>{<br>  “text”: “tom&amp;jerry are a friend in the house, <a>, HAHA!!”,<br>  “analyzer”: “my_analyzer”<br>}</p><p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “content”: {<br>​      “type”: “text”,<br>​      “analyzer”: “my_analyzer”<br>​    }<br>  }<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-23-创建、修改以及删除索引</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-23-%E5%88%9B%E5%BB%BA%E3%80%81%E4%BF%AE%E6%94%B9%E4%BB%A5%E5%8F%8A%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95/ck918e9te002gogta786p7jsr/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-23-%E5%88%9B%E5%BB%BA%E3%80%81%E4%BF%AE%E6%94%B9%E4%BB%A5%E5%8F%8A%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95/ck918e9te002gogta786p7jsr/</id>
    <published>2020-04-15T10:32:04.261Z</published>
    <updated>2020-03-07T15:11:51.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="创建、修改以及删除索引"><a href="#创建、修改以及删除索引" class="headerlink" title="创建、修改以及删除索引"></a>创建、修改以及删除索引</h4><h5 id="1、创建索引"><a href="#1、创建索引" class="headerlink" title="1、创建索引"></a>1、创建索引</h5><p>创建索引的语法</p><p>PUT /my_index<br>{<br>​    “settings”: { … any settings … },<br>​    “mappings”: {<br>​        “type_one”: { … any mappings … },<br>​        “type_two”: { … any mappings … },<br>​        …<br>​    }<br>}</p><p>创建索引的示例</p><p>PUT /my_index<br>{<br>  “settings”: {<br>​    “number_of_shards”: 1,<br>​    “number_of_replicas”: 0<br>  },<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {<br>​        “my_field”: {<br>​          “type”: “text”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p><h5 id="2、修改索引"><a href="#2、修改索引" class="headerlink" title="2、修改索引"></a>2、修改索引</h5><p>PUT /my_index/_settings<br>{<br>​    “number_of_replicas”: 1<br>}</p><h5 id="3、删除索引"><a href="#3、删除索引" class="headerlink" title="3、删除索引"></a>3、删除索引</h5><p>DELETE /my_index<br>DELETE /index_one,index_two<br>DELETE /index_*<br>DELETE /_all</p><p>可以在elasticsearch.yml中配置<br>action.destructive_requires_name: true  </p><p>禁用DELETE /_all 操作,只能指定操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-22-scoll滚动搜索</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-22-scoll%E6%BB%9A%E5%8A%A8%E6%90%9C%E7%B4%A2/ck918e9td002eogta4ne55o81/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-22-scoll%E6%BB%9A%E5%8A%A8%E6%90%9C%E7%B4%A2/ck918e9td002eogta4ne55o81/</id>
    <published>2020-04-15T10:32:04.257Z</published>
    <updated>2020-03-07T15:05:02.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="scoll滚动搜索"><a href="#scoll滚动搜索" class="headerlink" title="scoll滚动搜索"></a>scoll滚动搜索</h4><p>eg : 如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scoll滚动查询，一批一批的查，直到所有数据都查询完处理完</p><p>使用scoll滚动搜索，可以先搜索一批数据，然后下次再搜索一批数据，以此类推，直到搜索出全部的数据来<br>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的<br>采用基于_doc进行排序的方式，性能较高<br>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了</p><p>GET /test_index/test_type/_search?scroll=1m<br>{<br>  “query”: {<br>​    “match_all”: {}<br>  },<br>  “sort”: [ “_doc” ],<br>  “size”: 3<br>}</p><p>结果示例:</p><p>{<br>  “_scroll_id”: “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACxeFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAALF8WNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAACxhFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYhY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”,<br>  “took”: 5,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 10,<br>​    “max_score”: null,<br>​    “hits”: [<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “8”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “6”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_field”: “tes test”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “AVp4RN0bhjxldOOnBxaE”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_content”: “my test”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      }<br>​    ]<br>  }<br>}</p><p>获得的结果会有一个scoll_id，下一次再发送scoll请求的时候，必须带上上一个的scoll_id</p><p>GET /_search/scroll<br>{<br>​    “scroll”: “1m”,<br>​    “scroll_id” : “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACxeFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAALF8WNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAACxhFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYhY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”<br>}</p><p>11,4,7<br>3,2,1<br>20</p><p>scoll，看起来挺像分页的，但是其实使用场景不一样。分页主要是用来一页一页搜索，给用户看的；scoll主要是用来一批一批检索数据，让系统进行处理的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-21-bouncing results问题解决方案</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-21-bouncing%20results%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ck918e9td002fogta4c195d66/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-21-bouncing%20results%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ck918e9td002fogta4c195d66/</id>
    <published>2020-04-15T10:32:04.253Z</published>
    <updated>2020-03-07T15:02:02.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="bouncing-results问题解决方案"><a href="#bouncing-results问题解决方案" class="headerlink" title="bouncing results问题解决方案"></a>bouncing results问题解决方案</h4><h5 id="1、preference"><a href="#1、preference" class="headerlink" title="1、preference"></a>1、preference</h5><p>决定了哪些shard会被用来执行搜索操作</p><p>_primary, _primary_first, _local, _only_node:xyz, _prefer_node:xyz, _shards:2,3</p><p>bouncing results问题，两个document排序，field值相同；不同的shard上，可能排序不同；每次请求轮询打到不同的replica shard上；每次页面上看到的搜索结果的排序都不一样。这就是bouncing result，也就是跳跃的结果。</p><p>搜索的时候，是轮询将搜索请求发送到每一个replica shard（primary shard），但是在不同的shard上，可能document的排序不同</p><p>解决方案就是将preference设置为一个字符串，比如说user_id，让每个user每次搜索的时候，都使用同一个replica shard去执行，就不会看到bouncing results了</p><h5 id="2、timeout-主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长"><a href="#2、timeout-主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长" class="headerlink" title="2、timeout:  主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长"></a>2、timeout:  主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长</h5><h5 id="3、routing，document文档路由，-id路由，routing-user-id，这样的话可以让同一个user对应的数据到一个shard上去"><a href="#3、routing，document文档路由，-id路由，routing-user-id，这样的话可以让同一个user对应的数据到一个shard上去" class="headerlink" title="3、routing，document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去"></a>3、routing，document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去</h5><h5 id="4、search-type"><a href="#4、search-type" class="headerlink" title="4、search_type"></a>4、search_type</h5><p>default：query_then_fetch<br>dfs_query_then_fetch，可以提升revelance sort精准度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-20-分布式搜索引擎内核解密之fetch phase</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-20-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%86%85%E6%A0%B8%E8%A7%A3%E5%AF%86%E4%B9%8Bfetch%20phase/ck918e9tc002cogtaa4ju7301/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-20-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%86%85%E6%A0%B8%E8%A7%A3%E5%AF%86%E4%B9%8Bfetch%20phase/ck918e9tc002cogtaa4ju7301/</id>
    <published>2020-04-15T10:32:04.249Z</published>
    <updated>2020-03-04T14:24:35.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="分布式搜索引擎内核解密之fetch-phase"><a href="#分布式搜索引擎内核解密之fetch-phase" class="headerlink" title="分布式搜索引擎内核解密之fetch phase"></a>分布式搜索引擎内核解密之fetch phase</h4><h5 id="1、fetch-phbase工作流程"><a href="#1、fetch-phbase工作流程" class="headerlink" title="1、fetch phbase工作流程"></a>1、fetch phbase工作流程</h5><p>（1）coordinate node构建完priority queue之后，就发送mget请求去所有shard上获取对应的document<br>（2）各个shard将document返回给coordinate node<br>（3）coordinate node将合并后的document结果返回给client客户端</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/_zKICQtJ0iI.png" alt=""></p><h5 id="2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score-相关度分数-排序"><a href="#2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score-相关度分数-排序" class="headerlink" title="2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score(相关度分数)排序"></a>2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score(相关度分数)排序</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-19-分布式搜索引擎内核解密之query phase</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-19-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%86%85%E6%A0%B8%E8%A7%A3%E5%AF%86%E4%B9%8Bquery%20phase/ck918e9tc002dogtaa8m63199/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-19-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%86%85%E6%A0%B8%E8%A7%A3%E5%AF%86%E4%B9%8Bquery%20phase/ck918e9tc002dogtaa8m63199/</id>
    <published>2020-04-15T10:32:04.247Z</published>
    <updated>2020-03-04T14:16:22.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="分布式搜索引擎内核解密之query-phase"><a href="#分布式搜索引擎内核解密之query-phase" class="headerlink" title="分布式搜索引擎内核解密之query phase"></a>分布式搜索引擎内核解密之query phase</h5><h6 id="1、query-phase"><a href="#1、query-phase" class="headerlink" title="1、query phase"></a>1、query phase</h6><p>（1）搜索请求发送到某一个coordinate node，构构建一个priority queue(优先队列)，长度以paging操作from和size为准，默认为10<br>（2）coordinate node将请求转发到所有shard，每个shard本地搜索，并构建一个本地的priority queue<br>（3）各个shard将自己的priority queue返回给coordinate node，并构建一个全局的priority queue</p><h6 id="2、replica-shard如何提升搜索吞吐量"><a href="#2、replica-shard如何提升搜索吞吐量" class="headerlink" title="2、replica shard如何提升搜索吞吐量"></a>2、replica shard如何提升搜索吞吐量</h6><p>一次请求要打到所有shard的一个replica/primary  shard 上去，如果每个shard都有多个replica，那么同时并发过来的搜索请求可以同时打到其他的replica上去</p><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/OxDk3eRjCvc.png" alt="query phase"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-18-内核级知识点之doc value 简介</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-18-%E5%86%85%E6%A0%B8%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Bdoc%20value%20%E7%AE%80%E4%BB%8B/ck918e9tb002bogtaf1v6532d/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-18-%E5%86%85%E6%A0%B8%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Bdoc%20value%20%E7%AE%80%E4%BB%8B/ck918e9tb002bogtaf1v6532d/</id>
    <published>2020-04-15T10:32:04.243Z</published>
    <updated>2020-03-04T13:49:33.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="内核级知识点之doc-value-简介"><a href="#内核级知识点之doc-value-简介" class="headerlink" title="内核级知识点之doc value 简介"></a>内核级知识点之doc value 简介</h4><h5 id="1-doc-values-简介"><a href="#1-doc-values-简介" class="headerlink" title="1. doc values 简介"></a>1. doc values 简介</h5><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values</p><p>在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用</p><p>doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上</p><h6 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例:"></a>1.示例:</h6><p>doc1: hello world you and me<br>doc2: hi, world, how are you</p><table><thead><tr><th>word</th><th>doc 1</th><th>doc 2</th></tr></thead><tbody><tr><td>hello</td><td>*</td><td></td></tr><tr><td>world</td><td>*</td><td>*</td></tr><tr><td>you</td><td>*</td><td>*</td></tr><tr><td>and</td><td>*</td><td></td></tr><tr><td>me</td><td>*</td><td></td></tr><tr><td>hi</td><td></td><td>*</td></tr><tr><td>how</td><td></td><td>*</td></tr><tr><td>are</td><td></td><td>*</td></tr></tbody></table><p>会将以上语句,进行分词标称倒排索引</p><p>hello you –&gt; hello, you</p><p>hello –&gt; doc1<br>you –&gt; doc1,doc2</p><h6 id="2-示例-正排索引"><a href="#2-示例-正排索引" class="headerlink" title="2.示例 正排索引"></a>2.示例 正排索引</h6><p>doc1: hello world you and me<br>doc2: hi, world, how are you</p><p>sort by age</p><p>doc1: { “name”: “jack”, “age”: 27 }<br>doc2: { “name”: “tom”, “age”: 30 }</p><table><thead><tr><th>document</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>doc1</td><td>jack</td><td>27</td></tr><tr><td>doc2</td><td>tom</td><td>30</td></tr></tbody></table><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-02-17-相关度评分TF&amp;IDF算法</title>
    <link href="http://blog.collmall.com/2020/04/15/2020-02-17-%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86TF&amp;IDF%E7%AE%97%E6%B3%95/ck918e9tr002vogtahatcak5x/"/>
    <id>http://blog.collmall.com/2020/04/15/2020-02-17-%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86TF&amp;IDF%E7%AE%97%E6%B3%95/ck918e9tr002vogtahatcak5x/</id>
    <published>2020-04-15T10:32:04.241Z</published>
    <updated>2020-02-28T15:01:39.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="相关度评分TF-amp-IDF算法"><a href="#相关度评分TF-amp-IDF算法" class="headerlink" title="相关度评分TF&amp;IDF算法"></a>相关度评分TF&amp;IDF算法</h5><h6 id="1、算法介绍"><a href="#1、算法介绍" class="headerlink" title="1、算法介绍"></a>1、算法介绍</h6><p>relevance score算法: 简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度</p><p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法</p><p>Term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</p><p>eg: 搜索请求：hello world</p><p>doc1：hello you, and world is very good<br>doc2：hello, how are you</p><p>Inverse document frequency：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关</p><p>eg: 搜索请求：hello world</p><p>doc1：hello, today is very good<br>doc2：hi world, how are you</p><p>比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次；world这个单词在所有的document中，一共出现了100次</p><p>doc2更相关</p><p>Field-length norm：field长度，field越长，相关度越弱</p><p>eg : 搜索请求：hello world</p><p>doc1：{ “title”: “hello article”, “content”: “babaaba 1万个单词” }<br>doc2：{ “title”: “my article”, “content”: “blablabala 1万个单词，hi world” }</p><p>hello world在整个index中出现的次数是一样多的</p><p>doc1更相关，title field更短</p><h6 id="2、-score是如何被计算出来的"><a href="#2、-score是如何被计算出来的" class="headerlink" title="2、_score是如何被计算出来的"></a>2、_score是如何被计算出来的</h6><p>GET /test_index/test_type/_search?explain<br>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test hello”<br>​    }<br>  }<br>}</p><p>{<br>  “took”: 6,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 4,<br>​    “max_score”: 1.595089,<br>​    “hits”: [<br>​      {<br>​        “_shard”: “[test_index][2]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “20”,<br>​        “_score”: 1.595089,<br>​        “_source”: {<br>​          “test_field”: “test hello”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 1.595089,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 1.595089,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.58279467,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.58279467,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                },<br>​                {<br>​                  “value”: 1.0122943,<br>​                  “description”: “weight(test_field:hello in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1.0122943,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 1.2039728,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][2]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “6”,<br>​        “_score”: 0.58279467,<br>​        “_source”: {<br>​          “test_field”: “tes test”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.58279467,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.58279467,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.58279467,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.58279467,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][3]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “7”,<br>​        “_score”: 0.5565415,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.5565415,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.5565415,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.5565415,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.5565415,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.8029196,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.5,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “_type:test_type, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][1]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “8”,<br>​        “_score”: 0.25316024,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.25316024,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.25316024,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.25316024,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.25316024,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.2876821,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.88,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 3,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      }<br>​    ]<br>  }<br>}</p><h6 id="3、分析一个document是如何被匹配上的"><a href="#3、分析一个document是如何被匹配上的" class="headerlink" title="3、分析一个document是如何被匹配上的"></a>3、分析一个document是如何被匹配上的</h6><p>GET /test_index/test_type/6/_explain<br>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test hello”<br>​    }<br>  }<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
