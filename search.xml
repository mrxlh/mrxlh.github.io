<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 代码回滚</title>
    <url>/2017/ck91i43l10000ssta2n151u54/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>并不适合阅读的个人文档。</p>
</blockquote>
<h1 id="git-revert-和-git-reset-的区别"><a href="#git-revert-和-git-reset-的区别" class="headerlink" title="git revert 和 git reset 的区别"></a><strong>git revert</strong> 和 <strong>git reset</strong> 的区别</h1><p> 先看图：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg" alt=""></p>
<p><strong>sourceTree</strong> 中 <strong>revert</strong> 译为<strong><code>提交回滚</code></strong>，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。</p>
<p><strong>reset</strong> 为 <strong>重置到这次提交</strong>，将内容重置到指定的版本。<code>git reset</code> 命令后面是需要加2种参数的：<code>–-hard</code> 和 <code>–-soft</code>。这条命令默认情况下是 <code>-–soft</code>。</p>
<p>执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用<code>git status</code> 命令可以在缓冲区中看到这些修改。而如果加上<code>-–hard</code>参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 <code>git push origin HEAD --force</code> 强制将分区内容推送到远程服务器。</p>
<h4 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h4><p>默认参数 <code>-soft</code>,所有commit的修改都会退回到git缓冲区<br>参数<code>--hard</code>，所有commit的修改直接丢弃</p>
<pre><code>$ git reset --hard HEAD^         回退到上个版本
$ git reset --hard commit_id    退到/进到 指定commit_id</code></pre><p>推送到远程    </p>
<pre><code>$ git push origin HEAD --force</code></pre><p>​    </p>
<h4 id="可以吃的后悔药-gt-版本穿梭"><a href="#可以吃的后悔药-gt-版本穿梭" class="headerlink" title="可以吃的后悔药-&gt;版本穿梭"></a>可以吃的后悔药-&gt;版本穿梭</h4><p>当你回滚之后，又后悔了，想恢复到新的版本怎么办？</p>
<p>用<code>git reflog</code>打印你记录你的每一次操作记录</p>
<pre><code>$ git reflog

输出：
c7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687
470e9c2 HEAD@{1}: reset: moving to 470e9c2
b45959e HEAD@{2}: revert: Revert &quot;add img&quot;
470e9c2 HEAD@{3}: reset: moving to 470e9c2
2c26183 HEAD@{4}: reset: moving to 2c26183
0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;</code></pre><p>找到你操作的id如：<code>b45959e</code>，就可以回退到这个版本<br>​<br>    $ git reset –hard b45959e</p>
]]></content>
      <tags>
        <tag>终端</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git指令整理</title>
    <url>/2017/ck91i43l80002sstahiwz1rmi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>随便整理的一些自用的Git指令</p>
</blockquote>
<h1 id="GitHub创建仓库提示代码"><a href="#GitHub创建仓库提示代码" class="headerlink" title="GitHub创建仓库提示代码"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin git@github.com:qiubaiying/项目名.git
git push -u origin master</code></pre><p>若仓库存在直接push</p>
<pre><code>git remote add origin git@github.com:qiubaiying/test.git
git push -u origin master</code></pre><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h4 id="创建仓库（初始化）"><a href="#创建仓库（初始化）" class="headerlink" title="创建仓库（初始化）"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建
git init

新建一个仓库目录
git init [project-name]

克隆一个远程项目
git clone [url]</code></pre><h4 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件
 git add .

添加名称指定文件
git add text.txt</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code>设置提交代码时的用户信息
git config [--global] user.name &quot;[name]&quot;
git config [--global] user.email &quot;[email address]&quot;</code></pre><p>​    </p>
<h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><pre><code>提交暂存区到仓库区
git commit -m &quot;msg&quot;

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all</code></pre><p>​    </p>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]</code></pre><h4 id="标签Tags"><a href="#标签Tags" class="headerlink" title="标签Tags"></a>标签Tags</h4><pre><code>添加标签 在当前commit
git tag -a v1.0 -m &apos;xxx&apos; 

添加标签 在指定commit
git tag v1.0 [commit]

查看
git tag

删除
git tag -d V1.0

删除远程tag
git push origin :refs/tags/[tagName]

推送
git push origin --tags

拉取
git fetch origin tag V1.0

新建一个分支，指向某个tag
git checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code># 生成一个可供发布的压缩包
$ git archives</code></pre>]]></content>
      <tags>
        <tag>终端</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-02-27-idea下的配置springboot的热加载</title>
    <url>/2020/ck91i43lc0005ssta428iguv5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="idea下配置springboot热加载"><a href="#idea下配置springboot热加载" class="headerlink" title="idea下配置springboot热加载"></a>idea下配置springboot热加载</h2><h4 id="1-添加pom依赖"><a href="#1-添加pom依赖" class="headerlink" title="1.添加pom依赖"></a>1.添加pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot自带热加载开发工具 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2. 添加配置"></a>2. 添加配置</h4><p>打开 File –&gt; Settings –&gt; Build-Execution-Deployment –&gt; Compiler<code>，将</code>Build project automatically.勾上。</p>
<p><img src="../img/post-idea-setting-1.png" alt="post-idea-setting-1"></p>
<h4 id="3"><a href="#3" class="headerlink" title="3 ."></a>3 .</h4><p>快捷键 ctrl + alt + shift + / 打开 Maintenance 找到 <code>Registry...</code>，将 其中的 <code>compiler.automake.allow.when.app.running</code>勾上。</p>
<p><img src="../img/post-idea-setting-2.png" alt="post-idea-setting-2"></p>
<p><img src="../img/post-idea-setting-3.png" alt="post-idea-setting-3"></p>
]]></content>
  </entry>
  <entry>
    <title>使用 .gitignore 忽略 Git 仓库中的文件</title>
    <url>/2017/ck91i43ld0007sstadkaz5hfi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>使用 <code>.gitignore</code> 文件忽略指定文件</p>
</blockquote>
<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的<code>.DS_Store</code>文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用<code>.gitignore</code>就能够在Git提交时自动忽略掉这些文件。</p>
<h2 id="忽略的格式"><a href="#忽略的格式" class="headerlink" title="忽略的格式"></a>忽略的格式</h2><ul>
<li><code>#</code> :此为注释 – 将被 Git 忽略</li>
<li><code>*.a</code> :忽略所有 <code>.a</code> 结尾的文件</li>
<li><code>!lib.a</code> : 不忽略 <code>lib.a</code> 文件</li>
<li><code>/TODO</code> :仅仅忽略项目根目录下的 <code>TODO</code> 文件,不包括 <code>subdir/TODO</code></li>
<li><code>build/</code> : 忽略 <code>build/</code> 目录下的所有文件</li>
<li><code>doc/*.txt</code> : 会忽略 <code>doc/notes.txt</code> 但不包括 <code>doc/server/arch.txt</code></li>
</ul>
<h2 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h2><h4 id="从-github-上获取"><a href="#从-github-上获取" class="headerlink" title="从 github 上获取"></a>从 <a href="https://github.com/github/gitignore.git" target="_blank" rel="noopener">github</a> 上获取</h4><p>github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取</p>
<pre><code>https://github.com/github/gitignore.git</code></pre><p>与 Xcode 相关的三个文件</p>
<ul>
<li>Xcode.gitignore</li>
<li>Objective-C.gitignore</li>
<li>Swift.gitignore</li>
</ul>
<p><code>Xcode.gitignore</code>忽略 <code>Xcode</code> 配置信息，如操作记录，默认打开窗口等</p>
<p>其他两个在 <code>Xcode.gitignore</code> 基础上针对不同的语言进行忽略</p>
<p>将这些文件重写命名为 <code>.gittignore</code></p>
<pre><code>$ mv Swift.gitignore .gittignore</code></pre><h4 id="通过-gitignore-io-创建（推荐）"><a href="#通过-gitignore-io-创建（推荐）" class="headerlink" title="通过 gitignore.io 创建（推荐）"></a>通过 <a href="https://www.gitignore.io/" target="_blank" rel="noopener">gitignore.io</a> 创建（推荐）</h4><h6 id="先自定义终端命令："><a href="#先自定义终端命令：" class="headerlink" title="先自定义终端命令："></a>先自定义终端命令：</h6><p>macOS下默认是<code>\#!/bin/bash</code>：</p>
<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile</code></pre><p>如果是 <code>#!/bin/zsh</code></p>
<pre><code>$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code></pre><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>在当前终端目录下</p>
<pre><code>$ gi swift &gt; .gitignore</code></pre><p>就会针对 Swifit 类型的工程创建 <code>.gitignore</code> 文件。</p>
]]></content>
      <tags>
        <tag>终端</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-09-20-Typora For Markdown 语法</title>
    <url>/2020/ck91i43le0008ssta721sg9ox/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#Typora For Markdown 语法</p>
<p>[TOC]</p>
<p>###数学表达式</p>
<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹Tex命令，例如：<code>$lim_{x \to \infty} \ exp(-x)=0$</code>将产生如下的数学表达式：</p>
<p>$\lim_{x \to \infty} \exp(-x)=0$</p>
<p>###下标</p>
<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生H<del>2</del>O, 即水的分子式。</p>
<p>###上标</p>
<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式y^2^ = 4</p>
<p>###插入表情:happy:</p>
<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用HTML的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>使用`包裹的内容将会以代码样式显示，例如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用&#96;printf()&#96;</span><br></pre></td></tr></table></figure>

<p>则会产生<code>printf()</code>样式。</p>
<ul>
<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>
</li>
<li><pre><code>​```java
public Class HelloWorld{
  System.out.println(&quot;Hello World!&quot;);
}
​```
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">将会产生</span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line">public Class HelloWorld&#123;</span><br><span class="line">  System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### 强调

使用两个*号或者两个_包裹的内容将会被强调。例如

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__</span><br></pre></td></tr></table></figure>

将会输出

**使用两个*号强调内容**
__使用两个下划线强调内容__
Typroa 推荐使用两个*号。

### 斜体

在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\*</span><br></pre></td></tr></table></figure>

### 插入图片

我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。

![drag and drop image](http://typora.io/img/drag-img.gif)

​

​
</code></pre></li>
</ul>
<h3 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h3><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a>.</p>
<p>如果是标准的url，则会自动产生连接，例如:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p>
<h3 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>
<hr>
<h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></table></figure>

<p>将产生：</p>
<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>
<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|姓名|性别|毕业学校|工资|</span><br><span class="line">|:---|:---:|:---:|---:|</span><br><span class="line">|杨洋|男|重庆交通大学|3200|</span><br><span class="line">|峰哥|男|贵州大学|5000|</span><br><span class="line">|坑货|女|北京大学|2000|</span><br></pre></td></tr></table></figure>

<p>将产生:</p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="center">性别</th>
<th align="center">毕业学校</th>
<th align="right">工资</th>
</tr>
</thead>
<tbody><tr>
<td align="left">杨洋</td>
<td align="center">男</td>
<td align="center">重庆交通大学</td>
<td align="right">3200</td>
</tr>
<tr>
<td align="left">峰哥</td>
<td align="center">男</td>
<td align="center">贵州大学</td>
<td align="right">5000</td>
</tr>
<tr>
<td align="left">坑货</td>
<td align="center">女</td>
<td align="center">北京大学</td>
<td align="right">2000</td>
</tr>
<tr>
<td align="left">其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<h3 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$</span><br></pre></td></tr></table></figure>

<p>将会产生:</p>
<p> $$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$</p>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [ ] 逛街</span><br><span class="line">- [ ] 看电影</span><br><span class="line">- [ ] 约泡</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked="" disabled="" type="checkbox"> <p>吃饭</p>
<pre><code>​</code></pre></li>
<li><input checked="" disabled="" type="checkbox"> <p>逛街</p>
<pre><code>​</code></pre></li>
<li><input checked="" disabled="" type="checkbox"> <p>看电影</p>
<pre><code>​</code></pre></li>
<li><input checked="" disabled="" type="checkbox"> <p>约泡</p>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**无序的列表**</span><br><span class="line">* tfboys</span><br><span class="line">* 杨洋</span><br><span class="line">* 我爱你</span><br></pre></td></tr></table></figure>

<p><strong>无序的列表</strong></p>
<ul>
<li>tfboys</li>
<li>杨洋</li>
<li>我爱你</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**有序的列表**</span><br><span class="line">1. 苹果</span><br><span class="line">6. 香蕉</span><br><span class="line">10. 我都不喜欢</span><br></pre></td></tr></table></figure>

<p><strong>有序的列表</strong></p>
<ol>
<li>苹果</li>
<li>香蕉</li>
<li>我都不喜欢</li>
</ol>
<h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是一个块引用！</span><br></pre></td></tr></table></figure>

<p>将产生：</p>
<blockquote>
<p>这是一个块引用！</p>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p>
]]></content>
  </entry>
  <entry>
    <title>为博客添加 Gitalk 评论插件</title>
    <url>/2017/ck91i43lg000assta5j7pdfna/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于 <strong>Disqus</strong> 对于国内网路的支持十分糟糕，很多人反映 Disqus 评论插件一直加载不出来。而我一直是处于翻墙状态的~（话说你们做程序员的都不翻墙用Google的吗😅，哈哈，吐嘈下）</p>
<p>针对这个问题，我添加了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a> 评论插件。在此，非常感谢 <a href="https://github.com/FeDemo" target="_blank" rel="noopener">@FeDemo</a> 的推荐 。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Gitalk-评论插件"><a href="#Gitalk-评论插件" class="headerlink" title="Gitalk 评论插件"></a>Gitalk 评论插件</h3><p>首先来看看 Gitalk 的界面和功能：</p>
<p><a href="https://gitalk.github.io/" target="_blank" rel="noopener"><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm4u3j0lmj30nk0kl40i.jpg" alt=""></a></p>
<p>gitalk 使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 <code>MarkDown语法</code>。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 Gitalk 之前还有一个 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a> 插件也是基于这个原理开发的,不过 gitment 已经很久没人维护了。</p>
<p>可以看到在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm5916av1j30i209rab7.jpg" alt="gitalk评论框"></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm596ggkfj30mx0gfjuk.jpg" alt="Github issue"></p>
<h3 id="集成-Gitalk"><a href="#集成-Gitalk" class="headerlink" title="集成 Gitalk"></a>集成 Gitalk</h3><p>到这里，你应该对 Gitalk 有个大致的了解了，现在，开始集成 gitalk 插件吧。</p>
<p>将这段代码插入到你的网站：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- Gitalk 评论 start  --&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> site.gitalk.enable %&#125;</span><br><span class="line">&lt;!-- Link Gitalk 的支持文件  --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/gitalk@latest/dist/gitalk.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="gitalk-container"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gitalk的主要参数</span></span><br><span class="line">		clientID: <span class="string">`Github Application clientID`</span>,</span><br><span class="line">		clientSecret: <span class="string">`Github Application clientSecret`</span>,</span><br><span class="line">		repo: <span class="string">`存储你评论 issue 的 Github 仓库名`</span>,</span><br><span class="line">		owner: <span class="string">'Github 用户名'</span>,</span><br><span class="line">		admin: [<span class="string">'Github 用户名'</span>],</span><br><span class="line">		id: <span class="string">'页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签'</span>,</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">    gitalk.render(<span class="string">'gitalk-container'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&lt;!-- Gitalk end --&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们需要关心的就是配置下面几个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clientID: <span class="string">`Github Application clientID`</span>,</span><br><span class="line">clientSecret: <span class="string">`Github Application clientSecret`</span>,</span><br><span class="line">repo: <span class="string">`Github 仓库名`</span>,<span class="comment">//存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名）</span></span><br><span class="line">owner: <span class="string">'Github 用户名'</span>,</span><br><span class="line">admin: [<span class="string">'Github 用户名'</span>], <span class="comment">//这个仓库的管理员，可以有多个，用数组表示，一般写自己,</span></span><br><span class="line">id: <span class="string">'window.location.pathname'</span>, <span class="comment">//页面的唯一标识，gitalk 会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识</span></span><br></pre></td></tr></table></figure>
<p>当然，还有其他很多参数，有兴趣的话可以 <a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener"> 点这里</a>。</p>
<p>比如我就增加了这个全屏遮罩的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distractionFreeMode: true,</span><br></pre></td></tr></table></figure>

<h3 id="创建-Github-Application"><a href="#创建-Github-Application" class="headerlink" title="创建 Github Application"></a>创建 Github Application</h3><p>Gitalk 需要一个 <strong>Github Application</strong>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a>。</p>
<p>填写下面参数：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jaib6fj30jo0gaacs.jpg" alt=""></p>
<p>点击创建</p>
<p>获取 <code>Client ID</code> 和 <code>Client Secret</code> 填入你的我们 Gitalk 参数中</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jrzff6j30lc0budhp.jpg" alt=""></p>
<p>当你参数都设置好，将代码推送到 Github 仓库后，没什么问题的话，当你点击进入你的博客页面后就会出现评论框了。</p>
<p>当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 <code>repo</code> 的仓库下创建对应 issue。</p>
<p>比如说这样：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmm867n88cj30l809mjse.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm8a0i0jkj30rr0ct42t.jpg" alt=""></p>
<p>当然，你也可以手动创建issue作为 gitalk评论容器。只要有 <code>Gitalk</code> 标签 和 <code>id</code> 对应标签就可以。比我我自己创建的 <a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/38" target="_blank" rel="noopener">About issue</a> 。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后说几句吐嘈几句， Gitalk 需要你点开每篇文章的页面才会创建对应的 issue,对我来说真是个糟糕的体验（文章有点多~）。</p>
<p>当然，也有解决办法，这篇 <a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a>，就解决了这个问题。</p>
<p>最后，<a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">给个 star 吧</a>~</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>在Github上创建项目的Issues</title>
    <url>/2019/ck91i43lh000bsstah0koekkm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="在Github上创建项目的Issues"><a href="#在Github上创建项目的Issues" class="headerlink" title="在Github上创建项目的Issues"></a>在Github上创建项目的Issues</h2><ol>
<li><p>选择一个项目</p>
<p><img src="https://img-blog.csdnimg.cn/20190315163526648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70%22%E8%BF%99%E6%98%AFCSDN%E7%9A%84%E5%9B%BE%E6%A0%87%22" alt="1"></p>
</li>
</ol>
<ol start="2">
<li><p>找到 Settings</p>
<p><img src="https://img-blog.csdnimg.cn/20190315163746580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70%22%E8%BF%99%E6%98%AFCSDN%E7%9A%84%E5%9B%BE%E6%A0%87%22" alt="2"></p>
</li>
</ol>
<ol start="3">
<li><p>可 设置 Set up templates  模板</p>
<p><img src="https://img-blog.csdnimg.cn/20190315164050446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70%22%E8%BF%99%E6%98%AFCSDN%E7%9A%84%E5%9B%BE%E6%A0%87%22" alt="1"></p>
<p>Add template 并 提交 Commit changes</p>
</li>
</ol>
<ol start="4">
<li><p>创建自己的第一个Issues<img src="https://img-blog.csdnimg.cn/201903151643358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70,%22%E8%BF%99%E6%98%AFCSDN%E7%9A%84%E5%9B%BE%E7%89%87%22" alt="1"></p>
<p><img src="https://img-blog.csdnimg.cn/2019031516450112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="1"></p>
</li>
</ol>
<pre><code>5. 提交Issues

   ![6](https://img-blog.csdnimg.cn/201903151646002.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70,&quot;这是CSDN的图片&quot;)</code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 入门</title>
    <url>/2019/ck91i43lj000dsstaa37375x1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch-入门"><a href="#Elasticsearch-入门" class="headerlink" title="Elasticsearch 入门"></a>Elasticsearch 入门</h2><h1 id="Elasticsearch的由来"><a href="#Elasticsearch的由来" class="headerlink" title="Elasticsearch的由来"></a>Elasticsearch的由来</h1><p>有个帅哥名字叫“Shay Banon”，对就是这位。这是他2013年在dotScale大会上分享Elasticsearch的照片。<a href="https://link.jianshu.com/?t=https://www.youtube.com/watch?v=fEsmydn747c" target="_blank" rel="noopener">youtube上的分享视频</a></p>
<p><img src="http://image.uczzd.cn/8622803757556180222.jpg" alt="img"></p>
<p><strong>Elasticsearch的诞生历史</strong></p>
<p>许多年前，一个叫Shay Banon的待业工程师跟随他的新婚妻子来到伦敦，他的妻子想在伦敦学习做一名厨师。而他在伦敦寻找工作的期间，接触到了Lucene的早期版本，他想为自己的妻子开发一个方便搜索菜谱的应用。</p>
<p>直接使用Lucene构建搜索会有很多的坑以及重复性的工作，所以Shay便在Lucene的基础上不断进行抽象来让Java程序嵌入搜索变得更容易一些，经过一段时间的打磨，就诞生了他的第一个开源作品，他给自己的这个作品起了个名字，叫 “Compass”，中文即“指南针”的意思。</p>
<p>之后，Shay找到了一份新工作，新工作是处在一个高性能分布式的开发环境中。他在工作中渐渐发现，越来越需要一个易用的高性能、实时、分布式搜索服务，于是他决定重写Compass，将它从一个库打造成了一个独立的server，并将其改名为Elasticsearch。</p>
<p>Elasticsearch发布的第一个版本是在2010年的二月份，从那之后，Elasticsearch便成了Github上最受人瞩目的项目之一，并且很快就有超过300名开发者加入进来贡献了自己的代码。后来Shay和另一位合伙人成立了公司专注打造Elasticsearch，他们对Elasticsearch进行了一些商业化的包装和支持。但是，Elasticsearch承诺，永远都将是开源并且免费的。</p>
<p>不过悲剧的是，Shay承诺为妻子开发的菜谱搜索应用，到现在还没做出来……</p>
<ol>
<li><p>什么是搜索</p>
<ol>
<li><p>全文搜索 : <a href="">http://www.baidu.com</a></p>
</li>
<li><p>垂直搜索:<a href="">https://www.taobao.com</a>  <a href="">http://www.laogou.com</a></p>
<p>搜索:输入要搜索的关键字,然后期望返回这个关键字的相关信息</p>
</li>
</ol>
</li>
<li><p>用数据库做搜索会怎样</p>
<table>
<thead>
<tr>
<th>商品ID</th>
<th>商品名称</th>
<th>商品描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>耐克袜子</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>阿迪达斯袜子</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>鸿星尔克袜子</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>三六一度袜子</td>
<td></td>
</tr>
</tbody></table>
<p>eg: select * from  products where  product_name %袜子%;</p>
<p>如果出现  袜XX子 这样的词语 是查询不到的</p>
<p>不能够将搜索词进行拆分 eg : 输入 唐人街案 , 就展示不出 唐人街探案3</p>
</li>
</ol>
<ol start="3">
<li><p>全文检索 说道这里 就不得不引入一个概念 倒排索引</p>
<p>1.正排索引:eg:书的目录 </p>
<table>
<thead>
<tr>
<th>id</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>紧急救援电影</td>
</tr>
<tr>
<td>2</td>
<td>紧急救援花絮</td>
</tr>
<tr>
<td>3</td>
<td>紧急救援海报</td>
</tr>
</tbody></table>
<p>2.倒排索引</p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>ids</th>
</tr>
</thead>
<tbody><tr>
<td>紧急</td>
<td>1,2,3</td>
</tr>
<tr>
<td>救援</td>
<td>1,2,3</td>
</tr>
<tr>
<td>电影</td>
<td>1</td>
</tr>
<tr>
<td>花絮</td>
<td>2</td>
</tr>
<tr>
<td>海报</td>
<td>3</td>
</tr>
</tbody></table>
<p>通过输入 [紧急援] 即可搜索到以上信息 1,2,3 ,上述的这个过程就是全文检索</p>
<ol start="3">
<li><p>Lucene</p>
<p>lucene，就是一个jar包，里面包含了封装好的各种建立倒排索引，以及进行搜索的代码，包括各种算法。我们就用java开发的时候，引入lucene jar，然后基于lucene的api进行去进行开发就可以了。用lucene，我们就可以去将已有的数据建立索引，lucene会在本地磁盘上面，给我们组织索引的数据结构。另外的话，我们也可以用lucene提供的一些功能和api来针对磁盘上的数据</p>
</li>
</ol>
<ol start="4">
<li><p>认识 Elasticsearch</p>
<ol start="4">
<li>认识 Elasticsearch<br>​<br>Lucene 是单机,如果机器超过其所能承载的数据量的时候,只有通过增加机器来进行存储,如果自己 做需要考虑数据的备份 数据间的通讯等 此时Elasticsearch 诞生,</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>5.总结：</p>
<p>Elasticsearch，分布式，高性能，高可用，可伸缩的搜索和分析系统</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch的功能、适用场景以及特点介绍</title>
    <url>/2019/ck91i43ll000gsstab0wl2puv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch的功能、适用场景以及特点介绍"><a href="#Elasticsearch的功能、适用场景以及特点介绍" class="headerlink" title="Elasticsearch的功能、适用场景以及特点介绍"></a>Elasticsearch的功能、适用场景以及特点介绍</h2><ol>
<li><p>Elasticsearch 功能</p>
<p>1&gt;.分布式的搜索引擎和数据分析引擎</p>
<p>​     搜索：百度， 网站的站内搜索</p>
<p>​     数据分析：eg: 冠寓，北京地区近7天出租率排名前10家的店铺有哪些?</p>
<p>2&gt;.全文检索，结构化检索，数据分析</p>
<p>​    全文检索: 搜索门店名称中包含‘北京’门店  select * from  projects  where project_name like “%北京%”；</p>
<p>​    结构化检索：搜索工单类型为报修的工单都有哪些，select * from work_order where type=’id’;</p>
<p>​    部分匹配、自动完成、搜索纠错、搜索推荐<br>​    数据分析：分析工单类型下有多少个工单数量，select  type,count(*) from wor_order group by type;</p>
<p>3&gt;.对海量数据进行近实时的处理</p>
<p>   分布式：ES自动可以将海量数据分散到多台服务器上去存储和检索</p>
<p>  海量数据的处理：分布式以后，可以采用大量的服务器去存储和检索数据，自然而然的就可以实现海量数据的处理</p>
<p>近实时：在秒级对数据进行搜索和分析</p>
<p>离线批处理（batch-processing）：比如 检索某个数据需要花费1小时</p>
</li>
<li><p>Elasticsearch 适用场景</p>
<p>1、2013年初，GitHub抛弃了Solr，采取ElasticSearch 来做PB级的搜索。 “GitHub使用ElasticSearch搜索20TB 的数据，包括13亿文件和1300亿行代码”</p>
<p>2、维基百科：启动以elasticsearch为基础的核心搜索架构</p>
<p>3、SoundCloud：“SoundCloud使用ElasticSearch为1.8亿用户提供即时而精准的音乐搜索服务”</p>
<p>4、百度：百度目前广泛使用ElasticSearch作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部20多个业务线（包括casio、云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大100台机器，200个ES节点，每天导入30TB+数据</p>
<p>5、新浪使用ES 分析处理32亿条实时日志</p>
<p>6、阿里使用ES 构建挖财自己的日志采集和分析体系</p>
<p>7 、日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</p>
<p>8、BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</p>
</li>
<li><p>Elasticsearch特点</p>
<p>1&gt;.可以作为一个大型分布式集群（数百台服务器）技术，处理PB级数据，服务大公司；也可以运行在单机上，服务小公司</p>
<p>2&gt;.Elasticsearch不是什么新技术，主要是将全文检索、数据分析以及分布式技术，合并在了一起，才形成了独一无二的ES；lucene（全文检索），商用的数据分析软件，分布式数据库（mycat）</p>
<p>3&gt;.对用户而言，是开箱即用的</p>
<p>4&gt;. 数据库的功能面对很多领域是不够用的（还有各种联机事务型的操作）；特殊的功能，比如全文检索，同义词处理，相关度排名，复杂数据分析，海量数据的近实时处理；Elasticsearch作为传统数据库的一个补充，提供了数据库所不不能提供的很多功能</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch 在Windows下的安装与启动</title>
    <url>/2019/ck91i43lm000jssta0dik6rvf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>elasticsearch 在Windows下的安装与启动</p>
<p>1、安装JDK，至少1.8.0_73以上版本，java -version</p>
<p>2、下载和解压缩Elasticsearch安装包，目录结构</p>
<p>​    官网下载地址：<a href="https://www.elastic.co/cn/downloads/" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/</a></p>
<p>​    中文社区下载地址： <a href="https://elasticsearch.cn/download/" target="_blank" rel="noopener">https://elasticsearch.cn/download/</a> </p>
<p>目录结构说明：</p>
<table>
<thead>
<tr>
<th>目录名称</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>可执行的文件 elasticsearch.bat 、elasticsearch 启动</td>
</tr>
<tr>
<td>config/elasticsearch.yml</td>
<td>es配置相关</td>
</tr>
<tr>
<td>config/jvm.options</td>
<td>jvm配置的相关参数</td>
</tr>
<tr>
<td>config/log4j2.properties</td>
<td>日志相关配置</td>
</tr>
<tr>
<td>data</td>
<td>存储数据相关</td>
</tr>
<tr>
<td>modules</td>
<td>模块相关</td>
</tr>
<tr>
<td>plugins</td>
<td>插件相关</td>
</tr>
</tbody></table>
<ol start="3">
<li><p>elasticsearch.yml 配置说明</p>
<p>cluster.name 集群名称，以此作为是否同一个集群的判断条件</p>
<p>node.name: 节点名称，以此作为集群中不同节点的区分条件</p>
<p>network.host:/http.port:  网络地址和端口，用于http 和transport服务使用；network.host:对外发布的网络地址; http.port: 对外提供API的端口</p>
<p>path.data: 数据存储地址</p>
<p>path.logs:日志存储地址</p>
</li>
<li><p>Elasticsearch的两种模式： Development 、Production 模式说明</p>
<p>以transport的地址是否绑定在localhost为判断标准 network.host</p>
<p>Development  模式下载启动时会议warning的方式提示配置检查异常</p>
<p>Production 模式下载启动时会以error的方式提示配置检查异常并退出</p>
<p>参数修改的第二种方式：</p>
<p>elasticsearch  -Ehttp.port=9200</p>
</li>
<li><p>解压并启动Elasticsearch：bin\elasticsearch.bat  从这里就是可以说是开箱即用</p>
</li>
<li><p>检查ES是否启动成功：<a href="http://localhost:9200/?pretty" target="_blank" rel="noopener">http://localhost:9200/?pretty</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"4onsTYV"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"nKZ9VK_vQdSQ1J0Dx9gx1Q"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"5.2.0"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"24e05b9"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2017-01-24T19:52:35.800Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"6.4.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>下载和解压缩Kibana安装包，使用里面的开发界面</p>
</li>
<li><p>启动Kibana kibana.bat  <a href="http://localhost:5801" target="_blank" rel="noopener">http://localhost:5801</a></p>
</li>
<li><p>进入Dev Tools界面</p>
</li>
<li><p>GET _cluster/health</p>
</li>
</ol>
</li>
</ol>
<p>​     </p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch的 6种搜索方式</title>
    <url>/2019/ck91i43ln000kssta62nydh5m/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch的-6种搜索方式"><a href="#Elasticsearch的-6种搜索方式" class="headerlink" title="Elasticsearch的 6种搜索方式"></a>Elasticsearch的 6种搜索方式</h2><p>1、query string search</p>
<p>​    搜索全部数据 GET /index/type/_search </p>
<p>​    eg: 1. 搜索全部商品：GET /ecommerce/product/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"jiajieshi yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"youxiao fangzhu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"jiajieshi producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"gaolujie producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span>,</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"zhonghua yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"caoben zhiwu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"zhonghua producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"qingxin"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>took：耗费了几毫秒<br>timed_out：是否超时，这里是没有<br>_shards：数据拆成了5个分片，所以对于搜索请求，会打到所有的primary shard（或者是它的某个replica shard也可以）<br>hits.total：查询结果的数量，3个document<br>hits.max_score：score的含义，就是document对于一个search的相关度的匹配分数，越相关，就越匹配，分数也高<br>hits.hits：包含了匹配搜索的document的详细数据</p>
<p>eg:搜索商品名称中包含yagao的商品，而且按照售价降序排序：GET /ecommerce/product/_search?q=name:yagao&amp;sort=price:desc</p>
<p>query string search的由来，因为search参数都是以http请求的query string来附带的</p>
<p>  适用于临时的在命令行使用一些工具，比如curl，快速的发出请求，来检索想要的信息；但是如果查询请求很复杂，是很难去构建的在生产环境中，几乎很少使用query string search</p>
<p>2、query DSL</p>
<p>DSL：Domain Specified Language，特定领域的语言<br>http request body：请求体，可以用json的格式来构建查询语法，比较方便，可以构建各种复杂的语法，比query string search肯定强大多了</p>
<p>eg: 查询所有的商品</p>
<p>GET /ecommerce/product/_search<br>{<br>  “query”: { “match_all”: {} }<br>}</p>
<p>eg: 查询名称包含yagao的商品，同时按照价格降序排序</p>
<p>GET /ecommerce/product/_search<br>{<br>​    “query” : {<br>​        “match” : {<br>​            “name” : “yagao”<br>​        }<br>​    },<br>​    “sort”: [<br>​        { “price”: “desc” }<br>​    ]<br>}</p>
<p>eg:分页查询商品，总共3条商品，假设每页就显示1条商品，现在显示第2页，所以就查出来第2个商品</p>
<p>GET /ecommerce/product/_search<br>{<br>  “query”: { “match_all”: {} },<br>  “from”: 1,<br>  “size”: 1<br>}</p>
<p>es 的第一页是从 0 开始的  即 from:0</p>
<p>from: 从第几页开始</p>
<p>size:显示多少条</p>
<p>eg: 指定要查询出来商品的名称和价格就可以</p>
<p>GET /ecommerce/product/_search<br>{<br>  “query”: { “match_all”: {} },<br>  “_source”: [“name”, “price”]<br>}</p>
<p>更加适合生产环境的使用，可以构建复杂的查询</p>
<p>3、query filter</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">搜索商品名称包含yagao，而且售价大于25元的商品</span><br><span class="line"></span><br><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"bool"</span> : &#123;</span><br><span class="line">            <span class="attr">"must"</span> : &#123;</span><br><span class="line">                <span class="attr">"match"</span> : &#123;</span><br><span class="line">                    <span class="attr">"name"</span> : <span class="string">"yagao"</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"filter"</span> : &#123;</span><br><span class="line">                <span class="attr">"range"</span> : &#123;</span><br><span class="line">                    <span class="attr">"price"</span> : &#123; <span class="attr">"gt"</span> : <span class="number">25</span> &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、full-text search （全文检索）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123;</span><br><span class="line">            <span class="attr">"producer"</span> : <span class="string">"yagao producer"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.70293105</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.70293105</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"special yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"special meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"special yagao producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25811607</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"gaolujie producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span>,</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25811607</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"zhonghua yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"caoben zhiwu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"zhonghua producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"qingxin"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.1805489</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"jiajieshi yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"youxiao fangzhu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"jiajieshi producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>倒排索引分析：</p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>id</th>
</tr>
</thead>
<tbody><tr>
<td>special</td>
<td>4</td>
</tr>
<tr>
<td>yagao</td>
<td>4</td>
</tr>
<tr>
<td>producer</td>
<td>1,2,3,4</td>
</tr>
<tr>
<td>gaolujie</td>
<td>1</td>
</tr>
<tr>
<td>zhognhua</td>
<td>3</td>
</tr>
<tr>
<td>jiajieshi</td>
<td>2</td>
</tr>
</tbody></table>
<p>因为 yagao  和 producer  匹配上两个 ：special yagao producer 最靠前，max_score 值最大</p>
<p>5、phrase search（短语搜索）</p>
<p>​        跟全文检索相对应，相反，全文检索会将输入的搜索串拆解开来，去倒排索引里面去一一匹配，只要能匹配上任意一个拆解后的单词，就可以作为结果返回<br>phrase search，要求输入的搜索串，必须在指定的字段文本中，完全包含一模一样的，才可以算匹配，才能作为结果返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span> : &#123;</span><br><span class="line">            <span class="attr">"producer"</span> : <span class="string">"yagao producer"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">返回结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.70293105</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.70293105</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"special yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"special meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"special yagao producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6、highlight search （高亮搜索结果）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123;</span><br><span class="line">            <span class="attr">"producer"</span> : <span class="string">"producer"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"producer"</span> : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch的核心概念</title>
    <url>/2019/ck91i43lp000nsstaah2p1g84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Elasticsearch的核心概念</p>
<p>1.lucene和elasticsearch的前世今生</p>
<p>​       lucene，最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂（实现一些简单的功能，写大量的java代码），需要深入理解原理（各种索引结构）</p>
<p>elasticsearch，基于lucene，隐藏复杂性，提供简单易用的restful api接口、java api接口（还有其他语言的api接口）<br>（1）分布式的文档存储引擎<br>（2）分布式的搜索引擎和分析引擎<br>（3）分布式，支持PB级数据</p>
<p>开箱即用，优秀的默认参数，不需要任何额外设置，完全开源</p>
<p>2、elasticsearch的核心概念</p>
<p>​      （1）Near Realtime（NRT）：近实时，两个意思，从写入数据到数据可以被搜索到有一个小延迟（大概1秒）；基于es执行搜索和分析可以达到秒级</p>
<p>​       （2）Cluster：集群，包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，对于中小型应用来说，刚开始一个集群就一个节点很正常</p>
<p>​        （3）Node：节点，集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群</p>
<p>​        （4）Document&amp;field：文档 用户存储在ES中的数据文档，es中的最小数据单元，一个document可以是一条客户数据，一条商品分类数据，一条订单数据，通常用JSON数据结构表示，每个index下的type中，都可以去存储多个document。一个document里面有多个field，每个field就是一个数据字段。</p>
<p>​      （5）Index：索引 由具有相同字段的文档列表组成，包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的document。比如说建立一个product index，商品索引，里面可能就存放了所有的商品数据，所有的商品document。</p>
<p>​       ES 6.0 之后 官方已经不允许在index中建多个type了，也就是说一个index 下面只有一个type ,且在未来的大版本中 会把type概念会去掉，所以在类比中 数据库中的 database 已经不合适，类比成mysql中的表就可以了</p>
<p>​       （6）Type：类型，每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field，比如博客系统，有一个索引，可以定义用户数据type，博客数据type，评论数据type。</p>
<p>​      （7）shard：单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。有了shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。每个shard都是一个lucene index。</p>
<p>​    （8）replica：任何一个服务器随时可能故障或宕机，此时shard可能就会丢失，因此可以为每个shard创建多个replica副本。replica可以在shard故障时提供备用服务，保证数据不丢失，多个replica还可以提升搜索操作的吞吐量和性能。primary shard（一般简称 shard ,建立索引时一次设置，不能修改，默认5个），replica shard（一般简称replica ,随时修改数量，默认1个），默认每个索引10个shard，5个primary shard，5个replica shard，最小的高可用配置，是2台服务器。</p>
<p>ES 5.X 的概念对比</p>
<table>
<thead>
<tr>
<th>关系型数据库（比如Mysql）</th>
<th>非关系型数据库（Elasticsearch）</th>
</tr>
</thead>
<tbody><tr>
<td>数据库Database</td>
<td>索引Index</td>
</tr>
<tr>
<td>表Table</td>
<td>类型Type</td>
</tr>
<tr>
<td>数据行Row</td>
<td>文档Document</td>
</tr>
<tr>
<td>数据列Column</td>
<td>字段Field</td>
</tr>
<tr>
<td>约束 Schema</td>
<td>映射Mapping</td>
</tr>
</tbody></table>
<p>ES 6.X 以后概念对比</p>
<table>
<thead>
<tr>
<th>关系型数据库（比如Mysql）</th>
<th>非关系型数据库（Elasticsearch）</th>
</tr>
</thead>
<tbody><tr>
<td>表Table</td>
<td>索引Index</td>
</tr>
<tr>
<td>数据行Row</td>
<td>文档Document</td>
</tr>
<tr>
<td>数据列Column</td>
<td>字段Field</td>
</tr>
<tr>
<td>约束 Schema</td>
<td>映射Mapping</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch基础的分部署架构</title>
    <url>/2019/ck91i43lq000pssta7sju73rj/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch基础的分部署架构"><a href="#Elasticsearch基础的分部署架构" class="headerlink" title="Elasticsearch基础的分部署架构"></a>Elasticsearch基础的分部署架构</h2><p>1、Elasticsearch对复杂分布式机制的透明隐藏特性</p>
<p>​        Elasticsearch是一套分布式的系统，分布式是为了应对大数据量<br>隐藏了复杂的分布式机制</p>
<p>分片机制（我们之前随随便便就将一些document插入到es集群中去了，我们有没有care过数据怎么进行分片的，数据到哪个shard中去）</p>
<p>cluster discovery（集群发现机制，我们之前在做那个集群status从yellow转green的实验里，直接启动了第二个es进程，那个进程作为一个node自动就发现了集群，并且加入了进去，还接受了部分数据，replica shard）</p>
<p>shard负载均衡（举例，假设现在有3个节点，总共有25个shard要分配到3个节点上去，es会自动进行均匀分配，以保持每个节点的均衡的读写负载请求）</p>
<p>shard副本，请求路由，集群扩容，shard重分配</p>
<p>2、Elasticsearch的垂直扩容与水平扩容</p>
<p>​     垂直扩容：采购更强大的服务器，成本非常高昂，而且会有瓶颈</p>
<p>​     水平扩容：业界经常采用的方案，采购越来越多的普通服务器，性能比较一般，但是很多普通服务器组织在一起，就能构成强大的计算和存储能力</p>
<p>扩容对应用程序的透明性</p>
<p>3、增减或减少节点时的数据rebalance</p>
<p>保持负载均衡</p>
<p>总有某些服务器的负载会重一些，承载的数据和请求量会大一些</p>
<p>4、master节点</p>
<p>master节点不承载所有的请求，所以不会有单点瓶颈</p>
<p>（1）创建或删除索引<br>（2）增加或删除节点</p>
<p>5、节点对等的分布式架构</p>
<p>（1）节点对等，每个节点都能接收所有的请求<br>（2）自动请求路由到有数据节点<br>（3）响应收集</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌套聚合，下钻分析，聚合分析</title>
    <url>/2019/ck91i43lr000usstaej7599i9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="嵌套聚合，下钻分析，聚合分析"><a href="#嵌套聚合，下钻分析，聚合分析" class="headerlink" title="嵌套聚合，下钻分析，聚合分析"></a>嵌套聚合，下钻分析，聚合分析</h2><ol>
<li>计算每个tag下的商品数量</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"group_by_tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123; <span class="attr">"field"</span>: <span class="string">"tags"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Fielddata is disabled on text fields by default. Set fielddata=true on [tags] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."</span></span><br><span class="line">      &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">将文本field的fielddata属性设置为true</span><br><span class="line"></span><br><span class="line">PUT /ecommerce/_mapping/product</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"all_tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123; <span class="attr">"field"</span>: <span class="string">"tags"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"group_by_tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"fangzhu"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"meibai"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"qingxin"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对名称中包含yagao的商品，计算每个tag下的商品数量</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"yagao"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"all_tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"tags"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>先分组，再算每组的平均值，计算每个tag下的商品的平均价格</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123;</span><br><span class="line">        <span class="attr">"group_by_tags"</span> : &#123;</span><br><span class="line">            <span class="attr">"terms"</span> : &#123; <span class="attr">"field"</span> : <span class="string">"tags"</span> &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span> : &#123;</span><br><span class="line">                <span class="comment">//取的名字</span></span><br><span class="line">                <span class="attr">"avg_price"</span> : &#123;</span><br><span class="line">                    <span class="attr">"avg"</span> : &#123; <span class="attr">"field"</span> : <span class="string">"price"</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"group_by_tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"fangzhu"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">27.5</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"meibai"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">40</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"qingxin"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">40</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>计算每个tag下的商品的平均价格，并且按照平均价格降序排序</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123;</span><br><span class="line">        <span class="attr">"all_tags"</span> : &#123;</span><br><span class="line">            <span class="attr">"terms"</span> : &#123; <span class="attr">"field"</span> : <span class="string">"tags"</span>, <span class="attr">"order"</span>: &#123; <span class="attr">"avg_price"</span>: <span class="string">"desc"</span> &#125; &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span> : &#123;</span><br><span class="line">                <span class="attr">"avg_price"</span> : &#123;</span><br><span class="line">                    <span class="attr">"avg"</span> : &#123; <span class="attr">"field"</span> : <span class="string">"price"</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="comment">//这是起的名字可以随便取名字， 最好还是要遵循见名知意原则</span></span><br><span class="line">    <span class="attr">"group_by_price"</span>: &#123;</span><br><span class="line">      <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"ranges"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">20</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">40</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">40</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">50</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"group_by_tags"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"tags"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">            <span class="attr">"average_price"</span>: &#123;</span><br><span class="line">              <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"price"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>2个node环境下replica shard是如何分配的</title>
    <url>/2019/ck91i43ls000vssta9mxyeahh/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2个node环境下replica-shard是如何分配的"><a href="#2个node环境下replica-shard是如何分配的" class="headerlink" title="2个node环境下replica shard是如何分配的"></a>2个node环境下replica shard是如何分配的</h2><p>（1）replica shard分配：3个primary shard，3个replica shard，1 node<br>（2）primary —&gt; replica同步<br>（3）读请求：既可以请求到primary shard  也可以请求到 replica shard</p>
<p><img src="https://img-blog.csdnimg.cn/20200128121901180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="image"></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>图解Elasticsearch容错机制：master选举，replica容错，数据恢复</title>
    <url>/2019/ck91i43lv000zssta75w7drp7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="图解Elasticsearch容错机制：master选举，replica容错，数据恢复"><a href="#图解Elasticsearch容错机制：master选举，replica容错，数据恢复" class="headerlink" title="图解Elasticsearch容错机制：master选举，replica容错，数据恢复"></a>图解Elasticsearch容错机制：master选举，replica容错，数据恢复</h2><p>（1）9 shard，3 node<br>（2）master node宕机，自动master选举，集群状态为：red<br>（3）replica容错：新master将replica提升为primary shard，集群状态为：yellow<br>（4）重启宕机node，master copy replica到该node，使用原有的shard并同步宕机后的修改，green</p>
<p><img src="https://img-blog.csdnimg.cn/20200129173240383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="Es 容错分析"></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>横向扩容过程，如何超出扩容极限，以及如何提升容错性</title>
    <url>/2019/ck91i43lw0012sstacd5w2hiv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="横向扩容过程，如何超出扩容极限，以及如何提升容错性"><a href="#横向扩容过程，如何超出扩容极限，以及如何提升容错性" class="headerlink" title="横向扩容过程，如何超出扩容极限，以及如何提升容错性"></a>横向扩容过程，如何超出扩容极限，以及如何提升容错性</h2><p>（1）primary&amp;replica自动负载均衡，6个shard，3 primary，3 replica<br>（2）每个node有更少的shard，IO/CPU/Memory资源给每个shard分配更多，每个shard性能更好<br>（3）扩容的极限，6个shard（3 primary，3 replica），最多扩容到6台机器，每个shard可以占用单台服务器的所有资源，性能最好<br>（4）超出扩容极限，动态修改replica数量，9个shard（3primary，6 replica），扩容到9台机器，比3台机器时，拥有3倍的读吞吐量<br>（5）3台机器下，9个shard（3 primary，6 replica），资源更少，但是容错性更好，最多容纳2台机器宕机，6个shard只能容纳0台机器宕机</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>初步解析document的核心元数据以及图解剖析index创建反例</title>
    <url>/2019/ck91i43m00017ssta8o15dypj/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初步解析document的核心元数据以及图解剖析index创建反例"><a href="#初步解析document的核心元数据以及图解剖析index创建反例" class="headerlink" title="初步解析document的核心元数据以及图解剖析index创建反例"></a>初步解析document的核心元数据以及图解剖析index创建反例</h2><p>1、_index元数据</p>
<p>（1）代表一个document存放在哪个index中<br>（2）类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如说company index，不合适的。<br>（3）index中包含了很多类似的document：类似是什么意思，其实指的就是说，这些document的fields很大一部分是相同的，你说你放了3个document，每个document的fields都完全不一样，这就不是类似了，就不太适合放到一个index里面去了。<br>（4）索引名称必须是小写的，不能用下划线开头，不能包含逗号：product，website，blog</p>
<p>2、_type元数据</p>
<p>（1）代表document属于index中的哪个类别（type）<br>（2）一个索引通常会划分为多个type，逻辑上对index中有些许不同的几类数据进行分类：因为一批相同的数据，可能有很多相同的fields，但是还是可能会有一些轻微的不同，可能会有少数fields是不一样的，举个例子，就比如说，商品，可能划分为电子商品，生鲜商品，日化商品，等等。<br>（3）type名称可以是大写或者小写，但是同时不能用下划线开头，不能包含逗号</p>
<p>3、_id元数据</p>
<p>（1）代表document的（全局）唯一标识，与index和type一起，可以唯一标识和定位一个document<br>（2）我们可以手动指定document的id（put /index/type/id），也可以不指定，由es自动为我们创建一个id</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>document id的手动指定与自动生成两种方式解析</title>
    <url>/2020/ck91i43m1001asstadndu6qwf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="document-id的手动指定与自动生成两种方式解析"><a href="#document-id的手动指定与自动生成两种方式解析" class="headerlink" title="document id的手动指定与自动生成两种方式解析"></a>document id的手动指定与自动生成两种方式解析</h2><h3 id="1-手动指定document-id"><a href="#1-手动指定document-id" class="headerlink" title="1.手动指定document id"></a>1.手动指定document id</h3><p> 1&gt;.一般来说，是从某些其他的系统中，导入一些数据到es时，会采取这种方式，就是使用系统中已有数据的唯一标识，作为es中document的id。举个例子，比如说，我们现在在开发一个电商网站，做搜索功能。这个时候，数据首先会在网站系统或者IT系统内部的数据库中，会先有一份，此时就肯定会有一个数据库的primary key（自增长，UUID，或者是业务编号）。如果将数据导入到es中，此时就比较适合采用数据在数据库中已有的primary key。</p>
<p>如果说，我们是在做一个系统，这个系统主要的数据存储就是es一种，也就是说，数据产生出来以后，可能就没有id，直接就放es一个存储，那么这个时候，可能就不太适合说手动指定document id的形式了，因为你也不知道id应该是什么，此时可以采取下面要讲解的让es自动生成id的方式。</p>
<p>eg: put</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">put /index/type/id</span><br><span class="line"></span><br><span class="line">PUT /test_index/test_type/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-自动生成document-id"><a href="#2-自动生成document-id" class="headerlink" title="2.自动生成document id"></a>2.自动生成document id</h3><p>eg: post</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">post /index/type</span><br><span class="line"></span><br><span class="line">POST /test_index/test_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"AVp4RN0bhjxldOOnBxaE"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自动生成的id，长度为20个字符，URL安全，base64编码，GUID(该算法，可以保证在分部署环境下，不同节点同一时间创建的_id一定是不冲突的)，分布式系统并行生成时不可能会发生冲突</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>document的_source元数据以及定制返回结果解析</title>
    <url>/2020/ck91i43m2001dssta131n6zxw/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="document的-source元数据以及定制返回结果解析"><a href="#document的-source元数据以及定制返回结果解析" class="headerlink" title="document的_source元数据以及定制返回结果解析"></a>document的_source元数据以及定制返回结果解析</h2><h4 id="1-source元数据"><a href="#1-source元数据" class="headerlink" title="1._source元数据"></a>1._source元数据</h4><p>_source元数据：就是说，我们在创建一个document的时候，使用的那个放在request body中的json串，默认情况下，在get的时候，会原封不动的返回回来。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">put /test_index/test_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">  <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get /test_index/test_type/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-定制返回结果"><a href="#2-定制返回结果" class="headerlink" title="2.定制返回结果"></a>2.定制返回结果</h4><p>定制返回的结果，指定_source中，返回哪些field</p>
<p>eg:?_source=key1,key2</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> </span><br><span class="line">GET /test_index/test_type/1?_source=test_field1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">GET /test_index/test_type/1?_source=test_field1,test_field2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES的并发冲突问题及悲观锁 乐观锁并发控制方案</title>
    <url>/2020/ck91i43m3001hsstafm63cvvd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES的并发冲突问题及悲观锁-乐观锁并发控制方案"><a href="#ES的并发冲突问题及悲观锁-乐观锁并发控制方案" class="headerlink" title="ES的并发冲突问题及悲观锁 乐观锁并发控制方案"></a>ES的并发冲突问题及悲观锁 乐观锁并发控制方案</h2><h4 id="1-es-并发问题图解说明"><a href="#1-es-并发问题图解说明" class="headerlink" title="1.es 并发问题图解说明"></a>1.es 并发问题图解说明</h4><p><img src="https://img-blog.csdnimg.cn/20200201153652498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="es 并发问题图解说明"></p>
<h4 id="2-悲观锁"><a href="#2-悲观锁" class="headerlink" title="2.悲观锁"></a>2.悲观锁</h4><p><img src="https://img-blog.csdnimg.cn/20200201221742823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="悲观锁"></p>
<h4 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h4><p><img src="https://img-blog.csdnimg.cn/20200201222237446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="乐观锁"></p>
<h4 id="4-悲观锁与乐观锁对比"><a href="#4-悲观锁与乐观锁对比" class="headerlink" title="4.悲观锁与乐观锁对比"></a>4.悲观锁与乐观锁对比</h4><table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>悲观锁</td>
<td>加锁方便，直接加锁，对于开发人员来说，是透明的，不需要做额外的操作</td>
<td>并发能力很低，同一时间只能有一个线程操作数据</td>
</tr>
<tr>
<td>乐观锁</td>
<td>并发能力很高，不给数据加锁，支持大量线程并发操作</td>
<td>操作麻烦，每次更新的时候，都要对比版本号，可能需要重新加载数据，再次修改，再次落库；这个过程，可能重复好几次才能完成</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>_document的全量替换、强制创建以及图解lazy delete机制</title>
    <url>/2020/ck91i43m4001jsstaed7t8us4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="document的全量替换、强制创建以及图解lazy-delete机制"><a href="#document的全量替换、强制创建以及图解lazy-delete机制" class="headerlink" title="_document的全量替换、强制创建以及图解lazy delete机制"></a>_document的全量替换、强制创建以及图解lazy delete机制</h2><h4 id="1-document的全量替换"><a href="#1-document的全量替换" class="headerlink" title="1.document的全量替换"></a>1.document的全量替换</h4><p>（1）语法同创建文档是一样的，如果document id不存在，那么就是创建；如果document id已经存在，那么就是全量替换操作，替换document的json串内容<br>（2）document是不可变的，如果要修改document的内容，第一种方式就是全量替换，直接对document重新建立索引，替换里面所有的内容<br>（3）es会将老的document标记为deleted，然后新增我们给定的一个document，当我们创建越来越多的document的时候，es会在适当的时机在后台自动删除标记为deleted的document</p>
<p><img src="https://img-blog.csdnimg.cn/20200131194059226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt="document"></p>
<h4 id="2-document的强制创建"><a href="#2-document的强制创建" class="headerlink" title="2.document的强制创建"></a>2.document的强制创建</h4><p>（1）创建文档与全量替换的语法是一样的，有时我们只是想新建文档，不想替换文档，如果强制进行创建呢？<br>（2）PUT /index/type/id?op_type=create，PUT /index/type/id/_create</p>
<h4 id="3-document的删除"><a href="#3-document的删除" class="headerlink" title="3.document的删除"></a>3.document的删除</h4><p>（1）DELETE /index/type/id<br>（2）不会理解物理删除，只会将其标记为deleted，当数据越来越多的时候，在后台自动删除</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch内部如何基于_version进行乐观锁并发控制</title>
    <url>/2020/ck91i43m6001nsstabuor3kb4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch内部如何基于-version进行乐观锁并发控制"><a href="#Elasticsearch内部如何基于-version进行乐观锁并发控制" class="headerlink" title="Elasticsearch内部如何基于_version进行乐观锁并发控制"></a>Elasticsearch内部如何基于_version进行乐观锁并发控制</h2><h3 id="eg-version元数据"><a href="#eg-version元数据" class="headerlink" title="eg: _version元数据"></a>eg: _version元数据</h3><p>PUT /test_index/test_type/6<br>{<br>  “test_field”: “test test”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “6”,<br>  “_version”: 1,<br>  “result”: “created”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: true<br>}</p>
<p>第一次创建一个document的时候，它的_version内部版本号就是1；以后，每次对这个document执行修改或者删除操作，都会对这个_version版本号自动加1；哪怕是删除，也会对这条数据的版本号加1</p>
<p>{<br>  “found”: true,<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “6”,<br>  “_version”: 4,<br>  “result”: “deleted”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  }<br>}</p>
<p>我们会发现，在删除一个document之后，可以从一个侧面证明，它不是立即物理删除掉的，因为它的一些版本号等信息还是保留着的。先删除一条document，再重新创建这条document，其实会在delete version基础之上，再把version号加1</p>
<p><img src="https://img-blog.csdnimg.cn/20200202112611587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于_version进行乐观锁并发控制</title>
    <url>/2020/ck91i43m7001qsstabniv8dny/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基于-version进行乐观锁并发控制"><a href="#基于-version进行乐观锁并发控制" class="headerlink" title="基于_version进行乐观锁并发控制"></a>基于_version进行乐观锁并发控制</h2><h3 id="1-首先创建一条数据"><a href="#1-首先创建一条数据" class="headerlink" title="1. 首先创建一条数据"></a>1. 首先创建一条数据</h3><p>PUT /test_index/test_type/1<br>{<br>  “test_field”: “test test”<br>}</p>
<h3 id="2-模拟两个客户端，都获取到了同一条数据"><a href="#2-模拟两个客户端，都获取到了同一条数据" class="headerlink" title="2.模拟两个客户端，都获取到了同一条数据"></a>2.模拟两个客户端，都获取到了同一条数据</h3><p>GET test_index/test_type/1</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “7”,<br>  “_version”: 1,<br>  “found”: true,<br>  “_source”: {<br>​    “test_field”: “test test”<br>  }<br>}</p>
<h3 id="3-其中一个客户端，先更新了一下这个数据"><a href="#3-其中一个客户端，先更新了一下这个数据" class="headerlink" title="3.其中一个客户端，先更新了一下这个数据"></a>3.其中一个客户端，先更新了一下这个数据</h3><p>同时带上数据的版本号，确保说，es中的数据的版本号，跟客户端中的数据的版本号是相同的，才能修改</p>
<p>PUT /test_index/test_type/7?version=1<br>{<br>  “test_field”: “test client 1”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “7”,<br>  “_version”: 2,<br>  “result”: “updated”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: false<br>}</p>
<h3 id="4-另外一个客户端，尝试基于version-1的数据去进行修改，同样带上version版本号，进行乐观锁的并发控制"><a href="#4-另外一个客户端，尝试基于version-1的数据去进行修改，同样带上version版本号，进行乐观锁的并发控制" class="headerlink" title="4.另外一个客户端，尝试基于version=1的数据去进行修改，同样带上version版本号，进行乐观锁的并发控制"></a>4.另外一个客户端，尝试基于version=1的数据去进行修改，同样带上version版本号，进行乐观锁的并发控制</h3><p>PUT /test_index/test_type/1?version=1<br>{<br>  “test_field”: “test client 2”<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “version_conflict_engine_exception”,<br>​        “reason”: “[test_type][7]: version conflict, current version [2] is different than the one provided [1]”,<br>​        “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​        “shard”: “3”,<br>​        “index”: “test_index”<br>​      }<br>​    ],<br>​    “type”: “version_conflict_engine_exception”,<br>​    “reason”: “[test_type][7]: version conflict, current version [2] is different than the one provided [1]”,<br>​    “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​    “shard”: “3”,<br>​    “index”: “test_index”<br>  },<br>  “status”: 409<br>}</p>
<h3 id="5-在乐观锁成功阻止并发问题之后，尝试正确的完成更新"><a href="#5-在乐观锁成功阻止并发问题之后，尝试正确的完成更新" class="headerlink" title="5.在乐观锁成功阻止并发问题之后，尝试正确的完成更新"></a>5.在乐观锁成功阻止并发问题之后，尝试正确的完成更新</h3><p>GET /test_index/test_type/1</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “7”,<br>  “_version”: 2,<br>  “found”: true,<br>  “_source”: {<br>​    “test_field”: “test client 1”<br>  }<br>}</p>
<h3 id="6-基于最新的数据和版本号，去进行修改，修改后，带上最新的版本号，可能这个步骤会需要反复执行好几次，才能成功，特别是在多线程并发更新同一条数据很频繁的情况下"><a href="#6-基于最新的数据和版本号，去进行修改，修改后，带上最新的版本号，可能这个步骤会需要反复执行好几次，才能成功，特别是在多线程并发更新同一条数据很频繁的情况下" class="headerlink" title="6.基于最新的数据和版本号，去进行修改，修改后，带上最新的版本号，可能这个步骤会需要反复执行好几次，才能成功，特别是在多线程并发更新同一条数据很频繁的情况下"></a>6.基于最新的数据和版本号，去进行修改，修改后，带上最新的版本号，可能这个步骤会需要反复执行好几次，才能成功，特别是在多线程并发更新同一条数据很频繁的情况下</h3><p>PUT /test_index/test_type/1?version=2<br>{<br>  “test_field”: “test client 2”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “7”,<br>  “_version”: 3,<br>  “result”: “updated”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: false<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>自己维护版本号，基于external version进行乐观锁并发控制</title>
    <url>/2020/ck91i43m9001usstabn841e8j/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="自己维护版本号，基于external-version进行乐观锁并发控制"><a href="#自己维护版本号，基于external-version进行乐观锁并发控制" class="headerlink" title="自己维护版本号，基于external version进行乐观锁并发控制"></a>自己维护版本号，基于external version进行乐观锁并发控制</h3><h4 id="1-external-version"><a href="#1-external-version" class="headerlink" title="1.external version"></a>1.external version</h4><p>es提供了一个feature，就是说，你可以不用它提供的内部_version版本号来进行并发控制，可以基于你自己维护的一个版本号来进行并发控制。 一句话，当你 可不想用es内部的_version来进行控制，而是用你自己维护的那个version来进行控制。此时就是可以采用 external version </p>
<p>?version=1<br>?version=1&amp;version_type=external</p>
<p>version_type=external，唯一的区别在于，_version，只有当你提供的version与es中的_version一模一样的时候，才可以进行修改，只要不一样，就报错；</p>
<p>当version_type=external的时候，只有当你提供的version比es中的_version大的时候，才能完成修改</p>
<p>es，_version=1，?version=1，才能更新成功<br>es，_version=1，?version&gt;1&amp;version_type=external，才能成功，比如说?version=2&amp;version_type=external</p>
<h4 id="2-构建一条数据"><a href="#2-构建一条数据" class="headerlink" title="2. 构建一条数据"></a>2. 构建一条数据</h4><p>PUT /test_index/test_type/8<br>{<br>  “test_field”: “test”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “8”,<br>  “_version”: 1,<br>  “result”: “created”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: true<br>}</p>
<h4 id="3-模拟两个客户端同时查询到这条数据"><a href="#3-模拟两个客户端同时查询到这条数据" class="headerlink" title="3.模拟两个客户端同时查询到这条数据"></a>3.模拟两个客户端同时查询到这条数据</h4><p>GET /test_index/test_type/8</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “8”,<br>  “_version”: 1,<br>  “found”: true,<br>  “_source”: {<br>​    “test_field”: “test”<br>  }<br>}</p>
<h4 id="4-第一个客户端先进行修改，此时客户端程序是在自己的数据库中获取到了这条数据的最新版本号，比如说是2"><a href="#4-第一个客户端先进行修改，此时客户端程序是在自己的数据库中获取到了这条数据的最新版本号，比如说是2" class="headerlink" title="4.第一个客户端先进行修改，此时客户端程序是在自己的数据库中获取到了这条数据的最新版本号，比如说是2"></a>4.第一个客户端先进行修改，此时客户端程序是在自己的数据库中获取到了这条数据的最新版本号，比如说是2</h4><p>PUT /test_index/test_type/8?version=2&amp;version_type=external<br>{<br>  “test_field”: “test client 1”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “8”,<br>  “_version”: 2,<br>  “result”: “updated”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: false<br>}</p>
<h3 id="5-模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是2，同时基于version-2发起了修改"><a href="#5-模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是2，同时基于version-2发起了修改" class="headerlink" title="5.模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是2，同时基于version=2发起了修改"></a>5.模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是2，同时基于version=2发起了修改</h3><p>PUT /test_index/test_type/8?version=2&amp;version_type=external<br>{<br>  “test_field”: “test client 2”<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “version_conflict_engine_exception”,<br>​        “reason”: “[test_type][8]: version conflict, current version [2] is higher or equal to the one provided [2]”,<br>​        “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​        “shard”: “1”,<br>​        “index”: “test_index”<br>​      }<br>​    ],<br>​    “type”: “version_conflict_engine_exception”,<br>​    “reason”: “[test_type][8]: version conflict, current version [2] is higher or equal to the one provided [2]”,<br>​    “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​    “shard”: “1”,<br>​    “index”: “test_index”<br>  },<br>  “status”: 409<br>}</p>
<p>报错了</p>
<h4 id="6-在并发控制成功后，重新基于最新的版本号发起更新"><a href="#6-在并发控制成功后，重新基于最新的版本号发起更新" class="headerlink" title="6. 在并发控制成功后，重新基于最新的版本号发起更新"></a>6. 在并发控制成功后，重新基于最新的版本号发起更新</h4><p>GET /test_index/test_type/8</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “8”,<br>  “_version”: 2,<br>  “found”: true,<br>  “_source”: {<br>​    “test_field”: “test client 1”<br>  }<br>}</p>
<p>PUT /test_index/test_type/8?version=3&amp;version_type=external<br>{<br>  “test_field”: “test client 2”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “8”,<br>  “_version”: 3,<br>  “result”: “updated”,<br>  “_shards”: {<br>​    “total”: 2,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “created”: false<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>es 基于groovy脚本进行partial update</title>
    <url>/2020/ck91i43ma001xssta5b0mak5k/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="es-基于groovy脚本进行partial-update"><a href="#es-基于groovy脚本进行partial-update" class="headerlink" title="es 基于groovy脚本进行partial update"></a>es 基于groovy脚本进行partial update</h3><p><img src="https://img-blog.csdnimg.cn/2020020322454336.png" alt=""></p>
<p>在es目录下 config/scripts 创建groovy 脚本</p>
<h4 id="1-es-是有个内置的脚本支持的，可以基于groovy脚本实现各种各样的复杂操作"><a href="#1-es-是有个内置的脚本支持的，可以基于groovy脚本实现各种各样的复杂操作" class="headerlink" title="1.  es 是有个内置的脚本支持的，可以基于groovy脚本实现各种各样的复杂操作"></a>1.  es 是有个内置的脚本支持的，可以基于groovy脚本实现各种各样的复杂操作</h4><p>PUT /test_index/test_type/11<br>{<br>  “num”: 0,<br>  “tags”: []<br>}</p>
<h4 id="2-内置脚本"><a href="#2-内置脚本" class="headerlink" title="2. 内置脚本"></a>2. 内置脚本</h4><p>POST /test_index/test_type/11/_update<br>{<br>   “script” : “ctx._source.num+=1”<br>}</p>
<p>{<br>  “_index”: “test_index”,<br>  “_type”: “test_type”,<br>  “_id”: “11”,<br>  “_version”: 2,<br>  “found”: true,<br>  “_source”: {<br>​    “num”: 1,<br>​    “tags”: []<br>  }<br>}</p>
<h4 id="4-外部脚本"><a href="#4-外部脚本" class="headerlink" title="4. 外部脚本"></a>4. 外部脚本</h4><p>ctx._source.tags+=new_tag</p>
<p>POST /test_index/test_type/11/_update<br>{<br>  “script”: {<br>​    “lang”: “groovy”,<br>​    “file”: “test-add-tags”,<br>​    “params”: {<br>​      “new_tag”: “tag1”<br>​    }<br>  }<br>}</p>
<h4 id="4-用脚本删除文档"><a href="#4-用脚本删除文档" class="headerlink" title="4. 用脚本删除文档"></a>4. 用脚本删除文档</h4><p>ctx.op = ctx._source.num == count ? ‘delete’ : ‘none’</p>
<p>POST /test_index/test_type/11/_update<br>{<br>  “script”: {<br>​    “lang”: “groovy”,<br>​    “file”: “test-delete-document”,<br>​    “params”: {<br>​      “count”: 1<br>​    }<br>  }<br>}</p>
<h4 id="5-upsert操作"><a href="#5-upsert操作" class="headerlink" title="5.upsert操作"></a>5.upsert操作</h4><p>POST /test_index/test_type/11/_update<br>{<br>  “doc”: {<br>​    “num”: 1<br>  }<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “document_missing_exception”,<br>​        “reason”: “[test_type][11]: document missing”,<br>​        “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​        “shard”: “4”,<br>​        “index”: “test_index”<br>​      }<br>​    ],<br>​    “type”: “document_missing_exception”,<br>​    “reason”: “[test_type][11]: document missing”,<br>​    “index_uuid”: “6m0G7yx7R1KECWWGnfH1sw”,<br>​    “shard”: “4”,<br>​    “index”: “test_index”<br>  },<br>  “status”: 404<br>}</p>
<p>如果指定的document不存在，就执行upsert中的初始化操作；如果指定的document存在，就执行doc或者script指定的partial update操作</p>
<p>POST /test_index/test_type/11/_update<br>{<br>   “script” : “ctx._source.num+=1”,<br>   “upsert”: {<br>​       “num”: 0,<br>​       “tags”: []<br>   }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>partial update内置乐观锁并发控制</title>
    <url>/2020/ck91i43mb0021sstahy4u13am/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="partial-update内置乐观锁并发控制"><a href="#partial-update内置乐观锁并发控制" class="headerlink" title="partial update内置乐观锁并发控制"></a>partial update内置乐观锁并发控制</h3><h4 id="1-partial-update内置乐观锁并发控制"><a href="#1-partial-update内置乐观锁并发控制" class="headerlink" title="1. partial update内置乐观锁并发控制"></a>1. partial update内置乐观锁并发控制</h4><p>如果partial update更新时候，所携带的_version 小于ES中所存储的version版本，则这个partial  update 失败</p>
<h4 id="2-retry-on-conflict"><a href="#2-retry-on-conflict" class="headerlink" title="2.retry_on_conflict"></a>2.retry_on_conflict</h4><p>  1&gt;. 再次获取document的数据和最新的版本（最新的数据）</p>
<p>  2&gt;.基于最新版本号再次去更新，若成功则不需要再次重试了； </p>
<p>  3&gt;. 若失败，则重复1和2两个步骤，最多重复的次数是根据retry 哪个参数的指定 eg:6 次</p>
<p>  eg:   post /index/type/id/_update?retry_on_conflict=5</p>
<h4 id="3-version"><a href="#3-version" class="headerlink" title="3._version"></a>3._version</h4><p>和当前版本号一直时才能更新，否则就报错</p>
<p>post /index/type/id/_update?retry_on_conflict=5&amp;version=6</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 的 partial update</title>
    <url>/2020/ck91i43mc0024sstaf4duextw/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ES-的-partial-update"><a href="#ES-的-partial-update" class="headerlink" title="ES 的 partial update"></a>ES 的 partial update</h3><h4 id="1-PUT-index-type-id"><a href="#1-PUT-index-type-id" class="headerlink" title="1. PUT /index/type/id"></a>1. PUT /index/type/id</h4><h4 id="创建文档-amp-替换文档，就是一样的语法"><a href="#创建文档-amp-替换文档，就是一样的语法" class="headerlink" title="创建文档&amp;替换文档，就是一样的语法"></a>创建文档&amp;替换文档，就是一样的语法</h4><p>一般对应到应用程序中，每次的执行流程基本是这样的：</p>
<p>（1）应用程序先发起一个get请求，获取到document，展示到前台界面，供用户查看和修改<br>（2）用户在前台界面修改数据，发送到后台<br>（3）后台代码，会将用户修改的数据在内存中进行执行，然后封装好修改后的全量数据<br>（4）然后发送PUT请求，到es中，进行全量替换<br>（5）es会将老的document标记为deleted，然后重新创建一个新的document</p>
<p>partial update</p>
<p>post /index/type/id/_update<br>{<br>   “doc”: {<br>​      “要修改的少数几个field即可，不需要全量的数据”<br>   }<br>}</p>
<p>看起来，好像就比较方便了，每次就传递少数几个发生修改的field即可，不需要将全量的document数据发送过去，</p>
<h4 id="2-图解partial-update实现原理以及其优点"><a href="#2-图解partial-update实现原理以及其优点" class="headerlink" title="2.  图解partial update实现原理以及其优点"></a>2.  图解partial update实现原理以及其优点</h4><p>partial update，看起来很方便的操作，实际内部的原理是什么样子的，然后它的优点是什么</p>
<h3 id="3-上机动手实战演练-partial-update"><a href="#3-上机动手实战演练-partial-update" class="headerlink" title="3.  上机动手实战演练 partial update"></a>3.  上机动手实战演练 partial update</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;10</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field1&quot;: &quot;test1&quot;,</span><br><span class="line">  &quot;test_field2&quot;: &quot;test2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;10&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;test_field2&quot;: &quot;updated test2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch  mget 的批量查询</title>
    <url>/2020/ck91i43md0028ssta7umx85xz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Elasticsearch-mget-的批量查询"><a href="#Elasticsearch-mget-的批量查询" class="headerlink" title="Elasticsearch  mget 的批量查询"></a>Elasticsearch  mget 的批量查询</h3><h4 id="1-批量查询好处"><a href="#1-批量查询好处" class="headerlink" title="1. 批量查询好处"></a>1. 批量查询好处</h4><p>一条一条的查询，比如说要查询100条数据，那么就要发送100次网络请求，这个开销还是很大的<br>如果进行批量查询的话，查询100条数据，就只要发送1次网络请求，网络请求的性能开销缩减100倍</p>
<p>可以说mget是很重要的，一般来说，在进行查询的时候，如果一次性要查询多条数据的话，那么一定要用batch批量操作的api<br>尽可能减少网络开销次数，可能可以将性能提升数倍，甚至数十倍，非常非常之重要</p>
<h4 id="2-mget的语法"><a href="#2-mget的语法" class="headerlink" title="2. mget的语法"></a>2. mget的语法</h4><h5 id="1-单条数据查询语法"><a href="#1-单条数据查询语法" class="headerlink" title="1.单条数据查询语法"></a>1.单条数据查询语法</h5><p>GET /test_index/test_type/1<br>GET /test_index/test_type/2</p>
<h5 id="2-mget批量查询"><a href="#2-mget批量查询" class="headerlink" title="2. mget批量查询"></a>2. mget批量查询</h5><h6 id="1-可以是不同index-和type-也可以是同一个-index-和type"><a href="#1-可以是不同index-和type-也可以是同一个-index-和type" class="headerlink" title="1.可以是不同index 和type 也可以是同一个 index 和type"></a>1.可以是不同index 和type 也可以是同一个 index 和type</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;_version&quot;: 2,</span><br><span class="line">      &quot;found&quot;: true,</span><br><span class="line">      &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;test_field1&quot;: &quot;test field1&quot;,</span><br><span class="line">        &quot;test_field2&quot;: &quot;test field2&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;_version&quot;: 1,</span><br><span class="line">      &quot;found&quot;: true,</span><br><span class="line">      &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;test_content&quot;: &quot;my test&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-查询的document是一个index下的不同type"><a href="#2-查询的document是一个index下的不同type" class="headerlink" title="2. 查询的document是一个index下的不同type"></a>2. 查询的document是一个index下的不同type</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-查询的数据都在同一个index下的同一个type"><a href="#3-查询的数据都在同一个index下的同一个type" class="headerlink" title="3. 查询的数据都在同一个index下的同一个type"></a>3. 查询的数据都在同一个index下的同一个type</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;ids&quot;: [1, 2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>distributed document store （分布式文档存储）</title>
    <url>/2020/ck91i43me002bssta9xirczne/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="distributed-document-store-（分布式文档存储）"><a href="#distributed-document-store-（分布式文档存储）" class="headerlink" title="distributed document store （分布式文档存储）"></a>distributed document store （分布式文档存储）</h3><p>Elasticsearch其实最核心的功能，就是一个分布式的文档数据存储系统。ES是分布式的。文档数据存储系统。文档数据，存储系统。</p>
<p>文档数据：es可以存储和操作json文档类型的数据，而且这也是es的核心数据结构。</p>
<p>存储系统：es可以对json文档类型的数据进行存储，查询，创建，更新，删除，等等操作。？其实ES满足了这些功能，就可以说已经是一个NoSQL的存储系统了。</p>
<p>根据ES的特性可以构建以下应用程序 ：</p>
<ol>
<li>数据量较大，es的分布式本质，可以帮助你快速进行扩容，承载大量数据</li>
<li>数据结构灵活多变，随时可能会变化，而且数据结构之间的关系，非常复杂，如果我们用传统数据库，就要面临大量的表操作</li>
<li>对数据的相关操作，较为简单，比如就是一些简单的增删改查，用我们之前讲解的那些document操作就可以搞定</li>
<li>NoSQL数据库，适用的也是类似于上面的这种场景</li>
</ol>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES bulk</title>
    <url>/2020/ck91i43mf002fssta4el3g4mz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ES-bulk"><a href="#ES-bulk" class="headerlink" title="ES bulk"></a>ES bulk</h3><h4 id="1-bulk语法"><a href="#1-bulk语法" class="headerlink" title="1.bulk语法"></a>1.bulk语法</h4><p>每一个操作要两个json串，语法如下：</p>
<p>{“action”: {“metadata”}}<br>{“data”}</p>
<p>POST /_bulk<br>{ “delete”: { “_index”: “test_index”, “_type”: “test_type”, “_id”: “3” }}<br>{ “create”: { “_index”: “test_index”, “_type”: “test_type”, “_id”: “12” }}<br>{ “test_field”:    “test12” }<br>{ “index”:  { “_index”: “test_index”, “_type”: “test_type”, “_id”: “2” }}<br>{ “test_field”:    “replaced test2” }<br>{ “update”: { “_index”: “test_index”, “_type”: “test_type”, “_id”: “1”, “_retry_on_conflict” : 3} }<br>{ “doc” : {“test_field2” : “bulk test1”} }</p>
<p>eg: 比如你现在要创建一个文档，放bulk里面，看起来会是这样子的：</p>
<p>{“index”: {“_index”: “test_index”, “_type”, “test_type”, “_id”: “1”}}<br>{“test_field1”: “test1”, “test_field2”: “test2”}</p>
<h5 id="1-有哪些类型的操作可以执行呢？"><a href="#1-有哪些类型的操作可以执行呢？" class="headerlink" title="1.有哪些类型的操作可以执行呢？"></a>1.有哪些类型的操作可以执行呢？</h5><p>（1）delete：删除一个文档，只要1个json串就可以了<br>（2）create：PUT /index/type/id/_create，强制创建<br>（3）index：普通的put操作，可以是创建文档，也可以是全量替换文档<br>（4）update：执行的partial update操作</p>
<p>error: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;json_e_o_f_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Unexpected end-of-input: expected close marker for Object (start marker at [Source: org.elasticsearch.transport.netty4.ByteBufStreamInput@5a5932cd; line: 1, column: 1])\n at [Source: org.elasticsearch.transport.netty4.ByteBufStreamInput@5a5932cd; line: 1, column: 3]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;json_e_o_f_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;Unexpected end-of-input: expected close marker for Object (start marker at [Source: org.elasticsearch.transport.netty4.ByteBufStreamInput@5a5932cd; line: 1, column: 1])\n at [Source: org.elasticsearch.transport.netty4.ByteBufStreamInput@5a5932cd; line: 1, column: 3]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 500</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上测错误是因为 ，bulk api对json的语法，有严格的要求，每个json串不能换行，只能放一行，同时一个json串和一个json串之间，必须有一个换行</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 41,</span><br><span class="line">  &quot;errors&quot;: true,</span><br><span class="line">  &quot;items&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;delete&quot;: &#123;</span><br><span class="line">        &quot;found&quot;: true,</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;10&quot;,</span><br><span class="line">        &quot;_version&quot;: 3,</span><br><span class="line">        &quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;create&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;_version&quot;: 1,</span><br><span class="line">        &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;created&quot;: true,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;create&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;status&quot;: 409,</span><br><span class="line">        &quot;error&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">          &quot;reason&quot;: &quot;[test_type][2]: version conflict, document already exists (current version [1])&quot;,</span><br><span class="line">          &quot;index_uuid&quot;: &quot;6m0G7yx7R1KECWWGnfH1sw&quot;,</span><br><span class="line">          &quot;shard&quot;: &quot;2&quot;,</span><br><span class="line">          &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;4&quot;,</span><br><span class="line">        &quot;_version&quot;: 1,</span><br><span class="line">        &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;created&quot;: true,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;_version&quot;: 2,</span><br><span class="line">        &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;created&quot;: false,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;update&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_version&quot;: 3,</span><br><span class="line">        &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bulk操作中，任意一个操作失败，是不会影响其他的操作的，但是在返回结果里，会告诉你异常日志</p>
<h4 id="2-bulk-同一-document-同一-index-的写法"><a href="#2-bulk-同一-document-同一-index-的写法" class="headerlink" title="2.  bulk 同一 document 同一 index 的写法"></a>2.  bulk 同一 document 同一 index 的写法</h4><p>POST /test_index/_bulk<br>{ “delete”: { “_type”: “test_type”, “_id”: “3” }}<br>{ “create”: { “_type”: “test_type”, “_id”: “12” }}<br>{ “test_field”:    “test12” }<br>{ “index”:  { “_type”: “test_type” }}<br>{ “test_field”:    “auto-generate id test” }<br>{ “index”:  { “_type”: “test_type”, “_id”: “2” }}<br>{ “test_field”:    “replaced test2” }<br>{ “update”: { “_type”: “test_type”, “_id”: “1”, “_retry_on_conflict” : 3} }<br>{ “doc” : {“test_field2” : “bulk test1”} }</p>
<h4 id="4-bulk-同一个document-同一个index-同一type-的写法"><a href="#4-bulk-同一个document-同一个index-同一type-的写法" class="headerlink" title="4. bulk 同一个document 同一个index 同一type 的写法"></a>4. bulk 同一个document 同一个index 同一type 的写法</h4><p>POST /test_index/test_type/_bulk<br>{ “delete”: { “_id”: “3” }}<br>{ “create”: { “_id”: “12” }}<br>{ “test_field”:    “test12” }<br>{ “index”:  { }}<br>{ “test_field”:    “auto-generate id test” }<br>{ “index”:  { “_id”: “2” }}<br>{ “test_field”:    “replaced test2” }<br>{ “update”: { “_id”: “1”, “_retry_on_conflict” : 3} }<br>{ “doc” : {“test_field2” : “bulk test1”} }</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>document增删改内部原理图解</title>
    <url>/2020/ck91i43mg002issta1n80fns5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="document增删改内部原理图解"><a href="#document增删改内部原理图解" class="headerlink" title="document增删改内部原理图解"></a>document增删改内部原理图解</h4><p>（1）客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）<br>（2）coordinating node，对document进行路由，将请求转发给对应的node（所包含的primary shard）<br>（3）实际的node上的primary shard处理请求，然后将数据同步到replica node<br>（4）coordinating node，如果发现primary node和所有replica node都处理完成后，就返回响应结果给客户端</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/CMS/U_kHvefjT4c.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>bulk api json格式与底层性能优化</title>
    <url>/2020/ck91i43mh002mssta8ccx3cn5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="bulk-api-json格式与底层性能优化"><a href="#bulk-api-json格式与底层性能优化" class="headerlink" title="bulk api json格式与底层性能优化"></a>bulk api json格式与底层性能优化</h4><h5 id="1-bulk中的每个操作都可能要转发到不同的node的shard去执行"><a href="#1-bulk中的每个操作都可能要转发到不同的node的shard去执行" class="headerlink" title="1. bulk中的每个操作都可能要转发到不同的node的shard去执行"></a>1. bulk中的每个操作都可能要转发到不同的node的shard去执行</h5><p>{“action”: {“meta”}}\n<br>{“data”}\n<br>{“action”: {“meta”}}\n<br>{“data”}\n</p>
<p>都是有换行</p>
<h5 id="2-如果采用比较良好的json数组格式"><a href="#2-如果采用比较良好的json数组格式" class="headerlink" title="2. 如果采用比较良好的json数组格式"></a>2. 如果采用比较良好的json数组格式</h5><p>允许任意的换行，可读性好，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p>
<p>（1）将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象<br>（2）解析json数组里的每个json，对每个请求中的document进行路由<br>（3）为路由到同一个shard上的多个请求，创建一个请求数组<br>（4）将这个请求数组序列化<br>（5）将序列化后的请求数组发送到对应的节点上去</p>
<h5 id="3-耗费更多内存，更多的jvm-gc开销"><a href="#3-耗费更多内存，更多的jvm-gc开销" class="headerlink" title="3.耗费更多内存，更多的jvm gc开销"></a>3.耗费更多内存，更多的jvm gc开销</h5><p>bulk size最佳大小的问题，一般建议在几千条，大小在10MB左右。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB ≈ 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p>
<p>​        占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降<br>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，更频繁，每次要回收的垃圾对象更多，耗费的时间更长，导致es的java虚拟机停止工作线程的时间更多</p>
<h5 id="4-现在的奇特格式"><a href="#4-现在的奇特格式" class="headerlink" title="4.现在的奇特格式"></a>4.现在的奇特格式</h5><p>{“action”: {“meta”}}\n<br>{“data”}\n<br>{“action”: {“meta”}}\n<br>{“data”}\n</p>
<p>（1）不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json<br>（2）对每两个一组的json，读取meta，进行document路由<br>（3）直接将对应的json发送到node上去</p>
<h5 id="5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能"><a href="#5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能" class="headerlink" title="5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能"></a>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能</h5>]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES document数据路由原理</title>
    <url>/2020/ck91i43mi002pssta7d710coc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ES-document数据路由原理"><a href="#ES-document数据路由原理" class="headerlink" title="ES document数据路由原理"></a>ES document数据路由原理</h3><h4 id="1-document如何路由到shard上的"><a href="#1-document如何路由到shard上的" class="headerlink" title="1. document如何路由到shard上的"></a>1. document如何路由到shard上的</h4><p><img src="https://img-blog.csdnimg.cn/20200205215655827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt=""></p>
<h4 id="2-路由算法"><a href="#2-路由算法" class="headerlink" title="2. 路由算法"></a>2. 路由算法</h4><p>shard = hash(routing) % number_of_primary_shards</p>
<p>举个例子，一个index有3个primary shard，P0，P1，P2</p>
<p>每次增删改查一个document的时候，都会带过来一个routing number，默认就是这个document的_id（可能是手动指定，也可能是自动生成）<br>routing = _id，假设_id=1</p>
<p>会将这个routing值，传入一个hash函数中，产出一个routing的hash值，hash(routing) = 21（比如等于21）<br>然后将hash函数产出的值对这个index的primary shard的数量求余数，21 % 3 = 0<br>此时，这个document就放在P0上。</p>
<p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</p>
<p>无论hash值是几，无论是什么数字，对number_of_primary_shards求余数，结果一定是在0~number_of_primary_shards-1之间这个范围内的。0,1,2。</p>
<h4 id="3-id-or-custom-routing-value"><a href="#3-id-or-custom-routing-value" class="headerlink" title="3. _id or custom routing value"></a>3. _id or custom routing value</h4><p>默认的routing就是_id<br>也可以在发送请求的时候，手动指定一个routing value，比如说put /index/type/id?routing=user_id</p>
<p>手动指定routing value是很有用的，可以保证说，某一类document一定被路由到一个shard上去，那么在后续进行应用级别的负载均衡，以及提升批量读取的性能的时候，是很有帮助的</p>
<h4 id="4-primary-shard数量一旦设置就不可更改的原因"><a href="#4-primary-shard数量一旦设置就不可更改的原因" class="headerlink" title="4. primary shard数量一旦设置就不可更改的原因"></a>4. primary shard数量一旦设置就不可更改的原因</h4><p><img src="https://img-blog.csdnimg.cn/20200205234438438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1OTkwMTI4NjM4,size_16,color_FFFFFF,t_70" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>写一致性原理以及quorum机制剖析</title>
    <url>/2020/ck91i43mj002tsstacfog4np3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写一致性原理以及quorum机制剖析"><a href="#写一致性原理以及quorum机制剖析" class="headerlink" title="写一致性原理以及quorum机制剖析"></a>写一致性原理以及quorum机制剖析</h4><h5 id="1-consistency-参数-one（primary-shard），all（all-shard），quorum（default）"><a href="#1-consistency-参数-one（primary-shard），all（all-shard），quorum（default）" class="headerlink" title="1.consistency 参数  one（primary shard），all（all shard），quorum（default）"></a>1.consistency 参数  one（primary shard），all（all shard），quorum（default）</h5><p>​       在发送任何一个增删改操作的时候，eg : put /index/type/id，可以带上一个consistency参数，指明我们想要的写一致性是什么？<br>put /index/type/id?consistency=quorum</p>
<p>one：要求我们这个写操作，只要有一个primary shard是active活跃可用的，就可以执行<br>all：要求我们这个写操作，必须所有的primary shard和replica shard都是活跃的，才可以执行这个写操作<br>quorum：默认的值，要求所有的shard中，必须是大部分的shard都是活跃的，可用的，才可以执行这个写操作</p>
<h5 id="2-quorum机制，写之前必须确保大多数shard都可用，int-primary-number-of-replicas-2-1，当number-of-replicas-gt-1时才生效"><a href="#2-quorum机制，写之前必须确保大多数shard都可用，int-primary-number-of-replicas-2-1，当number-of-replicas-gt-1时才生效" class="headerlink" title="2.quorum机制，写之前必须确保大多数shard都可用，int( (primary + number_of_replicas) / 2 ) + 1，当number_of_replicas&gt;1时才生效"></a>2.quorum机制，写之前必须确保大多数shard都可用，int( (primary + number_of_replicas) / 2 ) + 1，当number_of_replicas&gt;1时才生效</h5><p>机制： quroum = int( (primary + number_of_replicas) / 2 ) + 1<br>eg : 3个primary shard，number_of_replicas=1，总共有3 + 3 * 1 = 6个shard<br>quorum = int( (3 + 1) / 2 ) + 1 = 3<br>所以，要求6个shard中至少有3个shard是active状态的，才可以执行这个写操作</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/CMS/HWbcux3jeMU.png" alt=""></p>
<h5 id="3-如果节点数少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作"><a href="#3-如果节点数少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作" class="headerlink" title="3.如果节点数少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作"></a>3.如果节点数少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作</h5><p>3个primary shard，replica=1，要求至少3个shard是active，3个shard按照之前学习的shard&amp;replica机制，必须在不同的节点上，如果说只有1台机器的话，是不是有可能出现，3个shard都没法分配齐全的情况，此时就可能会出现写操作无法执行的情况</p>
<p>1个primary shard，replica=3，quorum=((1 + 3) / 2) + 1 = 3，要求1个primary shard + 3个replica shard = 4个shard，其中必须有3个shard是要处于active状态的。如果这个时候只有2台机器的话，会出现什么情况？</p>
<p>es提供了一种特殊的处理场景，就是说当number_of_replicas&gt;1时才生效，假如说，就一个primary shard，replica=1，此时就2个shard<br>(1 + 1 / 2) + 1 = 2，要求必须有2个shard是活跃的，但是可能就1个node，此时就1个shard是活跃的，如果你不特殊处理的话，导致我们的单节点集群就无法工作</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/CMS/QUMuuIQ4BvM.png" alt=""></p>
<h5 id="4-quorum对应的shard不齐全时，wait，默认1分钟，timeout，100，30s"><a href="#4-quorum对应的shard不齐全时，wait，默认1分钟，timeout，100，30s" class="headerlink" title="4.quorum对应的shard不齐全时，wait，默认1分钟，timeout，100，30s"></a>4.quorum对应的shard不齐全时，wait，默认1分钟，timeout，100，30s</h5><p>等待期间，期望活跃的shard数量可以增加，最后实在不行，就会timeout<br>我们其实可以在写操作的时候，加一个timeout参数，比如说put /index/type/id?timeout=30，默认是毫秒，当然也可以指定为30s  这个就是说自己去设定quorum不齐全的时候，es的timeout时长，可以缩短，也可以增长</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>_search结果解析及timeout机制</title>
    <url>/2020/ck91i43mk002wssta66h91gsh/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="search结果解析及timeout机制"><a href="#search结果解析及timeout机制" class="headerlink" title="_search结果解析及timeout机制"></a>_search结果解析及timeout机制</h4><h4 id="1-搜索结果里的各种数据，都代表了什么含义"><a href="#1-搜索结果里的各种数据，都代表了什么含义" class="headerlink" title="1. 搜索结果里的各种数据，都代表了什么含义"></a>1. 搜索结果里的各种数据，都代表了什么含义</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">".kibana"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"config"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"5.2.0"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"buildNum"</span>: <span class="number">14695</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>took</td>
<td>整个搜索请求花费了多少毫秒</td>
</tr>
<tr>
<td>hits.total</td>
<td>本次搜索，返回了几条结果</td>
</tr>
<tr>
<td>hits.max_score</td>
<td>本次搜索的所有结果中，最大的相关度分数是多少，每一条document对于search的相关度，越相关，_score分数越大，排位越靠前</td>
</tr>
<tr>
<td>hits.hits</td>
<td>默认查询前10条数据，是按照完整数据，_score降序排序</td>
</tr>
<tr>
<td>shards</td>
<td>shards fail的条件（primary和replica全部挂掉），不影响其他shard。默认情况下来说，一个搜索请求，会打到一个index的所有primary shard上去，当然了，每个primary shard都可能会有一个或多个replic shard，所以请求也可以到primary shard的其中一个replica shard上去。</td>
</tr>
<tr>
<td>timeout</td>
<td>默认无timeout，latency平衡completeness，手动指定timeout，timeout查询执行机制</td>
</tr>
</tbody></table>
<h5 id="2-搜索的timeout机制，底层的原理，画图讲解"><a href="#2-搜索的timeout机制，底层的原理，画图讲解" class="headerlink" title="2. 搜索的timeout机制，底层的原理，画图讲解"></a>2. 搜索的timeout机制，底层的原理，画图讲解</h5><p>用法：</p>
<p>eg :  GET /_search?timeout=10m</p>
<p>也可以指定其他时间单位: timeout=10ms，timeout=1s，timeout=1m</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/4x-5jxiN_Vk.png" alt="timeout超时机制"></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>_multi-index&amp;multi-type搜索模式使用以及搜索原理初步图解</title>
    <url>/2020/ck91i43mm0030ssta06fgf945/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="multi-index-amp-multi-type搜索模式使用以及搜索原理初步图解"><a href="#multi-index-amp-multi-type搜索模式使用以及搜索原理初步图解" class="headerlink" title="_multi-index&amp;multi-type搜索模式使用以及搜索原理初步图解"></a>_multi-index&amp;multi-type搜索模式使用以及搜索原理初步图解</h4><h5 id="1-multi-index和multi-type搜索模式"><a href="#1-multi-index和multi-type搜索模式" class="headerlink" title="1. multi-index和multi-type搜索模式"></a>1. multi-index和multi-type搜索模式</h5><p>告诉你如何一次性搜索多个index和多个type下的数据</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/_search</td>
<td>所有索引，所有type下的所有数据都搜索出来</td>
</tr>
<tr>
<td>/index1/_search</td>
<td>指定一个index，搜索其下所有type的数据</td>
</tr>
<tr>
<td>/index1,index2/_search</td>
<td>同时搜索两个index下的数据</td>
</tr>
<tr>
<td>/ *1, *2 /_search</td>
<td>按照通配符去匹配多个索引</td>
</tr>
<tr>
<td>/index1/type1/_search</td>
<td>搜索一个index下指定的type的数据</td>
</tr>
<tr>
<td>/index1/type1,type2/_search</td>
<td>可以搜索一个index下多个type的数据</td>
</tr>
<tr>
<td>/index1,index2/type1,type2/_search</td>
<td>搜索多个index下的多个type的数据</td>
</tr>
<tr>
<td>/ _all/type1,type2/_search</td>
<td>_all，可以代表搜索所有index下的指定type的数据</td>
</tr>
</tbody></table>
<h5 id="2-图解"><a href="#2-图解" class="headerlink" title="2. 图解"></a>2. 图解</h5><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/wuNEvdhPDPI.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>query string search语法以及_all metadata原理</title>
    <url>/2020/ck91i43mn0033sstad5dh78ym/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="query-string-search语法以及-all-metadata原理"><a href="#query-string-search语法以及-all-metadata原理" class="headerlink" title="query string search语法以及_all metadata原理"></a>query string search语法以及_all metadata原理</h4><h5 id="1-query-string基础语法"><a href="#1-query-string基础语法" class="headerlink" title="1.  query string基础语法"></a>1.  query string基础语法</h5><p>其实就是http请求,报附加的参数 通过url传过来</p>
<p>GET /test_index/test_type/_search?q=test_field:test _</p>
<p>表示 test_index ,test_type  下,test_field所包含的关键字 test<br>GET /test_index/test_type/_search?q=+test_field:test  _</p>
<p> “+” 代表必须包含 test字段,其实 带+ 号 和不带 + 号是一样的</p>
<p>GET /test_index/test_type/_search?q=-test_field:test</p>
<p>“-“ 代表 该 test_field 必须不包含 test 关键字 </p>
<p>一个是掌握q=field:search content的语法，还有一个是掌握+和-的含义</p>
<h5 id="2-all-metadata的原理和作用"><a href="#2-all-metadata的原理和作用" class="headerlink" title="2. _all metadata的原理和作用"></a>2. _all metadata的原理和作用</h5><p>GET /test_index/test_type/_search?q=test</p>
<p>直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来。我们在进行中搜索的时候，难道是对document中的每一个field都进行一次搜索吗？不是的</p>
<p>es中的_all元数据，在建立索引的时候，我们插入一条document，它里面包含了多个field，此时，es会自动将多个field的值，全部用字符串的方式串联起来，变成一个长的字符串，作为_all field的值，同时建立索引</p>
<p>后面如果在搜索的时候，没有对某个field指定搜索，就默认搜索_all field，其中是包含了所有field的值的</p>
<p>举个例子</p>
<p>{<br>  “name”: “jack”,<br>  “age”: 26,<br>  “email”: “<a href="mailto:jack@sina.com">jack@sina.com</a>“,<br>  “address”: “guamgzhou”<br>}</p>
<p>其实就是把以上所有的filed进行拼接起来,”jack 26 <a href="mailto:jack@sina.com">jack@sina.com</a> guangzhou”，作为这一条document的_all field的值，同时进行分词后建立对应的倒排索引</p>
<p>生产环境不使用</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping是什么</title>
    <url>/2020/ck91i43mp0037ssta9gl56pd9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="mapping是什么"><a href="#mapping是什么" class="headerlink" title="mapping是什么"></a>mapping是什么</h4><h5 id="1-插入几条数据，让es自动为我们建立一个索引"><a href="#1-插入几条数据，让es自动为我们建立一个索引" class="headerlink" title="1.  插入几条数据，让es自动为我们建立一个索引"></a>1.  插入几条数据，让es自动为我们建立一个索引</h5><p>PUT /website/article/1<br>{<br>  “post_date”: “2017-01-01”,<br>  “title”: “my first article”,<br>  “content”: “this is my first article in this website”,<br>  “author_id”: 11400<br>}</p>
<p>PUT /website/article/2<br>{<br>  “post_date”: “2017-01-02”,<br>  “title”: “my second article”,<br>  “content”: “this is my second article in this website”,<br>  “author_id”: 11400<br>}</p>
<p>PUT /website/article/3<br>{<br>  “post_date”: “2017-01-03”,<br>  “title”: “my third article”,<br>  “content”: “this is my third article in this website”,<br>  “author_id”: 11400<br>}</p>
<p>尝试各种搜索</p>
<p>GET /website/article/_search?q=2017                             3条结果<br>GET /website/article/_search?q=2017-01-01                             3条结果<br>GET /website/article/_search?q=post_date:2017-01-01        1条结果<br>GET /website/article/_search?q=post_date:2017                      1条结果</p>
<h5 id="2-mapping的定义"><a href="#2-mapping的定义" class="headerlink" title="2. mapping的定义"></a>2. mapping的定义</h5><p>自动或手动为index中的type建立的一种数据结构和相关配置，简称为mapping<br>dynamic mapping，自动为我们建立index，创建type，以及type对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置<br>我们当然，后面会讲解，也可以手动在创建数据之前，先创建index和type，以及type对应的mapping</p>
<h5 id="3-查看某个type-所对应的的mapping"><a href="#3-查看某个type-所对应的的mapping" class="headerlink" title="3.  查看某个type 所对应的的mapping"></a>3.  查看某个type 所对应的的mapping</h5><p>GET /website/_mapping/article</p>
<p>{<br>  “website”: {<br>​    “mappings”: {<br>​      “article”: {<br>​        “properties”: {<br>​          “author_id”: {<br>​            “type”: “long”<br>​          },<br>​          “content”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          },<br>​          “post_date”: {<br>​            “type”: “date”<br>​          },<br>​          “title”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>搜索结果为什么不一致，因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样。</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>分页搜索以及deep paging性能问题图解</title>
    <url>/2020/ck91i43mq003asstahgvtaz4w/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="分页搜索以及deep-paging性能问题图解"><a href="#分页搜索以及deep-paging性能问题图解" class="headerlink" title="分页搜索以及deep paging性能问题图解"></a>分页搜索以及deep paging性能问题图解</h4><h5 id="1-分页"><a href="#1-分页" class="headerlink" title="1. 分页"></a>1. 分页</h5><p>GET /_search?size=10<br>GET /_search?size=10&amp;from=0<br>GET /_search?size=10&amp;from=20</p>
<p>分页的上机实验</p>
<p>GET /test_index/test_type/_search</p>
<p>“hits”: {<br>​    “total”: 9,<br>​    “max_score”: 1,</p>
<p>我们假设将这9条数据分成3页，每一页是3条数据，来实验一下这个分页搜索的效果</p>
<p>GET /test_index/test_type/_search?from=0&amp;size=3</p>
<p>{<br>  “took”: 2,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 9,<br>​    “max_score”: 1,<br>​    “hits”: [<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “8”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        }<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “6”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “test_field”: “tes test”<br>​        }<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “4”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “test_field”: “test4”<br>​        }<br>​      }<br>​    ]<br>  }<br>}</p>
<p>第一页：id=8,6,4</p>
<p>GET /test_index/test_type/_search?from=3&amp;size=3</p>
<p>第二页：id=2,自动生成,7</p>
<p>GET /test_index/test_type/_search?from=6&amp;size=3</p>
<p>第三页：id=1,11,3</p>
<h5 id="2-deep-paging"><a href="#2-deep-paging" class="headerlink" title="2.deep paging"></a>2.deep paging</h5><p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/addadNSGzJ8.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>倒排索引核心原理</title>
    <url>/2020/ck91i43mr003esstab2rwaa3w/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="倒排索引核心原理"><a href="#倒排索引核心原理" class="headerlink" title="倒排索引核心原理"></a>倒排索引核心原理</h4><p>比如我们目前有两个语句</p>
<p>doc1：I really liked my small dogs, and I think my mom also liked them.<br>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p>
<p>分词，初步的倒排索引的建立</p>
<table>
<thead>
<tr>
<th>word</th>
<th>doc1</th>
<th>doc2</th>
</tr>
</thead>
<tbody><tr>
<td>I</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>really</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>liked</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>my</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>small</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>dogs</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>and</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>think</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>mom</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>also</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>them</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>He</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>never</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>any</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>so</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>hope</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>that</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>will</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>not</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>expect</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>me</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>to</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>him</td>
<td>*</td>
<td></td>
</tr>
</tbody></table>
<p>演示了一下倒排索引最简单的建立的一个过程</p>
<p>搜索</p>
<p>如果搜索 该文案:mother like little dog，没有搜索到任何结果,则</p>
<p>mother<br>like<br>little<br>dog</p>
<p>这个是不是我们想要的搜索结果？？？绝对不是，因为在我们看来，mother和mom有区别吗？同义词，都是妈妈的意思。like和liked有区别吗？没有，都是喜欢的意思，只不过一个是现在时，一个是过去时。little和small有区别吗？同义词，都是小小的。dog和dogs有区别吗？狗，只不过一个是单数，一个是复数。</p>
<p>normalization，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率</p>
<p>normalization 可以对分析进行  时态的转换，单复数的转换，同义词的转换，大小写的转换 等等操作.</p>
<p>eg: </p>
<p>mom —&gt; mother<br>liked —&gt; like<br>small —&gt; little<br>dogs —&gt; dog</p>
<p>重新建立倒排索引，加入normalization，再次用mother liked little dog搜索，就可以搜索到了</p>
<table>
<thead>
<tr>
<th>word</th>
<th>doc1</th>
<th>doc2</th>
<th>normalization</th>
</tr>
</thead>
<tbody><tr>
<td>I</td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>really</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>liked</td>
<td>*</td>
<td>*</td>
<td>liked –&gt; like</td>
</tr>
<tr>
<td>my</td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>small</td>
<td>*</td>
<td></td>
<td>small –&gt; little</td>
</tr>
<tr>
<td>dogs</td>
<td>*</td>
<td></td>
<td>dogs –&gt; dog</td>
</tr>
<tr>
<td>and</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>think</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mom</td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>also</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>them</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>He</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>never</td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>any</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>so</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>hope</td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>that</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>will</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>not</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>expect</td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>me</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>to</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>him</td>
<td>*</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>当用 该文案进行搜索的时候, mother like little dog，es 会对改文档进行分词，并执行normalization</p>
<p>mother     –&gt; mom<br>like             –&gt; like<br>little             –&gt; little<br>dog             –&gt; dog</p>
<p>这个时候 doc1和doc2都会搜索出来</p>
<p>doc1：I really liked my small dogs, and I think my mom also liked them.<br>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>exact value 与 full text 搜索</title>
    <url>/2020/ck91i43ms003hsstacek86z6b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="exact-value-与-full-text-搜索"><a href="#exact-value-与-full-text-搜索" class="headerlink" title="exact value 与 full text 搜索"></a>exact value 与 full text 搜索</h4><h5 id="1-exact-value"><a href="#1-exact-value" class="headerlink" title="1. exact value"></a>1. exact value</h5><p>eg: </p>
<p>录入: 2017-01-01，采用exact value，搜索的时候，必须输入2017-01-01，才能搜索出来<br>如果你输入一个01，是搜索不出来的; 也就是说  搜索的文字 必须与录入的一模一样才能搜索出来</p>
<h5 id="2-full-text-可以泛泛理解为全文检索"><a href="#2-full-text-可以泛泛理解为全文检索" class="headerlink" title="2. full text (可以泛泛理解为全文检索)"></a>2. full text (可以泛泛理解为全文检索)</h5><p>（1）缩写 vs. 全程：cn vs. china<br>（2）格式转化：like liked likes<br>（3）大小写：Tom vs tom<br>（4）同义词：like vs love</p>
<p>eg:</p>
<p>录入: 2017-01-01，es 可以将其拆分为 2017, 01, 01，搜索2017，或者01，都可以搜索出来<br>china，搜索cn，也可以将china搜索出来<br>likes，搜索like，也可以将likes搜索出来<br>Tom，搜索tom，也可以将Tom搜索出来<br>like，搜索love，同义词，也可以将like搜索出来</p>
<p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>分词器的内部组成与内置分词器</title>
    <url>/2020/ck91i43mt003lssta0juf2tt1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="分词器的内部组成与内置分词器"><a href="#分词器的内部组成与内置分词器" class="headerlink" title="分词器的内部组成与内置分词器"></a>分词器的内部组成与内置分词器</h4><h5 id="1-分词器"><a href="#1-分词器" class="headerlink" title="1. 分词器"></a>1. 分词器</h5><p>切分词语，normalization（提升recall召回率）</p>
<p>给出一个句子，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换），分词器<br>recall(召回率)：搜索的时候，增加能够搜索到的结果的数量</p>
<p>character filter：</p>
<p>在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> –&gt; hello），&amp; –&gt; and（I&amp;you –&gt; I and you）<br>tokenizer：分词，hello you and me –&gt; hello, you, and, me<br>token filter：lowercase，stop word，synonymom，dogs –&gt; dog，liked –&gt; like，Tom –&gt; tom，a/the/an –&gt; 干掉 停用词，mother –&gt; mom，small –&gt; little</p>
<p>分词器，是将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引</p>
<h5 id="2-内置分词器的介绍"><a href="#2-内置分词器的介绍" class="headerlink" title="2. 内置分词器的介绍"></a>2. 内置分词器的介绍</h5><p>Set the shape to semi-transparent by calling set_trans(5)</p>
<h6 id="1-standard-analyzer"><a href="#1-standard-analyzer" class="headerlink" title="1.standard analyzer"></a>1.standard analyzer</h6><p>standard analyzer：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</p>
<p> 特性: 按词切分,支持多语言;小写处理</p>
<h6 id="2-simple-analyzer"><a href="#2-simple-analyzer" class="headerlink" title="2.simple analyzer"></a>2.simple analyzer</h6><p>simple analyzer：set, the, shape, to, semi, transparent, by, calling, set, trans</p>
<p>特性: 按照非字母切分,小写处理</p>
<h6 id="3-stop-analyzer"><a href="#3-stop-analyzer" class="headerlink" title="3. stop  analyzer"></a>3. stop  analyzer</h6><p>stop  analyzer: 相比 simple analyzer 多了Stop Work处理</p>
<p>Stop Word: 值语气助词等修饰性的词语 ,eg : the an a</p>
<h6 id="4-whitespace-analyzer"><a href="#4-whitespace-analyzer" class="headerlink" title="4. whitespace analyzer"></a>4. whitespace analyzer</h6><p>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</p>
<h6 id="5-language-analyzer"><a href="#5-language-analyzer" class="headerlink" title="5. language analyzer"></a>5. language analyzer</h6><p>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</p>
<h6 id="6-keywork-Analyzer"><a href="#6-keywork-Analyzer" class="headerlink" title="6.  keywork Analyzer"></a>6.  keywork Analyzer</h6><p>特性: 不分词,直接将输入作为一个单词输出  (不想对文本进行分词)</p>
<h6 id="7-pattern-analyzer"><a href="#7-pattern-analyzer" class="headerlink" title="7. pattern analyzer"></a>7. pattern analyzer</h6><p>特性: 通过正则表达式自定义分隔符</p>
<p>默认是 \W+,即非字词的符号作为分隔符</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping复杂数据类型以及object类型数据底层结构</title>
    <url>/2020/ck91i43mv003ossta8esv5evq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mapping复杂数据类型以及object类型数据底层结构"><a href="#mapping复杂数据类型以及object类型数据底层结构" class="headerlink" title="mapping复杂数据类型以及object类型数据底层结构"></a>mapping复杂数据类型以及object类型数据底层结构</h4><p>课程大纲</p>
<h5 id="1、multivalue-field"><a href="#1、multivalue-field" class="headerlink" title="1、multivalue field"></a>1、multivalue field</h5><p>{ “tags”: [ “tag1”, “tag2” ]}</p>
<p>建立索引时与string是一样的，数据类型不能混 即 tags中对应的数组的类型是一样的</p>
<h5 id="2、empty-field"><a href="#2、empty-field" class="headerlink" title="2、empty field"></a>2、empty field</h5><p>null，[]，[null]</p>
<p>对于空串的处理</p>
<h5 id="3、object-field"><a href="#3、object-field" class="headerlink" title="3、object field"></a>3、object field</h5><p>PUT /company/employee/1<br>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  },<br>  “name”: “jack”,<br>  “age”: 27,<br>  “join_date”: “2017-01-01”<br>}</p>
<p>address：object类型</p>
<p>{<br>  “company”: {<br>​    “mappings”: {<br>​      “employee”: {<br>​        “properties”: {<br>​          “address”: {<br>​            “properties”: {<br>​              “city”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “country”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “province”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              }<br>​            }<br>​          },<br>​          “age”: {<br>​            “type”: “long”<br>​          },<br>​          “join_date”: {<br>​            “type”: “date”<br>​          },<br>​          “name”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>对于这样的数据类型</p>
<p>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  },<br>  “name”: “jack”,<br>  “age”: 27,<br>  “join_date”: “2017-01-01”<br>}</p>
<p>在es 中会转换成这样的存储方式</p>
<p>{<br>​    “name”:            [jack],<br>​    “age”:          [27],<br>​    “join_date”:      [2017-01-01],<br>​    “address.country”:         [china],<br>​    “address.province”:   [guangdong],<br>​    “address.city”:  [guangzhou]<br>}</p>
<p>包含多个对象的数据类型</p>
<p>{<br>​    “authors”: [<br>​        { “age”: 26, “name”: “Jack White”},<br>​        { “age”: 55, “name”: “Tom Jones”},<br>​        { “age”: 39, “name”: “Kitty Smith”}<br>​    ]<br>}</p>
<p>在ES中会从 行式  存储转为 列式 存储</p>
<p>{<br>​    “authors.age”:    [26, 55, 39],<br>​    “authors.name”:   [jack, white, tom, jones, kitty, smith]<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>query string的分词以及mapping引入案例遗留问题</title>
    <url>/2020/ck91i43mw003ssstach60429s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="query-string的分词以及mapping引入案例遗留问题"><a href="#query-string的分词以及mapping引入案例遗留问题" class="headerlink" title="query string的分词以及mapping引入案例遗留问题"></a>query string的分词以及mapping引入案例遗留问题</h4><h6 id="1、query-string分词"><a href="#1、query-string分词" class="headerlink" title="1、query string分词"></a>1、query string分词</h6><p>query string必须以和index建立时相同的analyzer进行分词<br>query string对exact value和full text的区别对待</p>
<p>date：exact value<br>_all：full text</p>
<p>比如我们有一个document，其中有一个field，包含的value是：hello you and me，建立倒排索引<br>我们要搜索这个document对应的index，搜索文本是hell me，这个搜索文本就是query string<br>query string，默认情况下，es会使用它对应的field建立倒排索引时相同的分词器去进行分词和normalization，只有这样，才能实现正确的搜索</p>
<p>我们建立倒排索引的时候，将dogs –&gt; dog，结果你搜索的时候，还是一个dogs，那不就搜索不到了吗？所以搜索的时候，那个dogs也必须变成dog才行。才能搜索到。</p>
<p>知识点：不同类型的field，可能有的就是full text，有的就是exact value</p>
<p>post_date 类型是date：分词  exact value<br>_all：类型是:full text，分词，normalization</p>
<h6 id="2、mapping引入案例遗留问题大揭秘"><a href="#2、mapping引入案例遗留问题大揭秘" class="headerlink" title="2、mapping引入案例遗留问题大揭秘"></a>2、mapping引入案例遗留问题大揭秘</h6><p>GET /_search?q=2017</p>
<p>搜索的是_all field，document所有的field都会拼接成一个大串，进行分词</p>
<p>2017-01-02 my second article this is my second article in this website 11400</p>
<p>所建立的倒排索引:</p>
<table>
<thead>
<tr>
<th>数据</th>
<th>doc1</th>
<th>doc2</th>
<th>doc3</th>
</tr>
</thead>
<tbody><tr>
<td>2017</td>
<td>*</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>01</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>02</td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>03</td>
<td></td>
<td></td>
<td>*</td>
</tr>
</tbody></table>
<p>_all，2017，自然会搜索到3个docuemnt</p>
<p>GET /_search?q=2017-01-01</p>
<p>_all，2017-01-01，query string会用跟建立倒排索引一样的分词器去进行分词</p>
<p>2017<br>01<br>01</p>
<p>GET /_search?q=post_date:2017-01-01</p>
<p>date，会作为exact value去建立索引</p>
<table>
<thead>
<tr>
<th>数据</th>
<th>doc1</th>
<th>doc2</th>
<th>doc3</th>
</tr>
</thead>
<tbody><tr>
<td>2017-01-01</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2017-01-02</td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>2017-01-03</td>
<td></td>
<td></td>
<td>*</td>
</tr>
</tbody></table>
<p>post_date:2017-01-01，2017-01-01，doc1一条document</p>
<p>GET /_search?q=post_date:2017，这个在这里不讲解，因为是es 5.2以后做的一个优化 , 默认搜索出来一条</p>
<h6 id="3、测试分词器"><a href="#3、测试分词器" class="headerlink" title="3、测试分词器"></a>3、测试分词器</h6><p>GET /_analyze<br>{<br>  “analyzer”: “standard”,<br>  “text”: “Text to analyze”<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping的透彻理解</title>
    <url>/2020/ck91i43mx003vssta1m15flfy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="mapping的透彻理解"><a href="#mapping的透彻理解" class="headerlink" title="mapping的透彻理解"></a>mapping的透彻理解</h5><p>（1）往es里面直接插入数据，es会自动建立索引，同时建立type以及对应的mapping<br>（2）mapping中就自动定义了每个field的数据类型<br>（3）不同的数据类型（比如说text和date），可能有的是exact value，也可能有的是full text<br>（4）exact value，在建立倒排索引，分词 的时候，是将整个值一起作为一个关键词建立到倒排索引中的；</p>
<p>​         full text，会经历各种各样的处理，分词，normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中<br>（5）同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；</p>
<p>​       比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索<br>（6）可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和type的mapping，自己对各个field进行设置，包括数据类型，包括索引行为，包括分词器，等等</p>
<p>mapping  就是index的type的元数据，每个type都有一个自己的mapping，决定了数据类型，建立倒排索引的行为，还有进行搜索的行为</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping的核心数据类型以及dynamic mapping</title>
    <url>/2020/ck91i43mx003ysstabyn0ak64/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="mapping的核心数据类型以及dynamic-mapping"><a href="#mapping的核心数据类型以及dynamic-mapping" class="headerlink" title="mapping的核心数据类型以及dynamic mapping"></a>mapping的核心数据类型以及dynamic mapping</h5><h6 id="1、核心的数据类型"><a href="#1、核心的数据类型" class="headerlink" title="1、核心的数据类型"></a>1、核心的数据类型</h6><p>string<br>byte，short，integer，long<br>float，double<br>boolean<br>date</p>
<h6 id="2、dynamic-mapping"><a href="#2、dynamic-mapping" class="headerlink" title="2、dynamic mapping"></a>2、dynamic mapping</h6><p>动态映射</p>
<p>true or false    –&gt;    boolean<br>123        –&gt;    long<br>123.45        –&gt;    double<br>2017-01-01    –&gt;    date<br>“hello world”    –&gt;    string/text</p>
<h6 id="3、查看-mapping"><a href="#3、查看-mapping" class="headerlink" title="3、查看 mapping"></a>3、查看 mapping</h6><p>GET /index/_mapping/type</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>手动建立和修改mapping以及定制string类型数据是否分词</title>
    <url>/2020/ck91i43my0041sstag67c46he/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="手动建立和修改mapping以及定制string类型数据是否分词"><a href="#手动建立和修改mapping以及定制string类型数据是否分词" class="headerlink" title="手动建立和修改mapping以及定制string类型数据是否分词"></a>手动建立和修改mapping以及定制string类型数据是否分词</h5><h6 id="1、如何建立索引"><a href="#1、如何建立索引" class="headerlink" title="1、如何建立索引"></a>1、如何建立索引</h6><p>analyzed             分词<br>not_analyzed     不分词<br>no                       不被索引搜索</p>
<h6 id="2、修改mapping"><a href="#2、修改mapping" class="headerlink" title="2、修改mapping"></a>2、修改mapping</h6><p>只能创建index时手动建立mapping，或者新增field mapping，但是不能update field mapping</p>
<p>PUT /website<br>{<br>  “mappings”: {<br>​    “article”: {<br>​      “properties”: {<br>​        “author_id”: {<br>​          “type”: “long”<br>​        },<br>​        “title”: {<br>​          “type”: “text”,<br>​          “analyzer”: “english”<br>​        },<br>​        “content”: {<br>​          “type”: “text”<br>​        },<br>​        “post_date”: {<br>​          “type”: “date”<br>​        },<br>​        “publisher_id”: {<br>​          “type”: “text”,<br>​          “index”: “not_analyzed”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>PUT /website<br>{<br>  “mappings”: {<br>​    “article”: {<br>​      “properties”: {<br>​        “author_id”: {<br>​          “type”: “text”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “index_already_exists_exception”,<br>​        “reason”: “index [website/co1dgJ-uTYGBEEOOL8GsQQ] already exists”,<br>​        “index_uuid”: “co1dgJ-uTYGBEEOOL8GsQQ”,<br>​        “index”: “website”<br>​      }<br>​    ],<br>​    “type”: “index_already_exists_exception”,<br>​    “reason”: “index [website/co1dgJ-uTYGBEEOOL8GsQQ] already exists”,<br>​    “index_uuid”: “co1dgJ-uTYGBEEOOL8GsQQ”,<br>​    “index”: “website”<br>  },<br>  “status”: 400<br>}</p>
<p>PUT /website/_mapping/article<br>{<br>  “properties” : {<br>​    “new_field” : {<br>​      “type” :    “string”,<br>​      “index”:    “not_analyzed”<br>​    }<br>  }<br>}</p>
<h6 id="3、测试mapping"><a href="#3、测试mapping" class="headerlink" title="3、测试mapping"></a>3、测试mapping</h6><p>GET /website/_analyze<br>{<br>  “field”: “content”,<br>  “text”: “my-dogs”<br>}</p>
<p>GET website/_analyze<br>{<br>  “field”: “new_field”,<br>  “text”: “my dogs”<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “remote_transport_exception”,<br>​        “reason”: “[4onsTYV][127.0.0.1:9300][indices:admin/analyze[s]]”<br>​      }<br>​    ],<br>​    “type”: “illegal_argument_exception”,<br>​    “reason”: “Can’t process field [new_field], Analysis requests are only supported on tokenized fields”<br>  },<br>  “status”: 400<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>search api的基础语法</title>
    <url>/2020/ck91i43mz0044ssta8m6z4f22/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="search-api的基础语法"><a href="#search-api的基础语法" class="headerlink" title="search api的基础语法"></a>search api的基础语法</h5><h6 id="1、search-api的基本语法"><a href="#1、search-api的基本语法" class="headerlink" title="1、search api的基本语法"></a>1、search api的基本语法</h6><p>GET /_search<br>{}</p>
<p>GET /index1,index2/type1,type2/search<br>{}</p>
<p>GET /_search<br>{<br>  “from”: 0,<br>  “size”: 10<br>}</p>
<h6 id="2、http协议中get是否可以带上request-body"><a href="#2、http协议中get是否可以带上request-body" class="headerlink" title="2、http协议中get是否可以带上request body"></a>2、http协议中get是否可以带上request body</h6><p>HTTP协议，一般不允许get请求带上request body，但是因为get更加适合描述查询数据的操作，因此还是这么用了</p>
<p>GET /_search?from=0&amp;size=10</p>
<p>碰巧，很多浏览器，或者是服务器，也都支持GET+request body模式</p>
<p>如果遇到不支持的场景，也可以用POST /_search</p>
<p>POST /_search<br>{<br>  “from”:0,<br>  “size”:10<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping复杂数据类型以及object类型数据底层结构</title>
    <url>/2020/ck91i43n00047ssta6tw0gvi3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="mapping复杂数据类型以及object类型数据底层结构"><a href="#mapping复杂数据类型以及object类型数据底层结构" class="headerlink" title="mapping复杂数据类型以及object类型数据底层结构"></a>mapping复杂数据类型以及object类型数据底层结构</h5><h6 id="1、multivalue-field"><a href="#1、multivalue-field" class="headerlink" title="1、multivalue field"></a>1、multivalue field</h6><p>{ “tags”: [ “tag1”, “tag2” ]}</p>
<p>建立索引时与string是一样的，数据类型不能混</p>
<h6 id="2-empty-field"><a href="#2-empty-field" class="headerlink" title="2. empty field"></a>2. empty field</h6><p>null，[]，[null]</p>
<h6 id="3、object-field"><a href="#3、object-field" class="headerlink" title="3、object field"></a>3、object field</h6><p>PUT /company/employee/1<br>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  },<br>  “name”: “jack”,<br>  “age”: 27,<br>  “join_date”: “2017-01-01”<br>}</p>
<p>GET /company/_mapping/employee</p>
<p>address：object类型(数据结构)</p>
<p>{<br>  “company”: {<br>​    “mappings”: {<br>​      “employee”: {<br>​        “properties”: {<br>​          “address”: {<br>​            “properties”: {<br>​              “city”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “country”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “province”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              }<br>​            }<br>​          },<br>​          “age”: {<br>​            “type”: “long”<br>​          },<br>​          “join_date”: {<br>​            “type”: “date”<br>​          },<br>​          “name”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  },<br>  “name”: “jack”,<br>  “age”: 27,<br>  “join_date”: “2017-01-01”<br>}</p>
<p>{<br>​    “name”:            [jack],<br>​    “age”:          [27],<br>​    “join_date”:      [2017-01-01],<br>​    “address.country”:         [china],<br>​    “address.province”:   [guangdong],<br>​    “address.city”:  [guangzhou]<br>}</p>
<p>复杂的数据结构 </p>
<p>{<br>​    “authors”: [<br>​        { “age”: 26, “name”: “Jack White”},<br>​        { “age”: 55, “name”: “Tom Jones”},<br>​        { “age”: 39, “name”: “Kitty Smith”}<br>​    ]<br>}</p>
<p>ES 底层会行转列存储</p>
<p>{<br>​    “authors.age”:    [26, 55, 39],<br>​    “authors.name”:   [jack, white, tom, jones, kitty, smith]<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Query DSL搜索语法</title>
    <url>/2020/ck91i43n0004asstace9wdyzr/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="Query-DSL搜索语法"><a href="#Query-DSL搜索语法" class="headerlink" title="Query DSL搜索语法"></a>Query DSL搜索语法</h5><p>ES中有两种搜索语法: 1. Query String  (GET /index/type/?name=??)</p>
<h6 id="1、一个例子让你明白什么是Query-DSL"><a href="#1、一个例子让你明白什么是Query-DSL" class="headerlink" title="1、一个例子让你明白什么是Query DSL"></a>1、一个例子让你明白什么是Query DSL</h6><p>GET /_search<br>{<br>​    “query”: {<br>​        “match_all”: {}<br>​    }<br>}</p>
<h6 id="2、Query-DSL的基本语法"><a href="#2、Query-DSL的基本语法" class="headerlink" title="2、Query DSL的基本语法"></a>2、Query DSL的基本语法</h6><p>{<br>​    QUERY_NAME: {<br>​        ARGUMENT: VALUE,<br>​        ARGUMENT: VALUE,…<br>​    }<br>}</p>
<p>{<br>​    QUERY_NAME: {<br>​        FIELD_NAME: {<br>​            ARGUMENT: VALUE,<br>​            ARGUMENT: VALUE,…<br>​        }<br>​    }<br>}</p>
<p>示例：</p>
<p>GET /test_index/test_type/_search<br>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test”<br>​    }<br>  }<br>}</p>
<h6 id="3、如何组合多个搜索条件"><a href="#3、如何组合多个搜索条件" class="headerlink" title="3、如何组合多个搜索条件"></a>3、如何组合多个搜索条件</h6><p>搜索需求：title必须包含elasticsearch，content可以包含elasticsearch也可以不包含，author_id必须不为111</p>
<p>{<br>  “took”: 1,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 3,<br>​    “max_score”: 1,<br>​    “hits”: [<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “2”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “my hadoop article”,<br>​          “content”: “hadoop is very bad”,<br>​          “author_id”: 111<br>​        }<br>​      },<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “1”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “my elasticsearch article”,<br>​          “content”: “es is very bad”,<br>​          “author_id”: 110<br>​        }<br>​      },<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “3”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “my elasticsearch article”,<br>​          “content”: “es is very goods”,<br>​          “author_id”: 111<br>​        }<br>​      }<br>​    ]<br>  }<br>}</p>
<p>GET /website/article/_search<br>{<br>  “query”: {<br>​    “bool”: {<br>​      “must”: [<br>​        {<br>​          “match”: {<br>​            “title”: “elasticsearch”<br>​          }<br>​        }<br>​      ],<br>​      “should”: [<br>​        {<br>​          “match”: {<br>​            “content”: “elasticsearch”<br>​          }<br>​        }<br>​      ],<br>​      “must_not”: [<br>​        {<br>​          “match”: {<br>​            “author_id”: 111<br>​          }<br>​        }<br>​      ]<br>​    }<br>  }<br>}</p>
<p>复杂的写法:</p>
<p>GET /test_index/_search<br>{<br>​    “query”: {<br>​            “bool”: {<br>​                “must”: { “match”:   { “name”: “tom” }},<br>​                “should”: [<br>​                    { “match”:       { “hired”: true }},<br>​                    { “bool”: {<br>​                        “must”:      { “match”: { “personality”: “good” }},<br>​                        “must_not”:  { “match”: { “rude”: true }}<br>​                    }}<br>​                ],<br>​                “minimum_should_match”: 1<br>​            }<br>​    }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>filter与query深入对比解密：相关度，性能</title>
    <url>/2020/ck91i43n1004dsstaede895fc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="filter与query深入对比解密：相关度，性能"><a href="#filter与query深入对比解密：相关度，性能" class="headerlink" title="filter与query深入对比解密：相关度，性能"></a>filter与query深入对比解密：相关度，性能</h4><h5 id="1、filter与query示例"><a href="#1、filter与query示例" class="headerlink" title="1、filter与query示例"></a>1、filter与query示例</h5><p>构建数据:</p>
<p>PUT /company/employee/2<br>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “jiangsu”,<br>​    “city”: “nanjing”<br>  },<br>  “name”: “tom”,<br>  “age”: 30,<br>  “join_date”: “2016-01-01”<br>}</p>
<p>PUT /company/employee/3<br>{<br>  “address”: {<br>​    “country”: “china”,<br>​    “province”: “shanxi”,<br>​    “city”: “xian”<br>  },<br>  “name”: “marry”,<br>  “age”: 35,<br>  “join_date”: “2015-01-01”<br>}</p>
<p>搜索请求：年龄必须大于等于30，同时join_date必须是2016-01-01</p>
<p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “bool”: {<br>​      “must”: [<br>​        {<br>​          “match”: {<br>​            “join_date”: “2016-01-01”<br>​          }<br>​        }<br>​      ],<br>​      “filter”: {<br>​        “range”: {<br>​          “age”: {<br>​            “gte”: 30<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<h5 id="2、filter与query对比大解密"><a href="#2、filter与query对比大解密" class="headerlink" title="2、filter与query对比大解密"></a>2、filter与query对比大解密</h5><p>filter:仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响<br>query:会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序</p>
<p>一般来说，如果你是在进行搜索，需要将最匹配搜索条件的数据先返回，那么用query；如果你只是要根据一些条件筛选出一部分数据，不关注其排序，那么用filter<br>除非这些搜索条件，你希望越符合这些搜索条件的document越排在前面返回，那么这些搜索条件要放在query中；如果你不希望一些搜索条件来影响你的document排序，那么就放在filter中即可</p>
<h5 id="3、filter与query性能"><a href="#3、filter与query性能" class="headerlink" title="3、filter与query性能"></a>3、filter与query性能</h5><p>filter: 不需要计算相关度分数，不需要按照相关度分数进行排序，同时还有内置的自动cache最常使用filter的数据<br>query: 相反，要计算相关度分数，按照分数进行排序，而且无法cache结果,性能相对要低一些.</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>各种query搜索语法</title>
    <url>/2020/ck91i43n2004gsstabbse55wc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="各种query搜索语法"><a href="#各种query搜索语法" class="headerlink" title="各种query搜索语法"></a>各种query搜索语法</h5><h6 id="1、match-all"><a href="#1、match-all" class="headerlink" title="1、match all"></a>1、match all</h6><p>GET /_search<br>{<br>​    “query”: {<br>​        “match_all”: {}<br>​    }<br>}</p>
<h6 id="2、match-会对查询的条件进行分词-然后再进行查询"><a href="#2、match-会对查询的条件进行分词-然后再进行查询" class="headerlink" title="2、match (会对查询的条件进行分词,然后再进行查询)"></a>2、match (会对查询的条件进行分词,然后再进行查询)</h6><p>GET /_search<br>{<br>​    “query”: { “match”: { “title”: “my elasticsearch article” }}<br>}</p>
<h6 id="3、multi-match"><a href="#3、multi-match" class="headerlink" title="3、multi match"></a>3、multi match</h6><p>GET /test_index/test_type/_search<br>{<br>  “query”: {<br>​    “multi_match”: {<br>​      “query”: “test”,<br>​      “fields”: [“test_field”, “test_field1”]<br>​    }<br>  }<br>}</p>
<h6 id="4、range-query"><a href="#4、range-query" class="headerlink" title="4、range query"></a>4、range query</h6><p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “range”: {<br>​      “age”: {<br>​        “gte”: 30<br>​      }<br>​    }<br>  }<br>}</p>
<h6 id="5、term-query-是把-test-field-的值-当做一个整体进行进行查询-不会对其进行分词"><a href="#5、term-query-是把-test-field-的值-当做一个整体进行进行查询-不会对其进行分词" class="headerlink" title="5、term query ( 是把 test_field 的值,当做一个整体进行进行查询,不会对其进行分词)"></a>5、term query ( 是把 test_field 的值,当做一个整体进行进行查询,不会对其进行分词)</h6><p>GET /test_index/test_type/_search<br>{<br>  “query”: {<br>​    “term”: {<br>​      “test_field”: “test hello”<br>​    }<br>  }<br>}</p>
<h6 id="6、terms-query"><a href="#6、terms-query" class="headerlink" title="6、terms query"></a>6、terms query</h6><p>GET /_search<br>{<br>​    “query”: { “terms”: { “tag”: [ “search”, “full_text”, “nosql” ] }}<br>}</p>
<h6 id="7、exist-query（2-x中的查询，现在已经不提供了）"><a href="#7、exist-query（2-x中的查询，现在已经不提供了）" class="headerlink" title="7、exist query（2.x中的查询，现在已经不提供了）"></a>7、exist query（2.x中的查询，现在已经不提供了）</h6>]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>如何定位不合法的搜索以及其原因</title>
    <url>/2020/ck91i43n3004jssta7l2n349c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="如何定位不合法的搜索以及其原因"><a href="#如何定位不合法的搜索以及其原因" class="headerlink" title="如何定位不合法的搜索以及其原因"></a>如何定位不合法的搜索以及其原因</h5><h6 id="1-eg-反例"><a href="#1-eg-反例" class="headerlink" title="1 .eg 反例"></a>1 .eg 反例</h6><p>GET /test_index/test_type/_validate/query?explain<br>{<br>  “query”: {<br>​    “math”: {<br>​      “test_field”: “test”<br>​    }<br>  }<br>}</p>
<p>提示的错误信息:</p>
<p>{<br>  “valid”: false,<br>  “error”: “org.elasticsearch.common.ParsingException: no [query] registered for [math]”<br>}</p>
<h6 id="2-GET-test-index-test-type-validate-query-explain"><a href="#2-GET-test-index-test-type-validate-query-explain" class="headerlink" title="2 .GET /test_index/test_type/_validate/query?explain"></a>2 .GET /test_index/test_type/_validate/query?explain</h6><p>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test”<br>​    }<br>  }<br>}</p>
<p>判断搜索是否合法</p>
<p>{<br>  “valid”: true,<br>  “_shards”: {<br>​    “total”: 1,<br>​    “successful”: 1,<br>​    “failed”: 0<br>  },<br>  “explanations”: [<br>​    {<br>​      “index”: “test_index”,<br>​      “valid”: true,<br>​      “explanation”: “+test_field:test #(#_type:test_type)”<br>​    }<br>  ]<br>}</p>
<p>一般用在那种特别复杂庞大的搜索下，比如你一下子写了上百行的搜索，这个时候可以先用validate api去验证一下，搜索是否合法</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>如何定制搜索结果的排序规则</title>
    <url>/2020/ck91i43n4004mssta8meo8429/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="如何定制搜索结果的排序规则"><a href="#如何定制搜索结果的排序规则" class="headerlink" title="如何定制搜索结果的排序规则"></a>如何定制搜索结果的排序规则</h5><h6 id="1、默认排序规则"><a href="#1、默认排序规则" class="headerlink" title="1、默认排序规则"></a>1、默认排序规则</h6><p>默认情况下，是按照_score降序排序的</p>
<p>然而，某些情况下，可能没有有用到_score，比如说filter</p>
<p>GET /_search<br>{<br>​    “query” : {<br>​        “bool” : {<br>​            “filter” : {<br>​                “term” : {<br>​                    “author_id” : 1<br>​                }<br>​            }<br>​        }<br>​    }<br>}</p>
<p>当然，也可以是constant_score</p>
<p>GET /_search<br>{<br>​    “query” : {<br>​        “constant_score” : {<br>​            “filter” : {<br>​                “term” : {<br>​                    “author_id” : 1<br>​                }<br>​            }<br>​        }<br>​    }<br>}</p>
<h6 id="2、定制排序规则-使用-sort-关键字"><a href="#2、定制排序规则-使用-sort-关键字" class="headerlink" title="2、定制排序规则 (使用 sort 关键字)"></a>2、定制排序规则 (使用 sort 关键字)</h6><p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “constant_score”: {<br>​      “filter”: {<br>​        “range”: {<br>​          “age”: {<br>​            “gte”: 30<br>​          }<br>​        }<br>​      }<br>​    }<br>  },<br>  “sort”: [<br>​    {<br>​      “join_date”: {<br>​        “order”: “asc”<br>​      }<br>​    }<br>  ]<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>如何定制搜索结果的排序规则</title>
    <url>/2020/ck91i43n5004pssta7mrh8zbi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="如何将一个field索引两次来解决字符串排序问题"><a href="#如何将一个field索引两次来解决字符串排序问题" class="headerlink" title="如何将一个field索引两次来解决字符串排序问题"></a>如何将一个field索引两次来解决字符串排序问题</h5><p>如果对一个string field进行排序，结果往往不准确，因为分词后是多个单词，再排序就不是我们想要的结果了</p>
<p>通常解决方案是，将一个string field建立两次索引，一个分词，用来进行搜索；一个不分词，用来进行排序</p>
<h6 id="1-设置索引类型"><a href="#1-设置索引类型" class="headerlink" title="1.设置索引类型"></a>1.设置索引类型</h6><p>PUT /website<br>{<br>  “mappings”: {<br>​    “article”: {<br>​      “properties”: {<br>​        “title”: {<br>​          “type”: “text”,<br>​          “fields”: {<br>​            “raw”: {// 一般会用raw来表示<br>​              “type”: “string”,<br>​              “index”: “not_analyzed”<br>​            }<br>​          },<br>​          “fielddata”: true // 涉及正排索引<br>​        },<br>​        “content”: {<br>​          “type”: “text”<br>​        },<br>​        “post_date”: {<br>​          “type”: “date”<br>​        },<br>​        “author_id”: {<br>​          “type”: “long”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<h6 id="2-添加数据"><a href="#2-添加数据" class="headerlink" title="2. 添加数据"></a>2. 添加数据</h6><p>PUT /website/article/1<br>{<br>  “title”: “first article”,<br>  “content”: “this is my second article”,<br>  “post_date”: “2017-01-01”,<br>  “author_id”: 110<br>}</p>
<p>GET /website/article/_search</p>
<p>{<br>  “took”: 2,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 3,<br>​    “max_score”: 1,<br>​    “hits”: [<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “2”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “first article”,<br>​          “content”: “this is my first article”,<br>​          “post_date”: “2017-02-01”,<br>​          “author_id”: 110<br>​        }<br>​      },<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “1”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “second article”,<br>​          “content”: “this is my second article”,<br>​          “post_date”: “2017-01-01”,<br>​          “author_id”: 110<br>​        }<br>​      },<br>​      {<br>​        “_index”: “website”,<br>​        “_type”: “article”,<br>​        “_id”: “3”,<br>​        “_score”: 1,<br>​        “_source”: {<br>​          “title”: “third article”,<br>​          “content”: “this is my third article”,<br>​          “post_date”: “2017-03-01”,<br>​          “author_id”: 110<br>​        }<br>​      }<br>​    ]<br>  }<br>}</p>
<h6 id="3-使用不分词的索引字段进行排序"><a href="#3-使用不分词的索引字段进行排序" class="headerlink" title="3. 使用不分词的索引字段进行排序"></a>3. 使用不分词的索引字段进行排序</h6><p>GET /website/article/_search<br>{<br>  “query”: {<br>​    “match_all”: {}<br>  },<br>  “sort”: [<br>​    {<br>​      “title.raw”: {<br>​        “order”: “desc”<br>​      }<br>​    }<br>  ]<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>多搜索条件组合查询</title>
    <url>/2020/ck91i43n5004sssta4eoqcki6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="多搜索条件组合查询"><a href="#多搜索条件组合查询" class="headerlink" title="多搜索条件组合查询"></a>多搜索条件组合查询</h5><p>GET /website/article/_search<br>{<br>  “query”: {<br>​    “bool”: {<br>​      “must”: [<br>​        {<br>​          “match”: {<br>​            “title”: “elasticsearch”<br>​          }<br>​        }<br>​      ],<br>​      “should”: [<br>​        {<br>​          “match”: {<br>​            “content”: “elasticsearch”<br>​          }<br>​        }<br>​      ],<br>​      “must_not”: [<br>​        {<br>​          “match”: {<br>​            “author_id”: 111<br>​          }<br>​        }<br>​      ]<br>​    }<br>  }<br>}</p>
<p>{<br>​    “bool”: {<br>​        “must”:     { “match”: { “title”: “how to make millions” }},<br>​        “must_not”: { “match”: { “tag”:   “spam” }},<br>​        “should”: [<br>​            { “match”: { “tag”: “starred” }}<br>​        ],<br>​        “filter”: {<br>​          “range”: { “date”: { “gte”: “2014-01-01” }}<br>​        }<br>​    }<br>}</p>
<p>bool 关键字底下可以方 以下字段:<br>must，must_not，should，filter</p>
<h6 id="每个子查询都会计算一个document针对它的相关度分数，然后bool综合所有分数，合并为一个分数，当然filter是不会计算分数的"><a href="#每个子查询都会计算一个document针对它的相关度分数，然后bool综合所有分数，合并为一个分数，当然filter是不会计算分数的" class="headerlink" title="每个子查询都会计算一个document针对它的相关度分数，然后bool综合所有分数，合并为一个分数，当然filter是不会计算分数的"></a>每个子查询都会计算一个document针对它的相关度分数，然后bool综合所有分数，合并为一个分数，当然filter是不会计算分数的</h6><p>{<br>​    “bool”: {<br>​        “must”:     { “match”: { “title”: “how to make millions” }},<br>​        “must_not”: { “match”: { “tag”:   “spam” }},<br>​        “should”: [<br>​            { “match”: { “tag”: “starred” }}<br>​        ],<br>​        “filter”: {<br>​          “bool”: {<br>​              “must”: [<br>​                  { “range”: { “date”: { “gte”: “2014-01-01” }}},<br>​                  { “range”: { “price”: { “lte”: 29.99 }}}<br>​              ],<br>​              “must_not”: [<br>​                  { “term”: { “category”: “ebooks” }}<br>​              ]<br>​          }<br>​        }<br>​    }<br>}</p>
<h6 id="如果只用filter进行查询-需要加一个-constant-score-进行单纯的过滤"><a href="#如果只用filter进行查询-需要加一个-constant-score-进行单纯的过滤" class="headerlink" title="如果只用filter进行查询 ,需要加一个 constant_score 进行单纯的过滤"></a>如果只用filter进行查询 ,需要加一个 constant_score 进行单纯的过滤</h6><p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “constant_score”: {<br>​      “filter”: {<br>​        “range”: {<br>​          “age”: {<br>​            “gte”: 30<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>内核级知识点之doc value 简介</title>
    <url>/2020/ck91i43n6004vssta21rqckw1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="内核级知识点之doc-value-简介"><a href="#内核级知识点之doc-value-简介" class="headerlink" title="内核级知识点之doc value 简介"></a>内核级知识点之doc value 简介</h4><h5 id="1-doc-values-简介"><a href="#1-doc-values-简介" class="headerlink" title="1. doc values 简介"></a>1. doc values 简介</h5><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values</p>
<p>在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用</p>
<p>doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上</p>
<h6 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例:"></a>1.示例:</h6><p>doc1: hello world you and me<br>doc2: hi, world, how are you</p>
<table>
<thead>
<tr>
<th>word</th>
<th>doc 1</th>
<th>doc 2</th>
</tr>
</thead>
<tbody><tr>
<td>hello</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>world</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>you</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>and</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>me</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>hi</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>how</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>are</td>
<td></td>
<td>*</td>
</tr>
</tbody></table>
<p>会将以上语句,进行分词标称倒排索引</p>
<p>hello you –&gt; hello, you</p>
<p>hello –&gt; doc1<br>you –&gt; doc1,doc2</p>
<h6 id="2-示例-正排索引"><a href="#2-示例-正排索引" class="headerlink" title="2.示例 正排索引"></a>2.示例 正排索引</h6><p>doc1: hello world you and me<br>doc2: hi, world, how are you</p>
<p>sort by age</p>
<p>doc1: { “name”: “jack”, “age”: 27 }<br>doc2: { “name”: “tom”, “age”: 30 }</p>
<table>
<thead>
<tr>
<th>document</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>doc1</td>
<td>jack</td>
<td>27</td>
</tr>
<tr>
<td>doc2</td>
<td>tom</td>
<td>30</td>
</tr>
</tbody></table>
<p>​    </p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式搜索引擎内核解密之query phase</title>
    <url>/2020/ck91i43n7004ysstaakpa6kze/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="分布式搜索引擎内核解密之query-phase"><a href="#分布式搜索引擎内核解密之query-phase" class="headerlink" title="分布式搜索引擎内核解密之query phase"></a>分布式搜索引擎内核解密之query phase</h5><h6 id="1、query-phase"><a href="#1、query-phase" class="headerlink" title="1、query phase"></a>1、query phase</h6><p>（1）搜索请求发送到某一个coordinate node，构构建一个priority queue(优先队列)，长度以paging操作from和size为准，默认为10<br>（2）coordinate node将请求转发到所有shard，每个shard本地搜索，并构建一个本地的priority queue<br>（3）各个shard将自己的priority queue返回给coordinate node，并构建一个全局的priority queue</p>
<h6 id="2、replica-shard如何提升搜索吞吐量"><a href="#2、replica-shard如何提升搜索吞吐量" class="headerlink" title="2、replica shard如何提升搜索吞吐量"></a>2、replica shard如何提升搜索吞吐量</h6><p>一次请求要打到所有shard的一个replica/primary  shard 上去，如果每个shard都有多个replica，那么同时并发过来的搜索请求可以同时打到其他的replica上去</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/OxDk3eRjCvc.png" alt="query phase"></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式搜索引擎内核解密之query phase</title>
    <url>/2020/ck91i43n80051ssta00q7e9av/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="分布式搜索引擎内核解密之fetch-phase"><a href="#分布式搜索引擎内核解密之fetch-phase" class="headerlink" title="分布式搜索引擎内核解密之fetch phase"></a>分布式搜索引擎内核解密之fetch phase</h4><h5 id="1、fetch-phbase工作流程"><a href="#1、fetch-phbase工作流程" class="headerlink" title="1、fetch phbase工作流程"></a>1、fetch phbase工作流程</h5><p>（1）coordinate node构建完priority queue之后，就发送mget请求去所有shard上获取对应的document<br>（2）各个shard将document返回给coordinate node<br>（3）coordinate node将合并后的document结果返回给client客户端</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/_zKICQtJ0iI.png" alt=""></p>
<h5 id="2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score-相关度分数-排序"><a href="#2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score-相关度分数-排序" class="headerlink" title="2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score(相关度分数)排序"></a>2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score(相关度分数)排序</h5>]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>scoll滚动搜索</title>
    <url>/2020/ck91i43n90054sstad8moef59/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="scoll滚动搜索"><a href="#scoll滚动搜索" class="headerlink" title="scoll滚动搜索"></a>scoll滚动搜索</h4><p>eg : 如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scoll滚动查询，一批一批的查，直到所有数据都查询完处理完</p>
<p>使用scoll滚动搜索，可以先搜索一批数据，然后下次再搜索一批数据，以此类推，直到搜索出全部的数据来<br>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的<br>采用基于_doc进行排序的方式，性能较高<br>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了</p>
<p>GET /test_index/test_type/_search?scroll=1m<br>{<br>  “query”: {<br>​    “match_all”: {}<br>  },<br>  “sort”: [ “_doc” ],<br>  “size”: 3<br>}</p>
<p>结果示例:</p>
<p>{<br>  “_scroll_id”: “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACxeFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAALF8WNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAACxhFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYhY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”,<br>  “took”: 5,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 10,<br>​    “max_score”: null,<br>​    “hits”: [<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “8”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “6”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_field”: “tes test”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      },<br>​      {<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “AVp4RN0bhjxldOOnBxaE”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “test_content”: “my test”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      }<br>​    ]<br>  }<br>}</p>
<p>获得的结果会有一个scoll_id，下一次再发送scoll请求的时候，必须带上上一个的scoll_id</p>
<p>GET /_search/scroll<br>{<br>​    “scroll”: “1m”,<br>​    “scroll_id” : “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACxeFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAALF8WNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAACxhFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAAsYhY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”<br>}</p>
<p>11,4,7<br>3,2,1<br>20</p>
<p>scoll，看起来挺像分页的，但是其实使用场景不一样。分页主要是用来一页一页搜索，给用户看的；scoll主要是用来一批一批检索数据，让系统进行处理的</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>bouncing results问题解决方案</title>
    <url>/2020/ck91i43nb0057ssta39gnaec1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="bouncing-results问题解决方案"><a href="#bouncing-results问题解决方案" class="headerlink" title="bouncing results问题解决方案"></a>bouncing results问题解决方案</h4><h5 id="1、preference"><a href="#1、preference" class="headerlink" title="1、preference"></a>1、preference</h5><p>决定了哪些shard会被用来执行搜索操作</p>
<p>_primary, _primary_first, _local, _only_node:xyz, _prefer_node:xyz, _shards:2,3</p>
<p>bouncing results问题，两个document排序，field值相同；不同的shard上，可能排序不同；每次请求轮询打到不同的replica shard上；每次页面上看到的搜索结果的排序都不一样。这就是bouncing result，也就是跳跃的结果。</p>
<p>搜索的时候，是轮询将搜索请求发送到每一个replica shard（primary shard），但是在不同的shard上，可能document的排序不同</p>
<p>解决方案就是将preference设置为一个字符串，比如说user_id，让每个user每次搜索的时候，都使用同一个replica shard去执行，就不会看到bouncing results了</p>
<h5 id="2、timeout-主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长"><a href="#2、timeout-主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长" class="headerlink" title="2、timeout:  主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长"></a>2、timeout:  主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长</h5><h5 id="3、routing，document文档路由，-id路由，routing-user-id，这样的话可以让同一个user对应的数据到一个shard上去"><a href="#3、routing，document文档路由，-id路由，routing-user-id，这样的话可以让同一个user对应的数据到一个shard上去" class="headerlink" title="3、routing，document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去"></a>3、routing，document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去</h5><h5 id="4、search-type"><a href="#4、search-type" class="headerlink" title="4、search_type"></a>4、search_type</h5><p>default：query_then_fetch<br>dfs_query_then_fetch，可以提升revelance sort精准度</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>修改分词器以及自定义分词器</title>
    <url>/2020/ck91i43nb005assta3zr48oyh/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="修改分词器以及自定义分词器"><a href="#修改分词器以及自定义分词器" class="headerlink" title="修改分词器以及自定义分词器"></a>修改分词器以及自定义分词器</h4><h6 id="1、默认的分词器简介"><a href="#1、默认的分词器简介" class="headerlink" title="1、默认的分词器简介"></a>1、默认的分词器简介</h6><p>standard</p>
<p>standard tokenizer：以单词边界进行切分<br>standard token filter：什么都不做<br>lowercase token filter：将所有字母转换为小写<br>stop token filer（默认被禁用）：移除停用词，比如a the it等等</p>
<h6 id="2、修改分词器的设置"><a href="#2、修改分词器的设置" class="headerlink" title="2、修改分词器的设置"></a>2、修改分词器的设置</h6><p>启用english停用词token filter</p>
<p>PUT /my_index<br>{<br>  “settings”: {<br>​    “analysis”: {<br>​      “analyzer”: {<br>​        “es_std”: { // 自己起的名字<br>​          “type”: “standard”,<br>​          “stopwords”: “<em>english</em>“<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>GET /my_index/_analyze<br>{<br>  “analyzer”: “standard”,<br>  “text”: “a dog is in the house”<br>}</p>
<p>GET /my_index/_analyze<br>{<br>  “analyzer”: “es_std”,<br>  “text”:”a dog is in the house”<br>}</p>
<h6 id="3、定制化自己的分词器"><a href="#3、定制化自己的分词器" class="headerlink" title="3、定制化自己的分词器"></a>3、定制化自己的分词器</h6><p>PUT /my_index<br>{<br>  “settings”: {<br>​    “analysis”: {<br>​      “char_filter”: {<br>​        “&amp;_to_and”: {<br>​          “type”: “mapping”,<br>​          “mappings”: [“&amp;=&gt; and”]<br>​        }<br>​      },<br>​      “filter”: {<br>​        “my_stopwords”: {<br>​          “type”: “stop”,<br>​          “stopwords”: [“the”, “a”]<br>​        }<br>​      },<br>​      “analyzer”: {<br>​        “my_analyzer”: {<br>​          “type”: “custom”,<br>​          “char_filter”: [“html_strip”, “&amp;_to_and”],<br>​          “tokenizer”: “standard”,<br>​          “filter”: [“lowercase”, “my_stopwords”]<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>GET /my_index/_analyze<br>{<br>  “text”: “tom&amp;jerry are a friend in the house, <a>, HAHA!!”,<br>  “analyzer”: “my_analyzer”<br>}</p>
<p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “content”: {<br>​      “type”: “text”,<br>​      “analyzer”: “my_analyzer”<br>​    }<br>  }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>type的底层数据结构</title>
    <url>/2020/ck91i43nc005dsstaamhmgs6g/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="type的底层数据结构"><a href="#type的底层数据结构" class="headerlink" title="type的底层数据结构"></a>type的底层数据结构</h5><p>type，是一个index中用来区分类似的数据的，但是可能有不同的fields，而且有不同的属性来控制索引建立、分词器<br>field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，不区分类型的<br>也就是说lucene是没有type的概念的，在document中，实际上将type作为一个document的field来存储，即_type，es通过_type来进行type的过滤和筛选<br>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的</p>
<p>eg: type的数据结构</p>
<p>{<br>   “ecommerce”: {<br>​      “mappings”: {<br>​         “elactronic_goods”: {<br>​            “properties”: {<br>​               “name”: {<br>​                  “type”: “string”,<br>​               },<br>​               “price”: {<br>​                  “type”: “double”<br>​               },<br>​           “service_period”: {<br>​          “type”: “string”<br>​           }<br>​            }<br>​         },<br>​         “fresh_goods”: {<br>​            “properties”: {<br>​               “name”: {<br>​                  “type”: “string”,<br>​               },<br>​               “price”: {<br>​                  “type”: “double”<br>​               },<br>​           “eat_period”: {<br>​          “type”: “string”<br>​           }<br>​            }<br>​         }<br>​      }<br>   }<br>}</p>
<p>以下两个type 在底层存储的时候</p>
<p>{<br>  “name”: “geli kongtiao”,<br>  “price”: 1999.0,<br>  “service_period”: “one year”<br>}</p>
<p>{<br>  “name”: “aozhou dalongxia”,<br>  “price”: 199.0,<br>  “eat_period”: “one week”<br>}</p>
<p>同一type在底层的存储是这样子的,会把共有的东西糅合在一起</p>
<p>{<br>   “ecommerce”: {<br>​      “mappings”: {<br>​        “_type”: {<br>​          “type”: “string”,<br>​          “index”: “not_analyzed”<br>​        },<br>​        “name”: {<br>​          “type”: “string”<br>​        }<br>​        “price”: {<br>​          “type”: “double”<br>​        }<br>​        “service_period”: {<br>​          “type”: “string”<br>​        }<br>​        “eat_period”: {<br>​          “type”: “string”<br>​        }<br>​      }<br>   }<br>}</p>
<p>{<br>  “_type”: “elactronic_goods”,<br>  “name”: “geli kongtiao”,<br>  “price”: 1999.0,<br>  “service_period”: “one year”,<br>  “eat_period”: “”<br>}</p>
<p>{<br>  “_type”: “fresh_goods”,<br>  “name”: “aozhou dalongxia”,<br>  “price”: 199.0,<br>  “service_period”: “”,<br>  “eat_period”: “one week”<br>}</p>
<p>最佳实践，将类似结构的type放在一个index下，这些type应该有多个field是相同的<br>假如说，你将两个type的field完全不同，放在一个index下，那么就每条数据都至少有一半的field在底层的lucene中是空值，会有严重的性能问题, 和占用空间</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>创建、修改以及删除索引</title>
    <url>/2020/ck91i43nd005gssta0ev6534k/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="创建、修改以及删除索引"><a href="#创建、修改以及删除索引" class="headerlink" title="创建、修改以及删除索引"></a>创建、修改以及删除索引</h4><h5 id="1、创建索引"><a href="#1、创建索引" class="headerlink" title="1、创建索引"></a>1、创建索引</h5><p>创建索引的语法</p>
<p>PUT /my_index<br>{<br>​    “settings”: { … any settings … },<br>​    “mappings”: {<br>​        “type_one”: { … any mappings … },<br>​        “type_two”: { … any mappings … },<br>​        …<br>​    }<br>}</p>
<p>创建索引的示例</p>
<p>PUT /my_index<br>{<br>  “settings”: {<br>​    “number_of_shards”: 1,<br>​    “number_of_replicas”: 0<br>  },<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {<br>​        “my_field”: {<br>​          “type”: “text”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<h5 id="2、修改索引"><a href="#2、修改索引" class="headerlink" title="2、修改索引"></a>2、修改索引</h5><p>PUT /my_index/_settings<br>{<br>​    “number_of_replicas”: 1<br>}</p>
<h5 id="3、删除索引"><a href="#3、删除索引" class="headerlink" title="3、删除索引"></a>3、删除索引</h5><p>DELETE /my_index<br>DELETE /index_one,index_two<br>DELETE /index_*<br>DELETE /_all</p>
<p>可以在elasticsearch.yml中配置<br>action.destructive_requires_name: true  </p>
<p>禁用DELETE /_all 操作,只能指定操作</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义dynamic mapping策略</title>
    <url>/2020/ck91i43ne005jssta4904dqcb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="自定义dynamic-mapping策略"><a href="#自定义dynamic-mapping策略" class="headerlink" title="自定义dynamic mapping策略"></a>自定义dynamic mapping策略</h4><h6 id="1、定制dynamic策略"><a href="#1、定制dynamic策略" class="headerlink" title="1、定制dynamic策略"></a>1、定制dynamic策略</h6><p> true：遇到陌生字段，就进行dynamic mapping<br>false：遇到陌生字段，就忽略<br>strict：遇到陌生字段，就报错</p>
<p>PUT /my_index<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “dynamic”: “strict”,  // 设置属性<br>​      “properties”: {<br>​        “title”: {<br>​          “type”: “text”<br>​        },<br>​        “address”: {<br>​          “type”: “object”,<br>​          “dynamic”: “true”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>设置和类型不同的field 时</p>
<p>PUT /my_index/my_type/1<br>{<br>  “title”: “my article”,<br>  “content”: “this is my article”,<br>  “address”: {<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  }<br>}</p>
<p>会报以下错误:</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “strict_dynamic_mapping_exception”,<br>​        “reason”: “mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed”<br>​      }<br>​    ],<br>​    “type”: “strict_dynamic_mapping_exception”,<br>​    “reason”: “mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed”<br>  },<br>  “status”: 400<br>}</p>
<p>增减一条数据:</p>
<p>PUT /my_index/my_type/1<br>{<br>  “title”: “my article”,<br>  “address”: {<br>​    “province”: “guangdong”,<br>​    “city”: “guangzhou”<br>  }<br>}</p>
<p>查看这个</p>
<p>GET /my_index/_mapping/my_type</p>
<p>{<br>  “my_index”: {<br>​    “mappings”: {<br>​      “my_type”: {<br>​        “dynamic”: “strict”,<br>​        “properties”: {<br>​          “address”: {<br>​            “dynamic”: “true”,<br>​            “properties”: {<br>​              “city”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              },<br>​              “province”: {<br>​                “type”: “text”,<br>​                “fields”: {<br>​                  “keyword”: {<br>​                    “type”: “keyword”,<br>​                    “ignore_above”: 256<br>​                  }<br>​                }<br>​              }<br>​            }<br>​          },<br>​          “title”: {<br>​            “type”: “text”<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<h6 id="2、定制dynamic-mapping策略"><a href="#2、定制dynamic-mapping策略" class="headerlink" title="2、定制dynamic mapping策略"></a>2、定制dynamic mapping策略</h6><p>（1）date_detection</p>
<p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p>
<p>PUT /my_index/_mapping/my_type<br>{<br>​    “date_detection”: false<br>}</p>
<p>（2）定制自己的dynamic mapping template（type level）</p>
<p>PUT /my_index<br>{<br>​    “mappings”: {<br>​        “my_type”: {<br>​            “dynamic_templates”: [<br>​                { “en”: {<br>​                      “match”:              “*_en”,<br>​                      “match_mapping_type”: “string”,<br>​                      “mapping”: {<br>​                          “type”:           “string”,<br>​                          “analyzer”:       “english”<br>​                      }<br>​                }}<br>​            ]<br>}}}</p>
<p>PUT /my_index/my_type/1<br>{<br>  “title”: “this is my first article”<br>}</p>
<p>PUT /my_index/my_type/2<br>{<br>  “title_en”: “this is my first article”<br>}</p>
<p>title没有匹配到任何的dynamic模板，默认就是standard分词器，不会过滤停用词，is会进入倒排索引，用is来搜索是可以搜索到的<br>title_en匹配到了dynamic模板，就是english分词器，会过滤停用词，is这种停用词就会被过滤掉，用is来搜索就搜索不到了</p>
<p>（3）定制自己的default mapping template（index level）</p>
<p>PUT /my_index<br>{<br>​    “mappings”: {<br>​        “<em>default</em>“: {<br>​            “_all”: { “enabled”:  false }<br>​        },<br>​        “blog”: {<br>​            “_all”: { “enabled”:  true  }<br>​        }<br>​    }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping root object深入剖析</title>
    <url>/2020/ck91i43ne005mssta6w6e65qn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mapping-root-object深入剖析"><a href="#mapping-root-object深入剖析" class="headerlink" title="mapping root object深入剖析"></a>mapping root object深入剖析</h4><h6 id="1、root-object"><a href="#1、root-object" class="headerlink" title="1、root object"></a>1、root object</h6><p>就是某个type对应的mapping json，包括了properties，metadata（_id，_source，_type），settings（analyzer），其他settings（比如include_in_all）</p>
<p>PUT /my_index<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {}<br>​    }<br>  }<br>}</p>
<h6 id="2、properties"><a href="#2、properties" class="headerlink" title="2、properties"></a>2、properties</h6><p>type，index，analyzer</p>
<p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “title”: {<br>​      “type”: “text”<br>​    }<br>  }<br>}</p>
<h6 id="3、-source"><a href="#3、-source" class="headerlink" title="3、_source"></a>3、_source</h6><p>好处</p>
<p>（1）查询的时候，直接可以拿到完整的document，不需要先拿document id，再发送一次请求拿document<br>（2）partial update基于_source实现<br>（3）reindex时，直接基于_source实现，不需要从数据库（或者其他外部存储）查询数据再修改<br>（4）可以基于_source定制返回field<br>（5）debug query更容易，因为可以直接看到_source</p>
<p>如果不需要上述功能，可以禁用_source</p>
<p>禁用语法:</p>
<p>PUT /my_index/_mapping/my_type2<br>{<br>  “_source”: {“enabled”: false}<br>}</p>
<h6 id="4、-all"><a href="#4、-all" class="headerlink" title="4、_all"></a>4、_all</h6><p>将所有field打包在一起，作为一个_all field，建立索引。没指定任何 field 进行搜索时，就是使用_all field在搜索。</p>
<p>PUT /my_index/_mapping/my_type3<br>{<br>  “_all”: {“enabled”: false}<br>}</p>
<p>也可以在field级别设置include_in_all field，设置是否要将field的值包含在_all field中</p>
<p>PUT /my_index/_mapping/my_type4<br>{<br>  “properties”: {<br>​    “my_field”: {<br>​      “type”: “text”,<br>​      “include_in_all”: false<br>​    }<br>  }<br>}</p>
<h6 id="5、标识性metadata"><a href="#5、标识性metadata" class="headerlink" title="5、标识性metadata"></a>5、标识性metadata</h6><p>_index，_type，_id</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>倒排索引组成结构以及其索引不可变原因</title>
    <url>/2020/ck91i43nf005pssta724xcv6s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="倒排索引组成结构以及其索引不可变原因"><a href="#倒排索引组成结构以及其索引不可变原因" class="headerlink" title="倒排索引组成结构以及其索引不可变原因"></a>倒排索引组成结构以及其索引不可变原因</h4><p>倒排索引，是适合用于进行搜索的</p>
<p>倒排索引的结构</p>
<p>（1）包含这个关键词的document list<br>（2）包含这个关键词的所有document的数量：IDF（inverse document frequency）<br>（3）这个关键词在每个document中出现的次数：TF（term frequency）<br>（4）这个关键词在这个document中的次序<br>（5）每个document的长度：length norm<br>（6）包含这个关键词的所有document的平均长度</p>
<p>倒排索引不可变的好处</p>
<p>（1）不需要锁，提升并发能力，避免锁的问题<br>（2）数据不变，一直保存在os cache中，只要cache内存足够<br>（3）filter cache一直驻留在内存，因为数据不变<br>（4）可以压缩，节省cpu和io开销</p>
<p>倒排索引不可变的坏处：每次都要重新构建整个索引</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scoll+bulk+索引别名实现零停机重建索引</title>
    <url>/2020/ck91i43ng005ssstaeitq3dx9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于scoll-bulk-索引别名实现零停机重建索引"><a href="#基于scoll-bulk-索引别名实现零停机重建索引" class="headerlink" title="基于scoll+bulk+索引别名实现零停机重建索引"></a>基于scoll+bulk+索引别名实现零停机重建索引</h4><h6 id="1、重建索引"><a href="#1、重建索引" class="headerlink" title="1、重建索引"></a>1、重建索引</h6><p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中</p>
<p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可</p>
<p>（1）一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2017-01-01这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的</p>
<p>PUT /my_index/my_type/3<br>{<br>  “title”: “2017-01-03”<br>}</p>
<p>此时该index的类型映射为 date</p>
<p>{<br>  “my_index”: {<br>​    “mappings”: {<br>​      “my_type”: {<br>​        “properties”: {<br>​          “title”: {<br>​            “type”: “date”<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>（2）当后期向索引中加入string类型的title值的时候，就会报错</p>
<p>PUT /my_index/my_type/4<br>{<br>  “title”: “my first article”<br>}</p>
<p>此时会报错</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “mapper_parsing_exception”,<br>​        “reason”: “failed to parse [title]”<br>​      }<br>​    ],<br>​    “type”: “mapper_parsing_exception”,<br>​    “reason”: “failed to parse [title]”,<br>​    “caused_by”: {<br>​      “type”: “illegal_argument_exception”,<br>​      “reason”: “Invalid format: &quot;my first article&quot;“<br>​    }<br>  },<br>  “status”: 400<br>}</p>
<p>（3）如果此时想修改title的类型，是不可能的</p>
<p>PUT /my_index/_mapping/my_type<br>{<br>  “properties”: {<br>​    “title”: {<br>​      “type”: “text”<br>​    }<br>  }<br>}</p>
<p>{<br>  “error”: {<br>​    “root_cause”: [<br>​      {<br>​        “type”: “illegal_argument_exception”,<br>​        “reason”: “mapper [title] of different type, current_type [date], merged_type [text]”<br>​      }<br>​    ],<br>​    “type”: “illegal_argument_exception”,<br>​    “reason”: “mapper [title] of different type, current_type [date], merged_type [text]”<br>  },<br>  “status”: 400<br>}</p>
<p>（4）此时，唯一的办法，就是进行reindex，也就是说，重新建立一个索引，将旧索引的数据查询出来，再导入新索引</p>
<p>（5）如果说旧索引的名字，是old_index，新索引的名字是new_index，终端java应用，已经在使用old_index在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低</p>
<p>（6）所以说，给java应用一个别名，这个别名是指向旧索引的，java应用先用着，java应用先用goods_index alias来操作，此时实际指向的是旧的my_index</p>
<p>PUT /my_index/_alias/goods_index</p>
<p>（7）新建一个index，调整其title的类型为string</p>
<p>PUT /my_index_new<br>{<br>  “mappings”: {<br>​    “my_type”: {<br>​      “properties”: {<br>​        “title”: {<br>​          “type”: “text”<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>（8）使用scroll api将数据批量查询出来</p>
<p>GET /my_index/_search?scroll=1m<br>{<br>​    “query”: {<br>​        “match_all”: {}<br>​    },<br>​    “sort”: [“_doc”],<br>​    “size”:  1<br>}</p>
<p>{<br>  “_scroll_id”: “DnF1ZXJ5VGhlbkZldGNoBQAAAAAAADpAFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6QRY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAAOkIWNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAADpDFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6RBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3”,<br>  “took”: 1,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 3,<br>​    “max_score”: null,<br>​    “hits”: [<br>​      {<br>​        “_index”: “my_index”,<br>​        “_type”: “my_type”,<br>​        “_id”: “2”,<br>​        “_score”: null,<br>​        “_source”: {<br>​          “title”: “2017-01-02”<br>​        },<br>​        “sort”: [<br>​          0<br>​        ]<br>​      }<br>​    ]<br>  }<br>}</p>
<p>（9）采用bulk api将scoll查出来的一批数据，批量写入新索引</p>
<p>POST /_bulk<br>{ “index”:  { “_index”: “my_index_new”, “_type”: “my_type”, “_id”: “2” }}<br>{ “title”:    “2017-01-02” }</p>
<p>（10）反复循环多次，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引</p>
<p>（11）将goods_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零提交，高可用</p>
<p>POST /_aliases<br>{<br>​    “actions”: [<br>​        { “remove”: { “index”: “my_index”, “alias”: “goods_index” }},<br>​        { “add”:    { “index”: “my_index_new”, “alias”: “goods_index” }}<br>​    ]<br>}</p>
<p>（12）直接通过goods_index别名来查询，是否ok</p>
<p>GET /goods_index/my_type/_search</p>
<h6 id="2、基于alias对client透明切换index"><a href="#2、基于alias对client透明切换index" class="headerlink" title="2、基于alias对client透明切换index"></a>2、基于alias对client透明切换index</h6><p>PUT /my_index_v1/_alias/my_index</p>
<p>client对my_index进行操作</p>
<p>reindex操作，完成之后，切换v1到v2</p>
<p>POST /_aliases<br>{<br>​    “actions”: [<br>​        { “remove”: { “index”: “my_index_v1”, “alias”: “my_index” }},<br>​        { “add”:    { “index”: “my_index_v2”, “alias”: “my_index” }}<br>​    ]<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>优化写入流程实现NRT近实时（filesystem cache，refresh）</title>
    <url>/2020/ck91i43nh005vssta3x6wccc9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="优化写入流程实现NRT近实时（filesystem-cache，refresh）"><a href="#优化写入流程实现NRT近实时（filesystem-cache，refresh）" class="headerlink" title="优化写入流程实现NRT近实时（filesystem cache，refresh）"></a>优化写入流程实现NRT近实时（filesystem cache，refresh）</h4><p>现有流程的问题，每次都必须等待fsync将segment刷入磁盘，才能将segment打开供search使用，这样的话，从一个document写入，到它可以被搜索，可能会超过1分钟！！！这就不是近实时的搜索了！！！主要瓶颈在于fsync实际发生磁盘IO写数据进磁盘，是很耗时的。</p>
<p>写入流程别改进如下：</p>
<p>（1）数据写入buffer<br>（2）每隔一定时间，buffer中的数据被写入segment文件，但是先写入os cache<br>（3）只要segment写入os cache，那就直接打开供search使用，不立即执行commit</p>
<p>数据写入os cache，并被打开供搜索的过程，叫做refresh，默认是每隔1秒refresh一次。也就是说，每隔一秒就会将buffer中的数据写入一个新的index segment file，先写入os cache中。所以，es是近实时的，数据写入到可以被搜索，默认是1秒。</p>
<p>POST /my_index/_refresh，可以手动refresh，一般不需要手动执行，让es自己搞就可以了</p>
<p>比如说，我们现在的时效性要求，比较低，只要求一条数据写入es，一分钟以后才让我们搜索到就可以了，那么就可以调整refresh interval</p>
<p>PUT /my_index<br>{<br>  “settings”: {<br>​    “refresh_interval”: “30s”<br>  }<br>}</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/9DvuSHDWyeA.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>剖析document写入原理（buffer，segment，commit）</title>
    <url>/2020/ck91i43ni005yssta4o2d74dj/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="剖析document写入原理（buffer，segment，commit）"><a href="#剖析document写入原理（buffer，segment，commit）" class="headerlink" title="剖析document写入原理（buffer，segment，commit）"></a>剖析document写入原理（buffer，segment，commit）</h4><p>（1）数据写入buffer<br>（2）commit point<br>（3）buffer中的数据写入新的index segment<br>（4）等待在os cache中的index segment被fsync强制刷到磁盘上<br>（5）新的index sgement被打开，供search使用<br>（6）buffer被清空</p>
<p>每次commit point时，会有一个.del文件，标记了哪些segment中的哪些document被标记为deleted了<br>搜索的时候，会依次查询所有的segment，从旧的到新的，比如被修改过的document，在旧的segment中，会标记为deleted，在新的segment中会有其新的数据</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/FMr1GIRdH14.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>实现durability可靠存储（translog，flush）</title>
    <url>/2020/ck91i43ni0061ssta9984e3lx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="实现durability可靠存储（translog，flush）"><a href="#实现durability可靠存储（translog，flush）" class="headerlink" title="实现durability可靠存储（translog，flush）"></a>实现durability可靠存储（translog，flush）</h4><p>再次优化的写入流程</p>
<p>（1）数据写入buffer缓冲和translog日志文件<br>（2）每隔一秒钟，buffer中的数据被写入新的segment file，并进入os cache，此时segment被打开并供search使用<br>（3）buffer被清空<br>（4）重复1~3，新的segment不断添加，buffer不断被清空，而translog中的数据不断累加<br>（5）当translog长度达到一定程度的时候，commit操作发生<br>  （5-1）buffer中的所有数据写入一个新的segment，并写入os cache，打开供使用<br>  （5-2）buffer被清空<br>  （5-3）一个commit ponit被写入磁盘，标明了所有的index segment<br>  （5-4）filesystem cache中的所有index segment file缓存数据，被fsync强行刷到磁盘上<br>  （5-5）现有的translog被清空，创建一个新的translog</p>
<p>基于translog和commit point，如何进行数据恢复</p>
<p>fsync+清空translog，就是flush，默认每隔30分钟flush一次，或者当translog过大的时候，也会触发flush操作</p>
<p>POST /my_index/_flush，一般来说别手动flush，让ES自动执行就可以了</p>
<p>translog，每隔5秒被fsync一次到磁盘上。在一次增删改操作之后，当fsync在primary shard和replica shard都成功之后，那次增删改操作才会成功</p>
<p>但是这种在一次增删改时强行fsync translog可能会导致部分操作比较耗时，也可以允许部分数据丢失，设置异步fsync translog</p>
<p>PUT /my_index/_settings<br>{<br>​    “index.translog.durability”: “async”,<br>​    “index.translog.sync_interval”: “5s”<br>}</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/fdnQ4UZNY3M.png" alt=""></p>
<p>终极版本:</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/ITIUgWavU08.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>写入流程实现海量磁盘文件合并（segment merge，optimize）</title>
    <url>/2020/ck91i43nj0064sstaedi2cs9a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写入流程实现海量磁盘文件合并（segment-merge，optimize）"><a href="#写入流程实现海量磁盘文件合并（segment-merge，optimize）" class="headerlink" title="写入流程实现海量磁盘文件合并（segment merge，optimize）"></a>写入流程实现海量磁盘文件合并（segment merge，optimize）</h4><p>每秒一个segment file，文件过多，而且每次search都要搜索所有的segment，很耗时</p>
<p>默认会在后台执行segment merge操作，在merge的时候，被标记为deleted的document也会被彻底物理删除</p>
<p>每次merge操作的执行流程</p>
<p>（1）选择一些有相似大小的segment，merge成一个大的segment<br>（2）将新的segment flush到磁盘上去<br>（3）写一个新的commit point，包括了新的segment，并且排除旧的那些segment<br>（4）将新的segment打开供搜索<br>（5）将旧的segment删除</p>
<p>POST /my_index/_optimize?max_num_segments=1，尽量不要手动执行，让它自动默认执行就可以了</p>
<p><img src="https://guanyuoss.oss-cn-qingdao.aliyuncs.com/prod/work_order/ynUf-eiQ8O8.png" alt=""></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java实现员工信息的增删改查</title>
    <url>/2020/ck91i43nk0067ssta85hkddyv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java实现员工信息的增删改查"><a href="#基于Java实现员工信息的增删改查" class="headerlink" title="基于Java实现员工信息的增删改查"></a>基于Java实现员工信息的增删改查</h4><h5 id="1、maven依赖"><a href="#1、maven依赖" class="headerlink" title="1、maven依赖"></a>1、maven依赖</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>创建log4j2的配置文件</p>
<p>log4j2.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">appender.console.type = Console</span><br><span class="line">appender.console.name = console</span><br><span class="line">appender.console.layout.type = PatternLayout</span><br><span class="line"></span><br><span class="line">rootLogger.level = info</span><br><span class="line">rootLogger.appenderRef.console.ref = console</span><br></pre></td></tr></table></figure>



<h5 id="2、构建client"><a href="#2、构建client" class="headerlink" title="2、构建client"></a>2、构建client</h5><p>Settings settings = Settings.builder()<br>​        .put(“cluster.name”, “myClusterName”).build();<br>TransportClient client = new PreBuiltTransportClient(settings);</p>
<p>TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)<br>​        .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(“host1”), 9300))<br>​        .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(“host2”), 9300));</p>
<p>client.close();</p>
<h5 id="3、创建document"><a href="#3、创建document" class="headerlink" title="3、创建document"></a>3、创建document</h5><p>IndexResponse response = client.prepareIndex(“index”, “type”, “1”)<br>​        .setSource(jsonBuilder()<br>​                    .startObject()<br>​                        .field(“user”, “kimchy”)<br>​                        .field(“postDate”, new Date())<br>​                        .field(“message”, “trying out Elasticsearch”)<br>​                    .endObject()<br>​                  )<br>​        .get();</p>
<h5 id="4、查询document"><a href="#4、查询document" class="headerlink" title="4、查询document"></a>4、查询document</h5><p>GetResponse response = client.prepareGet(“index”, “type”, “1”).get();</p>
<h5 id="5、修改document"><a href="#5、修改document" class="headerlink" title="5、修改document"></a>5、修改document</h5><p>client.prepareUpdate(“index”, “type”, “1”)<br>​        .setDoc(jsonBuilder()<br>​            .startObject()<br>​                .field(“gender”, “male”)<br>​            .endObject())<br>​        .get();</p>
<h5 id="6、删除document"><a href="#6、删除document" class="headerlink" title="6、删除document"></a>6、删除document</h5><p>DeleteResponse response = client.prepareDelete(“index”, “type”, “1”).get();</p>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工增删改查的应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeCRUDApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 先构建client</span></span><br><span class="line">		Settings settings = Settings.builder()</span><br><span class="line">				.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">				.build();</span><br><span class="line">		</span><br><span class="line">		TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">				.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>));</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		createEmployee(client); </span></span><br><span class="line"><span class="comment">//		getEmployee(client);</span></span><br><span class="line"><span class="comment">//		updateEmployee(client); </span></span><br><span class="line"><span class="comment">//		deleteEmployee(client); </span></span><br><span class="line">		</span><br><span class="line">		client.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建员工信息（创建一个document）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		IndexResponse response = client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>)</span><br><span class="line">				.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">						.startObject()</span><br><span class="line">							.field(<span class="string">"name"</span>, <span class="string">"jack"</span>)</span><br><span class="line">							.field(<span class="string">"age"</span>, <span class="number">27</span>)</span><br><span class="line">							.field(<span class="string">"position"</span>, <span class="string">"technique"</span>)</span><br><span class="line">							.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">							.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">							.field(<span class="string">"salary"</span>, <span class="number">10000</span>)</span><br><span class="line">						.endObject())</span><br><span class="line">				.get();</span><br><span class="line">		System.out.println(response.getResult()); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取员工信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		GetResponse response = client.prepareGet(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">		System.out.println(response.getSourceAsString()); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 修改员工信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		UpdateResponse response = client.prepareUpdate(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>) </span><br><span class="line">				.setDoc(XContentFactory.jsonBuilder()</span><br><span class="line">							.startObject()</span><br><span class="line">								.field(<span class="string">"position"</span>, <span class="string">"technique manager"</span>)</span><br><span class="line">							.endObject())</span><br><span class="line">				.get();</span><br><span class="line">		System.out.println(response.getResult());  </span><br><span class="line"> 	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除 员工信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		DeleteResponse response = client.prepareDelete(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">		System.out.println(response.getResult());  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java对员工信息进行聚合分析</title>
    <url>/2020/ck91i43nl006assta6097blrt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java对员工信息进行聚合分析"><a href="#基于Java对员工信息进行聚合分析" class="headerlink" title="基于Java对员工信息进行聚合分析"></a>基于Java对员工信息进行聚合分析</h4><p>API 语法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchResponse sr = node.client().prepareSearch()</span><br><span class="line">    .addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"by_country"</span>).field(<span class="string">"country"</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.dateHistogram(<span class="string">"by_year"</span>)</span><br><span class="line">            .field(<span class="string">"dateOfBirth"</span>)</span><br><span class="line">            .dateHistogramInterval(DateHistogramInterval.YEAR)</span><br><span class="line">            .subAggregation(AggregationBuilders.avg(<span class="string">"avg_children"</span>).field(<span class="string">"children"</span>))</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    .execute().actionGet();</span><br></pre></td></tr></table></figure>



<p>我们先给个需求：</p>
<p>（1）首先按照country国家来进行分组<br>（2）然后在每个country分组内，再按照入职年限进行分组<br>（3）最后计算每个分组内的平均薪资</p>
<p>PUT /company<br>{<br>  “mappings”: {<br>​      “employee”: {<br>​        “properties”: {<br>​          “age”: {<br>​            “type”: “long”<br>​          },<br>​          “country”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            },<br>​            “fielddata”: true<br>​          },<br>​          “join_date”: {<br>​            “type”: “date”<br>​          },<br>​          “name”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          },<br>​          “position”: {<br>​            “type”: “text”,<br>​            “fields”: {<br>​              “keyword”: {<br>​                “type”: “keyword”,<br>​                “ignore_above”: 256<br>​              }<br>​            }<br>​          },<br>​          “salary”: {<br>​            “type”: “long”<br>​          }<br>​        }<br>​      }<br>​    }<br>}</p>
<p>GET /company/employee/_search<br>{<br>  “size”: 0,<br>  “aggs”: {<br>​    “group_by_country”: {<br>​      “terms”: {<br>​        “field”: “country”<br>​      },<br>​      “aggs”: {<br>​        “group_by_join_date”: {<br>​          “date_histogram”: {<br>​            “field”: “join_date”,<br>​            “interval”: “year”<br>​          },<br>​          “aggs”: {<br>​            “avg_salary”: {<br>​              “avg”: {<br>​                “field”: “salary”<br>​              }<br>​            }<br>​          }<br>​        }<br>​      }<br>​    }<br>  }<br>}</p>
<p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	Map&lt;String, Aggregation&gt; aggrMap = searchResponse.getAggregations().asMap();</span><br><span class="line">		StringTerms groupByCountry = (StringTerms) aggrMap.get(<span class="string">"group_by_country"</span>);</span><br><span class="line">		Iterator&lt;Bucket&gt; groupByCountryBucketIterator = groupByCountry.getBuckets().iterator();</span><br><span class="line">	<span class="keyword">while</span>(groupByCountryBucketIterator.hasNext()) &#123;</span><br><span class="line">		Bucket groupByCountryBucket = groupByCountryBucketIterator.next();</span><br><span class="line">		</span><br><span class="line">		System.out.println(groupByCountryBucket.getKey() + <span class="string">"\t"</span> + groupByCountryBucket.getDocCount()); </span><br><span class="line">		</span><br><span class="line">		Histogram groupByJoinDate = (Histogram) groupByCountryBucket.getAggregations().asMap().get(<span class="string">"group_by_join_date"</span>); </span><br><span class="line">		Iterator&lt;org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket&gt; groupByJoinDateBucketIterator = groupByJoinDate.getBuckets().iterator();</span><br><span class="line">		 </span><br><span class="line">		<span class="keyword">while</span>(groupByJoinDateBucketIterator.hasNext()) &#123;</span><br><span class="line">			org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket groupByJoinDateBucket = groupByJoinDateBucketIterator.next();</span><br><span class="line">			</span><br><span class="line">			System.out.println(groupByJoinDateBucket.getKey() + <span class="string">"\t"</span> + groupByJoinDateBucket.getDocCount()); </span><br><span class="line">			</span><br><span class="line">			Avg avgSalary = (Avg) groupByJoinDateBucket.getAggregations().asMap().get(<span class="string">"avg_salary"</span>);</span><br><span class="line">			System.out.println(avgSalary.getValue()); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>代码示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregation;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.Histogram;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.StringTerms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.avg.Avg;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工聚合分析应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeAggrApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Settings settings = Settings.builder()</span><br><span class="line">				.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">				.build();</span><br><span class="line">		</span><br><span class="line">		TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">				.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>)); </span><br><span class="line">		</span><br><span class="line">		SearchResponse searchResponse = client.prepareSearch(<span class="string">"company"</span>) </span><br><span class="line">				.addAggregation(AggregationBuilders.terms(<span class="string">"group_by_country"</span>).field(<span class="string">"country"</span>)</span><br><span class="line">						.subAggregation(AggregationBuilders</span><br><span class="line">								.dateHistogram(<span class="string">"group_by_join_date"</span>)</span><br><span class="line">								.field(<span class="string">"join_date"</span>)</span><br><span class="line">								.dateHistogramInterval(DateHistogramInterval.YEAR)</span><br><span class="line">								.subAggregation(AggregationBuilders.avg(<span class="string">"avg_salary"</span>).field(<span class="string">"salary"</span>)))</span><br><span class="line">				)</span><br><span class="line">				.execute().actionGet();</span><br><span class="line">		</span><br><span class="line">		Map&lt;String, Aggregation&gt; aggrMap = searchResponse.getAggregations().asMap();</span><br><span class="line">		</span><br><span class="line">		StringTerms groupByCountry = (StringTerms) aggrMap.get(<span class="string">"group_by_country"</span>);</span><br><span class="line">		Iterator&lt;Bucket&gt; groupByCountryBucketIterator = groupByCountry.getBuckets().iterator();</span><br><span class="line">		<span class="keyword">while</span>(groupByCountryBucketIterator.hasNext()) &#123;</span><br><span class="line">			Bucket groupByCountryBucket = groupByCountryBucketIterator.next();</span><br><span class="line">			System.out.println(groupByCountryBucket.getKey() + <span class="string">":"</span> + groupByCountryBucket.getDocCount()); </span><br><span class="line">		</span><br><span class="line">			Histogram groupByJoinDate = (Histogram) groupByCountryBucket.getAggregations().asMap().get(<span class="string">"group_by_join_date"</span>);</span><br><span class="line">			Iterator&lt;org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket&gt; groupByJoinDateBucketIterator = groupByJoinDate.getBuckets().iterator();</span><br><span class="line">			<span class="keyword">while</span>(groupByJoinDateBucketIterator.hasNext()) &#123;</span><br><span class="line">				org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket groupByJoinDateBucket = groupByJoinDateBucketIterator.next();</span><br><span class="line">				System.out.println(groupByJoinDateBucket.getKey() + <span class="string">":"</span> +groupByJoinDateBucket.getDocCount()); </span><br><span class="line">			</span><br><span class="line">				Avg avg = (Avg) groupByJoinDateBucket.getAggregations().asMap().get(<span class="string">"avg_salary"</span>); </span><br><span class="line">				System.out.println(avg.getValue()); </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		client.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/ck91i43nm006dsstad8zvbc07/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于Java对员工信息进行复杂的搜索操作</title>
    <url>/2020/ck91i43nn006gssta97ulhf49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基于Java对员工信息进行复杂的搜索操作"><a href="#基于Java对员工信息进行复杂的搜索操作" class="headerlink" title="基于Java对员工信息进行复杂的搜索操作"></a>基于Java对员工信息进行复杂的搜索操作</h4><p>API:</p>
<p>SearchResponse response = client.prepareSearch(“index1”, “index2”)<br>​        .setTypes(“type1”, “type2”)<br>​        .setQuery(QueryBuilders.termQuery(“multi”, “test”))                 // Query<br>​        .setPostFilter(QueryBuilders.rangeQuery(“age”).from(12).to(18))     // Filter<br>​        .setFrom(0).setSize(60)<br>​        .get();</p>
<p>需求：</p>
<p>（1）搜索职位中包含technique的员工<br>（2）同时要求age在30到40岁之间<br>（3）分页查询，查找第一页</p>
<p>GET /company/employee/_search<br>{<br>  “query”: {<br>​    “bool”: {<br>​      “must”: [<br>​        {<br>​          “match”: {<br>​            “position”: “technique”<br>​          }<br>​        }<br>​      ],<br>​      “filter”: {<br>​        “range”: {<br>​          “age”: {<br>​            “gte”: 30,<br>​            “lte”: 40<br>​          }<br>​        }<br>​      }<br>​    }<br>  },<br>  “from”: 0,<br>  “size”: 1<br>}</p>
<p>刚才一边运行创建document，一边搜索什么都没搜索到？？？？</p>
<p>近实时！！！</p>
<p>默认是1秒以后，写入es的数据，才能被搜索到。很明显刚才，写入数据不到一秒，所以就搜索不到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工搜索应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSearchApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"resource"</span> &#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Settings settings = Settings.builder()</span><br><span class="line">				.put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">				.build();</span><br><span class="line">		</span><br><span class="line">		TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">				.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>), <span class="number">9300</span>)); </span><br><span class="line">		</span><br><span class="line"><span class="comment">//		prepareData(client);</span></span><br><span class="line">		executeSearch(client);</span><br><span class="line">		</span><br><span class="line">		client.close();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行搜索操作</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeSearch</span><span class="params">(TransportClient client)</span> </span>&#123;</span><br><span class="line">		SearchResponse response = client.prepareSearch(<span class="string">"company"</span>)</span><br><span class="line">				.setTypes(<span class="string">"employee"</span>)</span><br><span class="line">				.setQuery(QueryBuilders.matchQuery(<span class="string">"position"</span>, <span class="string">"technique"</span>))</span><br><span class="line">				.setPostFilter(QueryBuilders.rangeQuery(<span class="string">"age"</span>).from(<span class="number">30</span>).to(<span class="number">40</span>))</span><br><span class="line">				.setFrom(<span class="number">0</span>).setSize(<span class="number">1</span>)</span><br><span class="line">				.get();</span><br><span class="line">		</span><br><span class="line">		SearchHit[] searchHits = response.getHits().getHits();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; searchHits.length; i++) &#123;</span><br><span class="line">			System.out.println(searchHits[i].getSourceAsString()); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 准备数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">(TransportClient client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"1"</span>) </span><br><span class="line">				.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">						.startObject()</span><br><span class="line">							.field(<span class="string">"name"</span>, <span class="string">"jack"</span>)</span><br><span class="line">							.field(<span class="string">"age"</span>, <span class="number">27</span>)</span><br><span class="line">							.field(<span class="string">"position"</span>, <span class="string">"technique software"</span>)</span><br><span class="line">							.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">							.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">							.field(<span class="string">"salary"</span>, <span class="number">10000</span>)</span><br><span class="line">						.endObject())</span><br><span class="line">				.get();</span><br><span class="line">		</span><br><span class="line">		client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"2"</span>) </span><br><span class="line">				.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">						.startObject()</span><br><span class="line">							.field(<span class="string">"name"</span>, <span class="string">"marry"</span>)</span><br><span class="line">							.field(<span class="string">"age"</span>, <span class="number">35</span>)</span><br><span class="line">							.field(<span class="string">"position"</span>, <span class="string">"technique manager"</span>)</span><br><span class="line">							.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">							.field(<span class="string">"join_date"</span>, <span class="string">"2017-01-01"</span>)</span><br><span class="line">							.field(<span class="string">"salary"</span>, <span class="number">12000</span>)</span><br><span class="line">						.endObject())</span><br><span class="line">				.get();</span><br><span class="line">		</span><br><span class="line">		client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"3"</span>) </span><br><span class="line">		.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">				.startObject()</span><br><span class="line">					.field(<span class="string">"name"</span>, <span class="string">"tom"</span>)</span><br><span class="line">					.field(<span class="string">"age"</span>, <span class="number">32</span>)</span><br><span class="line">					.field(<span class="string">"position"</span>, <span class="string">"senior technique software"</span>)</span><br><span class="line">					.field(<span class="string">"country"</span>, <span class="string">"china"</span>)</span><br><span class="line">					.field(<span class="string">"join_date"</span>, <span class="string">"2016-01-01"</span>)</span><br><span class="line">					.field(<span class="string">"salary"</span>, <span class="number">11000</span>)</span><br><span class="line">				.endObject())</span><br><span class="line">		.get();</span><br><span class="line">		</span><br><span class="line">		client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"4"</span>) </span><br><span class="line">		.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">				.startObject()</span><br><span class="line">					.field(<span class="string">"name"</span>, <span class="string">"jen"</span>)</span><br><span class="line">					.field(<span class="string">"age"</span>, <span class="number">25</span>)</span><br><span class="line">					.field(<span class="string">"position"</span>, <span class="string">"junior finance"</span>)</span><br><span class="line">					.field(<span class="string">"country"</span>, <span class="string">"usa"</span>)</span><br><span class="line">					.field(<span class="string">"join_date"</span>, <span class="string">"2016-01-01"</span>)</span><br><span class="line">					.field(<span class="string">"salary"</span>, <span class="number">7000</span>)</span><br><span class="line">				.endObject())</span><br><span class="line">		.get();</span><br><span class="line">		</span><br><span class="line">		client.prepareIndex(<span class="string">"company"</span>, <span class="string">"employee"</span>, <span class="string">"5"</span>) </span><br><span class="line">		.setSource(XContentFactory.jsonBuilder()</span><br><span class="line">				.startObject()</span><br><span class="line">					.field(<span class="string">"name"</span>, <span class="string">"mike"</span>)</span><br><span class="line">					.field(<span class="string">"age"</span>, <span class="number">37</span>)</span><br><span class="line">					.field(<span class="string">"position"</span>, <span class="string">"finance manager"</span>)</span><br><span class="line">					.field(<span class="string">"country"</span>, <span class="string">"usa"</span>)</span><br><span class="line">					.field(<span class="string">"join_date"</span>, <span class="string">"2015-01-01"</span>)</span><br><span class="line">					.field(<span class="string">"salary"</span>, <span class="number">15000</span>)</span><br><span class="line">				.endObject())</span><br><span class="line">		.get();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>集群管理，以及文档的CRUD操作</title>
    <url>/2019/ck91i43nu0072sstah4j493v6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="集群管理，以及文档的CRUD操作"><a href="#集群管理，以及文档的CRUD操作" class="headerlink" title="集群管理，以及文档的CRUD操作"></a>集群管理，以及文档的CRUD操作</h2><p>1.document数据格式</p>
<p>面向文档的搜索分析引擎</p>
<p>（1）应用系统的数据结构都是面向对象的，复杂的<br>（2）对象数据存储到数据库中，只能拆解开来，变为扁平的多张表，每次查询的时候还得还原回对象格式，相当麻烦<br>（3）ES是面向文档的，文档中存储的数据结构，与面向对象的数据结构是一样的，基于这种文档数据结构，es可以提供复杂的索引，全文检索，分析聚合等功能<br>（4）es的document用json数据格式来表达</p>
<h2 id="eg-java-对象的定义"><a href="#eg-java-对象的定义" class="headerlink" title="eg: java 对象的定义"></a>eg: java 对象的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> EmployeeInfo info;</span><br><span class="line">  <span class="keyword">private</span> Date joinDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeInfo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String bio; <span class="comment">// 性格</span></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> String[] interests; <span class="comment">// 兴趣爱好</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EmployeeInfo info = <span class="keyword">new</span> EmployeeInfo();</span><br><span class="line">info.setBio(<span class="string">"curious and modest"</span>);</span><br><span class="line">info.setAge(<span class="number">30</span>);</span><br><span class="line">info.setInterests(<span class="keyword">new</span> String[]&#123;<span class="string">"bike"</span>, <span class="string">"climb"</span>&#125;);</span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.setEmail(<span class="string">"zhangsan@sina.com"</span>);</span><br><span class="line">employee.setFirstName(<span class="string">"san"</span>);</span><br><span class="line">employee.setLastName(<span class="string">"zhang"</span>);</span><br><span class="line">employee.setInfo(info);</span><br><span class="line">employee.setJoinDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">employee对象：里面包含了Employee类自己的属性，还有一个EmployeeInfo对象</span><br><span class="line"></span><br><span class="line">两张表：employee表，employee_info表，将employee对象的数据重新拆开来，变成Employee数据和EmployeeInfo数据</span><br><span class="line">employee表：email，first_name，last_name，join_date，<span class="number">4</span>个字段</span><br><span class="line">employee_info表：bio，age，interests，<span class="number">3</span>个字段；此外还有一个外键字段，比如employee_id，关联着employee表</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">ES json数据</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"email"</span>:      <span class="string">"zhangsan@sina.com"</span>,</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"san"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">        <span class="attr">"bio"</span>:         <span class="string">"curious and modest"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:         <span class="number">30</span>,</span><br><span class="line">        <span class="attr">"interests"</span>: [ <span class="string">"bike"</span>, <span class="string">"climb"</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"join_date"</span>: <span class="string">"2017/01/01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是 es的document数据格式和数据库的关系型数据格式的区别</p>
<p>2.简单的集群管理</p>
<p>1&gt;.快速检查集群的健康状况</p>
<p> es提供了一套 cat api，可以查看es中各种各样的数据</p>
<p>GET /_cat/health?v   </p>
<p>？v 显示列头</p>
<table>
<thead>
<tr>
<th>epoch</th>
<th>timestamp</th>
<th>cluster</th>
<th>status</th>
<th>node.total</th>
<th>node.data</th>
<th>shards</th>
<th>pri</th>
<th>relo</th>
<th>init</th>
<th>unassign</th>
<th>pending_tasks max_task_wait_time</th>
<th>active_shards_percent</th>
</tr>
</thead>
<tbody><tr>
<td>1488006741</td>
<td>15:12:21</td>
<td>elasticsearch</td>
<td>yellow</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>-</td>
<td>50.0%</td>
</tr>
</tbody></table>
<p>为什么现在会处于一个yellow状态？</p>
<p>​       我们现在就一个笔记本电脑，就启动了一个es进程，相当于就只有一个node。现在es中有一个index，就是kibana自己内置建立的index。由于默认的配置是给每个index分配5个primary shard和5个replica shard，而且primary shard和replica shard不能在同一台机器上（为了容错）。现在kibana自己建立的index是1个primary shard和1个replica shard。当前就一个node，所以只有1个primary shard被分配了和启动了，但是一个replica shard没有第二台机器去启动。</p>
<p>实验：此时只要启动第二个es进程，就会在es集群中有2个node，然后那1个replica shard就会自动分配过去，然后cluster status就会变成green状态。</p>
<table>
<thead>
<tr>
<th>epoch</th>
<th>timestamp</th>
<th>cluster</th>
<th>status</th>
<th>node.total</th>
<th>node.data</th>
<th>shards</th>
<th>pri</th>
<th>relo</th>
<th>init</th>
<th>unassign</th>
<th>pending_tasks max_task_wait_time</th>
<th>active_shards_percent</th>
</tr>
</thead>
<tbody><tr>
<td>1488006741</td>
<td>15:18:33</td>
<td>elasticsearch</td>
<td>green</td>
<td>2</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>-</td>
<td>100.0%</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>epoch</th>
<th>timestamp</th>
<th>cluster</th>
<th>status</th>
<th>node.total</th>
<th>node.data</th>
<th>shards</th>
<th>pri</th>
<th>relo</th>
<th>init</th>
<th>unassign</th>
<th>pending_tasks max_task_wait_time</th>
<th>active_shards_percent</th>
</tr>
</thead>
<tbody><tr>
<td>1488006741</td>
<td>15:20:16</td>
<td>elasticsearch</td>
<td>yellow</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>-</td>
<td>50.0%</td>
</tr>
</tbody></table>
<p>2&gt;.集群的健康状态分类：</p>
<p>green：每个索引的primary shard和replica shard都是active状态的<br>yellow：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态<br>red：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p>
<p>3.ES的CRUD</p>
<p>1&gt;.创建索引：PUT /test_index?pretty</p>
<p>GET /_cat/indices?v</p>
<p>health status index      uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   test_index XmS9DTAtSkSZSwWhhGEKkQ   5   1          0            0       650b           650b<br>yellow open   .kibana    rUm9n9wMRQCCrRDEhqneBg   1   1          1            0      3.1kb          3.1kb</p>
<p>2&gt;.删除索引：DELETE /test_index?pretty</p>
<p>GET /_cat/indices?v</p>
<p>health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   .kibana rUm9n9wMRQCCrRDEhqneBg   1   1          1            0      3.1kb          3.1kb</p>
<p>3&gt;.新增文档，建立索引</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /index/type/id</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"json数据"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建索引示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /ecommerce/product/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">    <span class="attr">"desc"</span> :  <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">    <span class="attr">"price"</span> :  <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"producer"</span> :      <span class="string">"gaolujie producer"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [ <span class="string">"meibai"</span>, <span class="string">"fangzhu"</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /ecommerce/product/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"jiajieshi yagao"</span>,</span><br><span class="line">    <span class="attr">"desc"</span> :  <span class="string">"youxiao fangzhu"</span>,</span><br><span class="line">    <span class="attr">"price"</span> :  <span class="number">25</span>,</span><br><span class="line">    <span class="attr">"producer"</span> :      <span class="string">"jiajieshi producer"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [ <span class="string">"fangzhu"</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /ecommerce/product/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"zhonghua yagao"</span>,</span><br><span class="line">    <span class="attr">"desc"</span> :  <span class="string">"caoben zhiwu"</span>,</span><br><span class="line">    <span class="attr">"price"</span> :  <span class="number">40</span>,</span><br><span class="line">    <span class="attr">"producer"</span> :      <span class="string">"zhonghua producer"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [ <span class="string">"qingxin"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>es会自动建立index和type，不需要提前创建，而且es默认会对document每个field都建立倒排索引，让其可以被搜索</p>
<p>4&gt;. 检索文档</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /index/type/id</span><br></pre></td></tr></table></figure>

<p>检索示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ecommerce/product/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">    <span class="attr">"desc"</span>: <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"producer"</span>: <span class="string">"gaolujie producer"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [</span><br><span class="line">      <span class="string">"meibai"</span>,</span><br><span class="line">      <span class="string">"fangzhu"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5&gt;.替换文档</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /ecommerce/product/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"jiaqiangban gaolujie yagao"</span>,</span><br><span class="line">    <span class="attr">"desc"</span> :  <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">    <span class="attr">"price"</span> :  <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"producer"</span> :      <span class="string">"gaolujie producer"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [ <span class="string">"meibai"</span>, <span class="string">"fangzhu"</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">替换方式有一个不好，即使必须带上所有的field，才能去进行信息的修改,否则想以下方式会对原始数据进行覆盖</span><br><span class="line">PUT /ecommerce/product/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"jiaqiangban gaolujie yagao"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6&gt;.更新文档</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /ecommerce/product/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"jiaqiangban gaolujie yagao"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7&gt;.删除文档</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /ecommerce/product/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown测试</title>
    <url>/2020/ck91i43nu0073ssta6az03czn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<a id="more"></a>

<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://Shen-Yu.github.com" target="_blank" rel="noopener">本人博客</a> 的链接。</p>
<p><img src="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90" alt=""></p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>

<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre><table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：<br>​        </p>
<ul>
<li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>相关度评分TF&amp;IDF算法</title>
    <url>/2020/ck91i43oa007asstad7ew0ld0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="相关度评分TF-amp-IDF算法"><a href="#相关度评分TF-amp-IDF算法" class="headerlink" title="相关度评分TF&amp;IDF算法"></a>相关度评分TF&amp;IDF算法</h5><h6 id="1、算法介绍"><a href="#1、算法介绍" class="headerlink" title="1、算法介绍"></a>1、算法介绍</h6><p>relevance score算法: 简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度</p>
<p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法</p>
<p>Term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</p>
<p>eg: 搜索请求：hello world</p>
<p>doc1：hello you, and world is very good<br>doc2：hello, how are you</p>
<p>Inverse document frequency：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关</p>
<p>eg: 搜索请求：hello world</p>
<p>doc1：hello, today is very good<br>doc2：hi world, how are you</p>
<p>比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次；world这个单词在所有的document中，一共出现了100次</p>
<p>doc2更相关</p>
<p>Field-length norm：field长度，field越长，相关度越弱</p>
<p>eg : 搜索请求：hello world</p>
<p>doc1：{ “title”: “hello article”, “content”: “babaaba 1万个单词” }<br>doc2：{ “title”: “my article”, “content”: “blablabala 1万个单词，hi world” }</p>
<p>hello world在整个index中出现的次数是一样多的</p>
<p>doc1更相关，title field更短</p>
<h6 id="2、-score是如何被计算出来的"><a href="#2、-score是如何被计算出来的" class="headerlink" title="2、_score是如何被计算出来的"></a>2、_score是如何被计算出来的</h6><p>GET /test_index/test_type/_search?explain<br>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test hello”<br>​    }<br>  }<br>}</p>
<p>{<br>  “took”: 6,<br>  “timed_out”: false,<br>  “_shards”: {<br>​    “total”: 5,<br>​    “successful”: 5,<br>​    “failed”: 0<br>  },<br>  “hits”: {<br>​    “total”: 4,<br>​    “max_score”: 1.595089,<br>​    “hits”: [<br>​      {<br>​        “_shard”: “[test_index][2]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “20”,<br>​        “_score”: 1.595089,<br>​        “_source”: {<br>​          “test_field”: “test hello”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 1.595089,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 1.595089,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.58279467,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.58279467,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                },<br>​                {<br>​                  “value”: 1.0122943,<br>​                  “description”: “weight(test_field:hello in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1.0122943,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 1.2039728,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][2]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “6”,<br>​        “_score”: 0.58279467,<br>​        “_source”: {<br>​          “test_field”: “tes test”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.58279467,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.58279467,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.58279467,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.58279467,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.840795,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.75,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.56,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][3]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “7”,<br>​        “_score”: 0.5565415,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.5565415,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.5565415,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.5565415,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.5565415,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.6931472,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.8029196,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 2.5,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “_type:test_type, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      },<br>​      {<br>​        “_shard”: “[test_index][1]”,<br>​        “_node”: “4onsTYVZTjGvIj9_spWz2w”,<br>​        “_index”: “test_index”,<br>​        “_type”: “test_type”,<br>​        “_id”: “8”,<br>​        “_score”: 0.25316024,<br>​        “_source”: {<br>​          “test_field”: “test client 2”<br>​        },<br>​        “_explanation”: {<br>​          “value”: 0.25316024,<br>​          “description”: “sum of:”,<br>​          “details”: [<br>​            {<br>​              “value”: 0.25316024,<br>​              “description”: “sum of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0.25316024,<br>​                  “description”: “weight(test_field:test in 0) [PerFieldSimilarity], result of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 0.25316024,<br>​                      “description”: “score(doc=0,freq=1.0 = termFreq=1.0\n), product of:”,<br>​                      “details”: [<br>​                        {<br>​                          “value”: 0.2876821,<br>​                          “description”: “idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docFreq”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “docCount”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        },<br>​                        {<br>​                          “value”: 0.88,<br>​                          “description”: “tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:”,<br>​                          “details”: [<br>​                            {<br>​                              “value”: 1,<br>​                              “description”: “termFreq=1.0”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 1.2,<br>​                              “description”: “parameter k1”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 0.75,<br>​                              “description”: “parameter b”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 3,<br>​                              “description”: “avgFieldLength”,<br>​                              “details”: []<br>​                            },<br>​                            {<br>​                              “value”: 4,<br>​                              “description”: “fieldLength”,<br>​                              “details”: []<br>​                            }<br>​                          ]<br>​                        }<br>​                      ]<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            },<br>​            {<br>​              “value”: 0,<br>​              “description”: “match on required clause, product of:”,<br>​              “details”: [<br>​                {<br>​                  “value”: 0,<br>​                  “description”: “# clause”,<br>​                  “details”: []<br>​                },<br>​                {<br>​                  “value”: 1,<br>​                  “description”: “<em>:</em>, product of:”,<br>​                  “details”: [<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “boost”,<br>​                      “details”: []<br>​                    },<br>​                    {<br>​                      “value”: 1,<br>​                      “description”: “queryNorm”,<br>​                      “details”: []<br>​                    }<br>​                  ]<br>​                }<br>​              ]<br>​            }<br>​          ]<br>​        }<br>​      }<br>​    ]<br>  }<br>}</p>
<h6 id="3、分析一个document是如何被匹配上的"><a href="#3、分析一个document是如何被匹配上的" class="headerlink" title="3、分析一个document是如何被匹配上的"></a>3、分析一个document是如何被匹配上的</h6><p>GET /test_index/test_type/6/_explain<br>{<br>  “query”: {<br>​    “match”: {<br>​      “test_field”: “test hello”<br>​    }<br>  }<br>}</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建个人博客</title>
    <url>/2017/ck91i43oc007dssta8qj509bp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>正所谓前人栽树，后人乘凉。</p>
<p>感谢<a href="https://github.com/huxpro" target="_blank" rel="noopener">Huxpro</a>提供的博客模板</p>
<p><a href="http://qiubaiying.top" target="_blank" rel="noopener">我的的博客</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从 Jekyll 到 GitHub Pages 中间踩了许多坑，终于把我的个人博客<a href="http://qiubaiying.top" target="_blank" rel="noopener">BY Blog</a>搭建出来了。。。</p>
<p>本教程针对的是不懂技术又想搭建个人博客的小白，操作简单暴力且快速。当然懂技术那就更好了。</p>
<p>看看看博客的主页样式：</p>
<p><a href="http://qiubaiying.github.io/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/2178672-51a2fe6fbe24d1cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></a></p>
<p>在手机上的布局：</p>
<p><a href="http://qiubaiying.github.io/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/2178672-d58bb45f9faedb70.jpg" alt=""></a></p>
<p>废话不多说了，开始进入正文。</p>
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h3 id="从注册一个Github账号开始"><a href="#从注册一个Github账号开始" class="headerlink" title="从注册一个Github账号开始"></a>从注册一个Github账号开始</h3><p>我采用的搭建博客的方式是使用 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="http://jekyll.com.cn/" target="_blank" rel="noopener">jekyll</a> 的方式。</p>
<p>要使用 GitHub Pages，首先你要注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号，GitHub 是全球最大的同性交友网站(吐槽下程序员~)，你值得拥有。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-e65e5cda50f38cef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="拉取我的博客模板"><a href="#拉取我的博客模板" class="headerlink" title="拉取我的博客模板"></a>拉取我的博客模板</h3><p>注册完成后搜索 <code>qiubaiying.github.io</code> 进入<a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">我的仓库</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-1b234fb8549e58aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击右上角的 <strong>Fork</strong> 将我的仓库拉倒你的账号下</p>
<p>稍等一下，点击刷新，你会看到<strong>Fork</strong>了成功的页面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-b2347768a1f2d993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="修改仓库名"><a href="#修改仓库名" class="headerlink" title="修改仓库名"></a>修改仓库名</h3><p>点击<strong>settings</strong>进入设置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-f47b7e4802de6a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p id = "Rename"></p>
修改仓库名为 `你的Github账号名.github.io`，然后 Rename

<p><img src="http://upload-images.jianshu.io/upload_images/2178672-ca3d843e526cdd5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这时你在在浏览器中输入 <code>你的Github账号名.github.io</code> 例如:<code>baiyingqiu.github.io</code></p>
<p>你将会看到如下界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-96b5db55df9db422.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>说明已经成功一半了😀。。。当然，还需要修改博客的配置才能变成你的博客。</p>
<p>若是出现</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>则需要 <a href="#Rename">检查一下你的仓库名是否正确</a></p>
<h3 id="整个网站结构"><a href="#整个网站结构" class="headerlink" title="整个网站结构"></a>整个网站结构</h3><p>修改Blog前我们来看看Jekyll 网站的基础结构，当然我们的网站比这个复杂。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── _drafts</span><br><span class="line">|   ├── begin-with-the-crazy-ideas.textile</span><br><span class="line">|   └── on-simplicity-in-technology.markdown</span><br><span class="line">├── _includes</span><br><span class="line">|   ├── footer.html</span><br><span class="line">|   └── header.html</span><br><span class="line">├── _layouts</span><br><span class="line">|   ├── default.html</span><br><span class="line">|   └── post.html</span><br><span class="line">├── _posts</span><br><span class="line">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</span><br><span class="line">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</span><br><span class="line">├── _data</span><br><span class="line">|   └── members.yml</span><br><span class="line">├── _site</span><br><span class="line">├── img</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure>

<p>很复杂看不懂是不是，不要紧，你只要记住其中几个OK了</p>
<ul>
<li><code>_config.yml</code> 全局配置文件</li>
<li><code>_posts</code>    放置博客文章的文件夹</li>
<li><code>img</code>    存放图片的文件夹</li>
</ul>
<p>其他的想继续深究可以<a href="http://jekyll.com.cn/docs/structure/" target="_blank" rel="noopener">看这里</a></p>
<h3 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h3><p>来到你的仓库，找到<code>_config.yml</code>文件,这是网站的全局配置文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击修改</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后编辑<code>_config.yml</code>的内容</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>接下来我们来详细说说以下配置文件的内容：</p>
<h4 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site settings</span><br><span class="line">title: You Blog    				  	#你博客的标题</span><br><span class="line">SEOTitle: 你的博客 | You Blog    	 #显示在浏览器上搜索的时候显示的标题</span><br><span class="line">header-img: img&#x2F;post-bg-rwd.jpg  	#显示在首页的背景图片</span><br><span class="line">email: You@gmail.com	</span><br><span class="line">description: &quot;You Blog&quot;  			 #网站介绍</span><br><span class="line">keyword: &quot;BY, BY Blog, 柏荧的博客, qiubaiying, 邱柏荧, iOS, Apple, iPhone&quot; #关键词</span><br><span class="line">url: &quot;https:&#x2F;&#x2F;qiubaiying.github.io&quot;          # 这个就是填写你的博客地址</span><br><span class="line">baseurl: &quot;&quot;      # 这个我们不用填写</span><br></pre></td></tr></table></figure>
<h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar settings</span><br><span class="line">sidebar: true                           # 是否开启侧边栏.</span><br><span class="line">sidebar-about-description: &quot;说点装逼的话。。。&quot;</span><br><span class="line">sidebar-avatar:&#x2F;img&#x2F;avatar-by.JPG      # 你的个人头像 这里你可以改成我在img文件夹中的两张备用照片 img&#x2F;avatar-m 或 avatar-g</span><br></pre></td></tr></table></figure>
<h4 id="社交账号"><a href="#社交账号" class="headerlink" title="社交账号"></a>社交账号</h4><p>展示你的其他社交平台</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-ec775a22f76e2f40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在下面你的社交账号的用户名就可以了，若没有可不用填</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SNS settings</span><br><span class="line">RSS: false</span><br><span class="line">weibo_username:     username</span><br><span class="line">zhihu_username:     username</span><br><span class="line">github_username:    username</span><br><span class="line">facebook_username:  username</span><br><span class="line">jianshu_username:	jianshu_id</span><br></pre></td></tr></table></figure>

<p>新加入了<strong>简书</strong>，<code>jianshu_id</code> 在你打开你的简书主页后的地址如：<code>http://www.jianshu.com/u/e71990ada2fd</code>中，后面这一串数字：<code>e71990ada2fd</code></p>
<h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p>博客中使用的是 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论系统，在 <a href="https://disqus.com/" target="_blank" rel="noopener">官网</a> 注册帐号后，按下面的步骤简单的配置即可：</p>
<p>进入 <a href="https://disqus.com/home/settings/profile/" target="_blank" rel="noopener">设置页面</a> 配置个人信息</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-904ecb30c536c73b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置 Disqus 个人信息"></p>
<p>找到 <strong>Username</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-19d1b9e7d2624bfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Disqus Account"></p>
<p>这个 <strong>Username</strong>  就是我们 <code>_config.yml</code> 中 <code>disqus_username</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Disqus settings（https:&#x2F;&#x2F;disqus.com&#x2F;）</span><br><span class="line">disqus_username: qiubaiying</span><br></pre></td></tr></table></figure>

<blockquote>
<p>很对人反映 Disqus 评论插件加载不出来，因为 Disqus 在国内加载缓慢，所以我新集成了 Gitalk 评论插件（感谢<a href="https://github.com/FeDemo" target="_blank" rel="noopener">@FeDemo</a>的推荐），喜欢折腾的朋友可以看这篇：<a href="http://qiubaiying.top/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">《为博客添加 Gitalk 评论插件》</a>。 我已经在<code>_config.yml</code> 配置就好了，只需要填写参数可以了。</p>
</blockquote>
<h4 id="网站统计"><a href="#网站统计" class="headerlink" title="网站统计"></a>网站统计</h4><p>集成了 <a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">Baidu Analytics</a> 和 <a href="http://www.google.cn/analytics/" target="_blank" rel="noopener">Google Analytics</a>，到各个网站注册拿到track_id替换下面的就可以了</p>
<p>这是我的 Google Analytics</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c36b895c53196fdb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>不要使用我的track_id</strong>😂。。。</p>
<p>若不想启用统计，直接删除或注释掉就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Analytics settings</span><br><span class="line"># Baidu Analytics</span><br><span class="line">ba_track_id: 83e259f69b37d02a4633a2b7d960139c</span><br><span class="line"></span><br><span class="line"># Google Analytics</span><br><span class="line">ga_track_id: &#39;UA-90855596-1&#39;            # Format: UA-xxxxxx-xx</span><br><span class="line">ga_domain: auto</span><br></pre></td></tr></table></figure>

<h4 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">friends: [</span><br><span class="line">    &#123;</span><br><span class="line">        title: &quot;简书·BY&quot;,</span><br><span class="line">        href: &quot;http:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;e71990ada2fd&quot;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        title: &quot;Apple&quot;,</span><br><span class="line">        href: &quot;https:&#x2F;&#x2F;apple.com&quot;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        title: &quot;Apple Developer&quot;,</span><br><span class="line">        href: &quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><p>讲网页拉倒底部，点击 <code>Commit changes</code> 提交保存</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0781006b5d15d149.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>再次进入你的主页，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-a49ee2975d524c93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>恭喜你，你的个人博客搭建完成了😀。</p>
<h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>利用 Github网站 ，我们可以不用学习<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>，就可以轻松管理自己的博客</p>
<p>对于轻车熟路的程序猿来说，使用git管理会更加方便。。。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>文章统一放在网站根目录下的 <code>_posts</code> 的文件夹中。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-fb74cdc11a950bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>创建一个文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-9a47b2074362e570.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在下面写文章，和标题，还能实时预览，最后提交保存就能看到自己的新文章了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-88acd9e29fa3ae8a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>每一篇文章文件命名采用的是<code>2017-02-04-Hello-2017.md</code>时间+标题的形式，空格用<code>-</code>替换连接。</p>
<p>文件的格式是 <code>.md</code> 的 <a href="http://sspai.com/25137/" target="_blank" rel="noopener"><strong>MarkDown</strong></a> 文件。</p>
<p>我们的博客文章格式采用是 <strong>MarkDown</strong>+ <strong>YAML</strong> 的方式。</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="noopener"><strong>YAML</strong></a> 就是我们配置 <code>_config</code>文件用的语言。</p>
<p><a href="http://sspai.com/25137/" target="_blank" rel="noopener"><strong>MarkDown</strong></a> 是一种轻量级的「标记语言」，很简单。<a href="http://sspai.com/25137" target="_blank" rel="noopener">花半个小时看一下</a>就能熟练使用了</p>
<p>大概就是这么一个结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout:     post   				    # 使用的布局（不需要改）</span><br><span class="line">title:      My First Post 				# 标题 </span><br><span class="line">subtitle:   Hello World, Hello Blog #副标题</span><br><span class="line">date:       2017-02-06 				# 时间</span><br><span class="line">author:     BY 						# 作者</span><br><span class="line">header-img: img&#x2F;post-bg-2015.jpg 	#这篇文章标题背景图片</span><br><span class="line">catalog: true 						# 是否归档</span><br><span class="line">tags:								#标签</span><br><span class="line">    - 生活</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## Hey</span><br><span class="line">&gt;这是我的第一篇博客。</span><br><span class="line"></span><br><span class="line">进入你的博客主页，新的文章将会出现在你的主页上.</span><br></pre></td></tr></table></figure>

<p>按格式创建文章后，提交保存。进入你的博客主页，新的文章将会出现在你的主页上.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-f4d5bb65ae3abd00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>到这里，恭喜你！</p>
<p>你已经成功搭建了自己的个人博客以及学会在博客上撰写文字的技能了（是不是有点小兴奋🙈）。</p>
<h4 id="首页标签"><a href="#首页标签" class="headerlink" title="首页标签"></a>首页标签</h4><p>在首页可以看到这些特色标签，当你的文章出现相同标签（默认相同的<strong>标签数量大于1</strong>），才会自动生成。</p>
<p>所以当你只放一篇文章的时候是不会出现标签的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-9281b7176c456f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>建站的初期，博客比较少，若你想直接在首页生成比较多的标签。你可以在 <code>_congfig.yml</code>中找到这段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Featured Tags</span><br><span class="line">featured-tags: true                     # 是否使用首页标签</span><br><span class="line">featured-condition-size: 1              # 相同标签数量大于这个数，才会出现在首页</span><br></pre></td></tr></table></figure>

<p>将其修改为<code>featured-condition-size: 0</code>, 这样只有一个标签时也会出现在首页了。</p>
<p>相反，当你博客比较多，标签也很多时，这时你就需要改回 <code>1</code> 甚至是 <code>2</code> 了。</p>
<h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>搭建好博客之后 你可能不想直接使用 <a href="http://baiyingqiu.github.io" target="_blank" rel="noopener">baiyingqiu.github.io</a> 这么长的博客域名吧, 想换成想 <a href="http://qiubaiying.top" target="_blank" rel="noopener">qiubaiying.top</a> 这样简短的域名。那我们开始吧！</p>
<h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>首先，你必须购买一个自己的域名。</p>
<p>我是在<a href="https://wanwang.aliyun.com/domain/?spm=5176.8006371.1007.dnetcndomain.q1ys4x" target="_blank" rel="noopener">阿里云</a>购买的域名</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-ef3844cab15e35ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>用<strong>阿里云</strong> app也可以注册域名，域名的价格根据后缀的不同和域名的长度而分，比如我这个 <code>qiubaiying.top</code> 的域名第一年才只要4元~</p>
<p>域名尽量选择短一点比较好记住，注意，不能选择中文域名，比如 <code>张三.top</code> ,GitHub Pages <strong>无法处理中文域名</strong>，会导致你的域名在你的主页上使用。</p>
<p>注册的步骤就不在介绍了</p>
<h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p>注册好域名后，需要将域名解析到你的博客上</p>
<p>管理控制台 → 域名与网站（万网） → 域名</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-9a75bba50d1b14d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>选择你注册好的域名，点击解析</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0968a8dd2045f4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>添加解析</p>
<p>分别添加两个<code>A</code> 记录类型,</p>
<p>一个主机记录为 <code>www</code>,代表可以解析 <code>www.qiubaiying.top</code>的域名</p>
<p>另一个为 <code>@</code>, 代表 <code>qiubaiying.top</code></p>
<p>记录值就是我们博客的IP地址，是 GitHub Pagas 在美国的服务器的地址 <code>151.101.100.133</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0769a93bc487e9d8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可以通过 <a href="http://ip.chinaz.com/" target="_blank" rel="noopener">这个网站</a>  或者直接在终端输入<code>ping 你的地址</code>，查看博客的IP</p>
<pre><code>ping qiubaiying.github.io</code></pre><p>细心地你会发现所有人的博客都解析到 <code>151.101.100.133</code> 这个IP。</p>
<p>然后 GitHub Pages 再通过 CNAME记录 跳转到你的主页上。</p>
<h4 id="修改CNAME"><a href="#修改CNAME" class="headerlink" title="修改CNAME"></a>修改CNAME</h4><p>最后一步，只需要修改 我们github仓库下的 <strong>CNAME</strong> 文件。</p>
<p>选择 <strong>CNAME</strong> 文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-a422f3dab436dfb7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>使用的注册的域名进行替换,然后提交保存</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-6e613004fb410b44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这时，输入你自己的域名，就可以解析到你的主页了。</p>
<p>大功告成！</p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>若你对博客模板进行修改，你就要看看 Jekyll 的<a href="http://jekyll.com.cn" target="_blank" rel="noopener">开发文档</a>,是中文文档哦，对英语一般的朋友简直是福利啊（比如说我😀）。</p>
<p>还要学习 <strong>Git</strong> 和 <strong>GitHub</strong> 的工作机制了及使用。</p>
<p>你可以先看看这个<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">git教程</a>，对git有个初步的了解后，那么相信你就能将自己图片传到GitHub仓库上，或者可以说掌握了 <strong>使用git管理自己的GitHub仓库</strong> 的技能呢。</p>
<p>对于轻车熟路的程序猿来说，这篇教程就算就结束了，因为下面的内容对于你们来说 so eazy~</p>
<p>但相信很多小白都一脸懵逼，那我们继续👇。</p>
<h1 id="利用GithHub-Desktop管理GitHub仓库"><a href="#利用GithHub-Desktop管理GitHub仓库" class="headerlink" title="利用GithHub Desktop管理GitHub仓库"></a>利用GithHub Desktop管理GitHub仓库</h1><p><a href="https://desktop.github.com/" target="_blank" rel="noopener">GithHub Desktop</a> 是 <strong>GithHub</strong> 推出的一款管理GitHub仓库的桌面软件，换句话说就是将你在<strong>Github</strong>上的文件同步到本地电脑上，并将修改后的文件同步到<strong>Github</strong>远程仓库。</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>点击图片进入下载页面，选择对应的平台进行下载</p>
<p><a href="https://desktop.github.com/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/2178672-6022ba3938b3088e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></a></p>
<p>下面以<strong>Mac</strong>平台为例：</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>将下载好的文件解压，将这只小猫拖到应用程序文件夹中</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-8f8c27f4e5c72276.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>就可以在<strong>Launchpad</strong>找到这只小猫咪~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0f2da4717361459c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>点开应用,会弹出<strong>登录</strong>框，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-adb7d6824e471ef5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>输入你的<strong>GitHub</strong>账号和密码进行登录</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-2d7c407ebddbb44f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>登录后关闭窗口</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-93cdccc42024914b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后返回引导窗，一直按 <strong>Continue</strong> 继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-450ccef6b1ab7b0a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>Continue</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-06b6e6792472ecae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>还是<strong>Continue</strong>~<br><img src="http://upload-images.jianshu.io/upload_images/2178672-681a6c455f6b512f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>进入主界面，先 <strong>右键Remve</strong> 删除这个用户指导，贼烦~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-604f6f23b8fab6f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><p>选择你的仓库克隆到本地</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-45ddcd27e2f858a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-625be1220fea36b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="管理仓库"><a href="#管理仓库" class="headerlink" title="管理仓库"></a>管理仓库</h4><p>现在文件夹中打开</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-92c1616af56b501a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>打开后你会的发现文件结构和你在Github上的一模一样~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-bf3580ae1cd9a29e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>你最先关心的可能是你的头像~在<strong>img</strong>文件夹中把替换我的头像就好了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c9421d64538c3ba6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>不仅是图片，所有在Github上的的操作都可以进行。</p>
<h4 id="保存修改"><a href="#保存修改" class="headerlink" title="保存修改"></a>保存修改</h4><p>当你对仓库文件夹的文件下进行修改、添加或删除时，都可以在 <strong>GitHub Desktop</strong> 中看到</p>
<p>例如我在 <code>img</code> 中添加了一张图片 <code>avatar-demo.png</code> 添加了一张图片</p>
<p>就可以在看到<strong>GitHub Desktop</strong>显示了我的修改</p>
<p>保存修改只要按 <strong>Commit to master</strong>，然后可以写上你的修改说明</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-4bfbfec37cbb8eb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>将修改同步到 <strong>GitHub</strong> 远程仓库上只需要一步：点击右上角的<strong>同步按钮</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-3c2ee8234a7f1832.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>打开你的GitHub上的仓库，你就可以看到已经和本地同步了</p>
<p>可以看到你提交的详情： <code>add img</code> </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-293bdd4cbee0e9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这样，你已经能轻松管理自己的博客了。</p>
<p>想上传头像，背景，或者是删掉你不要的图片（我的头像😏）已经是 so eazy了吧~</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>你在 <strong>GitHub</strong> 网站上进行 <strong>Commit</strong> 操作后，需要在<strong>GitHub Desktop</strong>上按一下 <strong>同步按键</strong> 才能同步网站上的修改到你的本地。</p>
<h1 id="修改个人介绍"><a href="#修改个人介绍" class="headerlink" title="修改个人介绍"></a>修改个人介绍</h1><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fme0poz7gqj30vq0l8whh.jpg" alt=""></p>
<p>修改个人介绍需要修改根目录下的 <code>about.html</code> 文件</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fme0rna33tj30bw0bntah.jpg" alt=""></p>
<p>看不懂 HTML 标签？没关系，对照着修改就好了~ 还有注意这个有中英介绍</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fme0sbvmmcj30zp0os7ap.jpg" alt=""></p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>最近有很多人给我提问题，我这边总结一下</p>
<h4 id="配置文件修改后没有效果"><a href="#配置文件修改后没有效果" class="headerlink" title="配置文件修改后没有效果"></a>配置文件修改后没有效果</h4><p>刷新几遍浏览器就好了~</p>
<p>不行的话，先清除浏览器缓存再试试。</p>
<h4 id="404错误"><a href="#404错误" class="headerlink" title="404错误"></a>404错误</h4><ol>
<li>检查你的仓库名是否有按照要求填写</li>
<li>确定 <strong>Fork</strong> 的是不是我的仓库~</li>
</ol>
<h4 id="修改CNAME文件，域名还是不变"><a href="#修改CNAME文件，域名还是不变" class="headerlink" title="修改CNAME文件，域名还是不变"></a>修改CNAME文件，域名还是不变</h4><p>清除浏览器缓存就OK~</p>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p>直接在评论中提出来或私信我，我会一一替大家解决的😀</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>最近有人往我的远程仓库不停的 <strong>push</strong>，一天连收几十封邮件！例如像这样的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-1347f2cc9a4a8dc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>原因大多是直接Clone了我的仓库到本地，<strong>没有删除我的远程仓库地址</strong>，添加完自己的仓库地址后，一口气推送到所有远程仓库（包括我的😂）~</p>
<p>打扰了我的工作和生活~</p>
<p>所以，<strong>请不要往我的仓库上推送分支</strong>！</p>
<p>我发现一个问题是，很多人每次修改博客的内容都commit一次到远程仓库，然后再查看修改结果，这样效率非常低！</p>
<h4 id="来，上车！"><a href="#来，上车！" class="headerlink" title="来，上车！"></a>来，上车！</h4><h2 id="在本地调试博客"><a href="#在本地调试博客" class="headerlink" title="在本地调试博客"></a>在本地调试博客</h2><blockquote>
<p>注：下面的操作是在 <strong>Mac</strong> 终端进行的。<br><strong>Windows</strong> 环境下的配置请参考 <a href="http://www.jianshu.com/u/a13e7484dc21" target="_blank" rel="noopener">@梦幻之云</a> 提供的 <a href="https://agcaiyun.cn/2017/09/10/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">这篇文章</a>。</p>
</blockquote>
<p>有心的同学在 <a href="http://jekyllcn.com/" target="_blank" rel="noopener">jekyll官网</a> 就会发现 <code>jekyll</code> 的 提供的实例代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ $ gem install jekyll bundler</span><br><span class="line">~ $ jekyll new my-awesome-site</span><br><span class="line">~ $ cd my-awesome-site</span><br><span class="line">~&#x2F;my-awesome-site $ bundle install</span><br><span class="line">~&#x2F;my-awesome-site $ bundle exec jekyll serve</span><br><span class="line"># &#x3D;&gt; 打开浏览器 http:&#x2F;&#x2F;localhost:4000</span><br></pre></td></tr></table></figure>


<p>这段命令创建了一个默认的 <code>jekll</code> 网站，然后在本机的 4000 窗口展示。聪明的你应该发现怎么做了吧~</p>
<p>安装 <code>jekyll</code>和 <code>jekyll bundler</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem install jekyll</span><br><span class="line">$ gem install jekyll bundler</span><br></pre></td></tr></table></figure>

<p>进入你的 <strong>Blog 所在目录</strong>，然后创建本地服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jekyll s</span><br></pre></td></tr></table></figure>

<p>然后会显示 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Auto-regeneration: enabled for &#39;&#x2F;Users&#x2F;baiying&#x2F;Blog&#39;</span><br><span class="line">Configuration file: &#x2F;Users&#x2F;baiying&#x2F;Blog&#x2F;_config.yml</span><br><span class="line">    Server address: http:&#x2F;&#x2F;127.0.0.1:4000&#x2F;</span><br><span class="line">  Server running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>

<p>你就可以在 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a> 看到你的博客，你对本地博客的修改都会在这个地址进行显示，这大大提高了对博客的配置效率。</p>
<p>使用<code>ctrl+c</code>就可以停止 <strong>serve</strong></p>
<h1 id="Star"><a href="#Star" class="headerlink" title="Star"></a>Star</h1><p>若本教程顺利帮你搭建了自己的个人博客，请不要 <strong>害羞</strong>，给我的 <a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">github仓库</a> 点个 <strong>star</strong> 吧！</p>
<p>因为最近发现 Fork 将近破百，加上直接 Clone 仓库的，保守估计已经帮助上百人成功的搭建了自己的博客，<del>可是 Star 却仅仅只有 <strong>12</strong>！可能还是做的不够好吧！</del>现在已经破百了，感谢大家的Star！</p>
<h3 id="别无他求，点个-Star-吧！"><a href="#别无他求，点个-Star-吧！" class="headerlink" title="别无他求，点个 Star 吧！"></a><strong>别无他求，点个 <a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">Star</a> 吧</strong>！</h3><p><img src="http://upload-images.jianshu.io/upload_images/2178672-768a38ee9fb0df28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>心满意足！</strong></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h4 id="修改网站的-icon"><a href="#修改网站的-icon" class="headerlink" title="修改网站的 icon"></a>修改网站的 <strong>icon</strong></h4><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1flgh6k23ppj30ad00uq2t.jpg" alt=""></p>
<p>要修改如图所示的网站 <strong>icon</strong>：</p>
<p>在博客 <code>img</code> 目录下找到并替换 <code>favicon.ico</code> 这个图标即可，图标尺寸为<code>32x32</code>。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1flghahch1oj30gu09y419.jpg" alt=""></p>
<h4 id="修改主页的座右铭"><a href="#修改主页的座右铭" class="headerlink" title="修改主页的座右铭"></a>修改主页的座右铭</h4><p>最近有不少小伙伴私信我：<strong>如何修改主页的座右铭？</strong></p>
<p>就是这个：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-31dc0068f256aca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>很简单，找到博客目录下的 <strong>index.html</strong> 文件，修改这句话就可以了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-9e4785654523bf07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="如何在博客文章中上插入图片"><a href="#如何在博客文章中上插入图片" class="headerlink" title="如何在博客文章中上插入图片"></a>如何在博客文章中上插入图片</h4><p>博客的文章用的是 MarkDown 格式，如果没用过 MarkDown 真的 强烈推荐 <a href="http://sspai.com/25137" target="_blank" rel="noopener">花半个小时学习一下</a>。</p>
<p>MarkDown 中添加图片的形式是 :<code>![](图片的URL)</code></p>
<p>例如：</p>
<p><code>![MarkDown示例图片](http://upload-images.jianshu.io/upload_images/2178672-eb2effd6b942a500.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code>就会显示下面这张图片</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-98965f66db8f5856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MarkDown示例图片"></p>
<p><code>https://ws3.sinaimg.cn/large/006tNc79gy1fj9xhjzobbj30yg0my75z.jpg</code>就是这张图片的URL，我们可以在浏览器输入这个URL找到或下载这张图片。</p>
<p>所以，要在 MacDown 中插入图片，这张图片就需要上传到图床（网上），然后在引<br>用这张图片的URL。</p>
<h5 id="将图片上传到图床"><a href="#将图片上传到图床" class="headerlink" title="将图片上传到图床"></a>将图片上传到图床</h5><p>Mac 上的图床神器：iPic  </p>
<p>直接在App Store上下载，谁用谁知道！</p>
<p>使用方法很简单，直接拖动图片到 P 图标上，或者选中图片按快捷键 <code>⌘+U</code>，就能请示上传。</p>
<p>上传成功就能直接粘贴图片的URL。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-7399aeaced6f1e29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iPic"></p>
<p>用 iPic 上传图片后，获取URL插入文章中就可以了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-4be76fb02708de5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iPic上传图片"></p>
<h4 id="推荐几个好用软件"><a href="#推荐几个好用软件" class="headerlink" title="推荐几个好用软件"></a>推荐几个好用软件</h4><h5 id="MarkDown编辑器"><a href="#MarkDown编辑器" class="headerlink" title="MarkDown编辑器"></a>MarkDown编辑器</h5><p><a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a>：可能是Mac上最好的MacDown编辑器了  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-2226239a63278302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h5><p><a href="https://imageoptim.com/" target="_blank" rel="noopener">ImageOptim</a></p>
<p>对于我们的博客来说，图片越大，加载速度越慢。</p>
<p>不信你用手机打开你的博客试试~</p>
<p>所以有必要对我们上传到博客网站中的图片：指的是你的头像，首页背景图片，文章背景图片等。对于博客文章中插入的图片，其实也可以压缩了再上传。</p>
<p>对博客中的所有图片进行压缩：</p>
<p>看看压缩结果，最高的一张压缩了78.7%，这简直是太可怕了！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0f8e643fa1da8674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ImageOptim压缩图片"></p>
<p>好了，现在个人博客的加载速度估计要起飞了~</p>
<h1 id="最后要说个事情"><a href="#最后要说个事情" class="headerlink" title="最后要说个事情"></a>最后要说个事情</h1><p>我在博客中的文章，你们可以保留，让更多需要帮助人的看到，当然也可以删除。</p>
<p>但是，我发现居然有人把文章的作者改成了自己，然后当成自己的文章放在自己的博客上，这就令人感到气愤了。</p>
<p>比如说向我请教问题的这位：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-ed45ebafec7f5d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>我在博客中的每篇文章都是我一字一句敲出来的，转载的文章我也注明了出处，表示对原作者的尊重。同时也希望大家都能尊重我的付出。</p>
<p>谢谢~</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
